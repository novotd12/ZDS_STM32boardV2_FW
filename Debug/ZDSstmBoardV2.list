
ZDSstmBoardV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008870  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08008a48  08008a48  00018a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a88  08008a88  00020868  2**0
                  CONTENTS
  4 .ARM          00000008  08008a88  08008a88  00018a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a90  08008a90  00020868  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a90  08008a90  00018a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a94  08008a94  00018a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000868  20000000  08008a98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aa4  20000868  08009300  00020868  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000130c  08009300  0002130c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020868  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019f97  00000000  00000000  00020898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ccb  00000000  00000000  0003a82f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d0  00000000  00000000  0003d500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014c8  00000000  00000000  0003ead0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020668  00000000  00000000  0003ff98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018130  00000000  00000000  00060600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dbb19  00000000  00000000  00078730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00154249  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e74  00000000  00000000  0015429c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000868 	.word	0x20000868
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008a30 	.word	0x08008a30

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000086c 	.word	0x2000086c
 8000214:	08008a30 	.word	0x08008a30

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <updateFIR>:
}
void setCoefs(int16_t n, int32_t val){
	fir_coef[n] = val;
}

int32_t updateFIR(int32_t val){
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	int16_t q;
	for (q = (Ntaps - 2); q >= 0; q--) {
 8000524:	4b24      	ldr	r3, [pc, #144]	; (80005b8 <updateFIR+0x9c>)
 8000526:	881b      	ldrh	r3, [r3, #0]
 8000528:	b21b      	sxth	r3, r3
 800052a:	b29b      	uxth	r3, r3
 800052c:	3b02      	subs	r3, #2
 800052e:	b29b      	uxth	r3, r3
 8000530:	81fb      	strh	r3, [r7, #14]
 8000532:	e010      	b.n	8000556 <updateFIR+0x3a>
		fir_buffer[q + 1] = fir_buffer[q];
 8000534:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000538:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800053c:	3301      	adds	r3, #1
 800053e:	491f      	ldr	r1, [pc, #124]	; (80005bc <updateFIR+0xa0>)
 8000540:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000544:	491d      	ldr	r1, [pc, #116]	; (80005bc <updateFIR+0xa0>)
 8000546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (q = (Ntaps - 2); q >= 0; q--) {
 800054a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800054e:	b29b      	uxth	r3, r3
 8000550:	3b01      	subs	r3, #1
 8000552:	b29b      	uxth	r3, r3
 8000554:	81fb      	strh	r3, [r7, #14]
 8000556:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800055a:	2b00      	cmp	r3, #0
 800055c:	daea      	bge.n	8000534 <updateFIR+0x18>
	}
	fir_buffer[0] = val;
 800055e:	4a17      	ldr	r2, [pc, #92]	; (80005bc <updateFIR+0xa0>)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	6013      	str	r3, [r2, #0]

	int32_t fir_out = 0;
 8000564:	2300      	movs	r3, #0
 8000566:	60bb      	str	r3, [r7, #8]

	for (q = 0; q < Ntaps; q++) {
 8000568:	2300      	movs	r3, #0
 800056a:	81fb      	strh	r3, [r7, #14]
 800056c:	e015      	b.n	800059a <updateFIR+0x7e>
		fir_out += (fir_coef[q] * fir_buffer[q])>>16;
 800056e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000572:	4a13      	ldr	r2, [pc, #76]	; (80005c0 <updateFIR+0xa4>)
 8000574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000578:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800057c:	490f      	ldr	r1, [pc, #60]	; (80005bc <updateFIR+0xa0>)
 800057e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000582:	fb02 f303 	mul.w	r3, r2, r3
 8000586:	141b      	asrs	r3, r3, #16
 8000588:	68ba      	ldr	r2, [r7, #8]
 800058a:	4413      	add	r3, r2
 800058c:	60bb      	str	r3, [r7, #8]
	for (q = 0; q < Ntaps; q++) {
 800058e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000592:	b29b      	uxth	r3, r3
 8000594:	3301      	adds	r3, #1
 8000596:	b29b      	uxth	r3, r3
 8000598:	81fb      	strh	r3, [r7, #14]
 800059a:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <updateFIR+0x9c>)
 800059c:	881b      	ldrh	r3, [r3, #0]
 800059e:	b21b      	sxth	r3, r3
 80005a0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	dbe2      	blt.n	800056e <updateFIR+0x52>
	}
	return fir_out;
 80005a8:	68bb      	ldr	r3, [r7, #8]
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3714      	adds	r7, #20
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	200007d4 	.word	0x200007d4
 80005bc:	20000884 	.word	0x20000884
 80005c0:	20000000 	.word	0x20000000

080005c4 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	uartRxCt=200;
 80005cc:	4b6d      	ldr	r3, [pc, #436]	; (8000784 <HAL_UART_RxCpltCallback+0x1c0>)
 80005ce:	22c8      	movs	r2, #200	; 0xc8
 80005d0:	601a      	str	r2, [r3, #0]

	Integrator_1 =0;
 80005d2:	4b6d      	ldr	r3, [pc, #436]	; (8000788 <HAL_UART_RxCpltCallback+0x1c4>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
	Integrator_2 =0;
 80005d8:	4b6c      	ldr	r3, [pc, #432]	; (800078c <HAL_UART_RxCpltCallback+0x1c8>)
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
	Integrator_3 =0;
 80005de:	4b6c      	ldr	r3, [pc, #432]	; (8000790 <HAL_UART_RxCpltCallback+0x1cc>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]

	switch(rxData){
 80005e4:	4b6b      	ldr	r3, [pc, #428]	; (8000794 <HAL_UART_RxCpltCallback+0x1d0>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	3b61      	subs	r3, #97	; 0x61
 80005ec:	2b13      	cmp	r3, #19
 80005ee:	f200 80bc 	bhi.w	800076a <HAL_UART_RxCpltCallback+0x1a6>
 80005f2:	a201      	add	r2, pc, #4	; (adr r2, 80005f8 <HAL_UART_RxCpltCallback+0x34>)
 80005f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f8:	08000649 	.word	0x08000649
 80005fc:	08000657 	.word	0x08000657
 8000600:	08000665 	.word	0x08000665
 8000604:	08000673 	.word	0x08000673
 8000608:	08000683 	.word	0x08000683
 800060c:	08000693 	.word	0x08000693
 8000610:	080006a3 	.word	0x080006a3
 8000614:	080006b3 	.word	0x080006b3
 8000618:	080006c1 	.word	0x080006c1
 800061c:	080006cf 	.word	0x080006cf
 8000620:	080006dd 	.word	0x080006dd
 8000624:	080006eb 	.word	0x080006eb
 8000628:	080006f9 	.word	0x080006f9
 800062c:	08000709 	.word	0x08000709
 8000630:	08000719 	.word	0x08000719
 8000634:	08000729 	.word	0x08000729
 8000638:	0800076b 	.word	0x0800076b
 800063c:	08000739 	.word	0x08000739
 8000640:	0800074b 	.word	0x0800074b
 8000644:	0800075b 	.word	0x0800075b
		case 'a': mode = FIRmode; decRatio = 32;   break;
 8000648:	4b53      	ldr	r3, [pc, #332]	; (8000798 <HAL_UART_RxCpltCallback+0x1d4>)
 800064a:	2201      	movs	r2, #1
 800064c:	701a      	strb	r2, [r3, #0]
 800064e:	4b53      	ldr	r3, [pc, #332]	; (800079c <HAL_UART_RxCpltCallback+0x1d8>)
 8000650:	2220      	movs	r2, #32
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	e08d      	b.n	8000772 <HAL_UART_RxCpltCallback+0x1ae>
		case 'b': mode = MAmode;  decRatio = 64;   break;
 8000656:	4b50      	ldr	r3, [pc, #320]	; (8000798 <HAL_UART_RxCpltCallback+0x1d4>)
 8000658:	2202      	movs	r2, #2
 800065a:	701a      	strb	r2, [r3, #0]
 800065c:	4b4f      	ldr	r3, [pc, #316]	; (800079c <HAL_UART_RxCpltCallback+0x1d8>)
 800065e:	2240      	movs	r2, #64	; 0x40
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	e086      	b.n	8000772 <HAL_UART_RxCpltCallback+0x1ae>
		case 'c': mode = MAmode;  decRatio = 128;  break;
 8000664:	4b4c      	ldr	r3, [pc, #304]	; (8000798 <HAL_UART_RxCpltCallback+0x1d4>)
 8000666:	2202      	movs	r2, #2
 8000668:	701a      	strb	r2, [r3, #0]
 800066a:	4b4c      	ldr	r3, [pc, #304]	; (800079c <HAL_UART_RxCpltCallback+0x1d8>)
 800066c:	2280      	movs	r2, #128	; 0x80
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	e07f      	b.n	8000772 <HAL_UART_RxCpltCallback+0x1ae>
		case 'd': mode = MAmode;  decRatio = 256;  break;
 8000672:	4b49      	ldr	r3, [pc, #292]	; (8000798 <HAL_UART_RxCpltCallback+0x1d4>)
 8000674:	2202      	movs	r2, #2
 8000676:	701a      	strb	r2, [r3, #0]
 8000678:	4b48      	ldr	r3, [pc, #288]	; (800079c <HAL_UART_RxCpltCallback+0x1d8>)
 800067a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	e077      	b.n	8000772 <HAL_UART_RxCpltCallback+0x1ae>
		case 'e': mode = MAmode;  decRatio = 512;  break;
 8000682:	4b45      	ldr	r3, [pc, #276]	; (8000798 <HAL_UART_RxCpltCallback+0x1d4>)
 8000684:	2202      	movs	r2, #2
 8000686:	701a      	strb	r2, [r3, #0]
 8000688:	4b44      	ldr	r3, [pc, #272]	; (800079c <HAL_UART_RxCpltCallback+0x1d8>)
 800068a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	e06f      	b.n	8000772 <HAL_UART_RxCpltCallback+0x1ae>
		case 'f': mode = MAmode;  decRatio = 1024; break;
 8000692:	4b41      	ldr	r3, [pc, #260]	; (8000798 <HAL_UART_RxCpltCallback+0x1d4>)
 8000694:	2202      	movs	r2, #2
 8000696:	701a      	strb	r2, [r3, #0]
 8000698:	4b40      	ldr	r3, [pc, #256]	; (800079c <HAL_UART_RxCpltCallback+0x1d8>)
 800069a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	e067      	b.n	8000772 <HAL_UART_RxCpltCallback+0x1ae>
		case 'g': mode = MAmode;  decRatio = 4096; break;
 80006a2:	4b3d      	ldr	r3, [pc, #244]	; (8000798 <HAL_UART_RxCpltCallback+0x1d4>)
 80006a4:	2202      	movs	r2, #2
 80006a6:	701a      	strb	r2, [r3, #0]
 80006a8:	4b3c      	ldr	r3, [pc, #240]	; (800079c <HAL_UART_RxCpltCallback+0x1d8>)
 80006aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	e05f      	b.n	8000772 <HAL_UART_RxCpltCallback+0x1ae>
		case 'h': mode = SARmode; decRatio = 1;    break;
 80006b2:	4b39      	ldr	r3, [pc, #228]	; (8000798 <HAL_UART_RxCpltCallback+0x1d4>)
 80006b4:	2203      	movs	r2, #3
 80006b6:	701a      	strb	r2, [r3, #0]
 80006b8:	4b38      	ldr	r3, [pc, #224]	; (800079c <HAL_UART_RxCpltCallback+0x1d8>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	e058      	b.n	8000772 <HAL_UART_RxCpltCallback+0x1ae>
		case 'i': mode = RAWmode; decRatio = 1;    break;
 80006c0:	4b35      	ldr	r3, [pc, #212]	; (8000798 <HAL_UART_RxCpltCallback+0x1d4>)
 80006c2:	2204      	movs	r2, #4
 80006c4:	701a      	strb	r2, [r3, #0]
 80006c6:	4b35      	ldr	r3, [pc, #212]	; (800079c <HAL_UART_RxCpltCallback+0x1d8>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	e051      	b.n	8000772 <HAL_UART_RxCpltCallback+0x1ae>
		case 'j': mode = SINCmode; decRatio = 32;   break;
 80006ce:	4b32      	ldr	r3, [pc, #200]	; (8000798 <HAL_UART_RxCpltCallback+0x1d4>)
 80006d0:	2205      	movs	r2, #5
 80006d2:	701a      	strb	r2, [r3, #0]
 80006d4:	4b31      	ldr	r3, [pc, #196]	; (800079c <HAL_UART_RxCpltCallback+0x1d8>)
 80006d6:	2220      	movs	r2, #32
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	e04a      	b.n	8000772 <HAL_UART_RxCpltCallback+0x1ae>
		case 'k': mode = SINCmode; decRatio = 64;   break;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <HAL_UART_RxCpltCallback+0x1d4>)
 80006de:	2205      	movs	r2, #5
 80006e0:	701a      	strb	r2, [r3, #0]
 80006e2:	4b2e      	ldr	r3, [pc, #184]	; (800079c <HAL_UART_RxCpltCallback+0x1d8>)
 80006e4:	2240      	movs	r2, #64	; 0x40
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	e043      	b.n	8000772 <HAL_UART_RxCpltCallback+0x1ae>
		case 'l': mode = SINCmode; decRatio = 128;  break;
 80006ea:	4b2b      	ldr	r3, [pc, #172]	; (8000798 <HAL_UART_RxCpltCallback+0x1d4>)
 80006ec:	2205      	movs	r2, #5
 80006ee:	701a      	strb	r2, [r3, #0]
 80006f0:	4b2a      	ldr	r3, [pc, #168]	; (800079c <HAL_UART_RxCpltCallback+0x1d8>)
 80006f2:	2280      	movs	r2, #128	; 0x80
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	e03c      	b.n	8000772 <HAL_UART_RxCpltCallback+0x1ae>
		case 'm': mode = SINCmode; decRatio = 256;  break;
 80006f8:	4b27      	ldr	r3, [pc, #156]	; (8000798 <HAL_UART_RxCpltCallback+0x1d4>)
 80006fa:	2205      	movs	r2, #5
 80006fc:	701a      	strb	r2, [r3, #0]
 80006fe:	4b27      	ldr	r3, [pc, #156]	; (800079c <HAL_UART_RxCpltCallback+0x1d8>)
 8000700:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	e034      	b.n	8000772 <HAL_UART_RxCpltCallback+0x1ae>
		case 'n': mode = SINCmode; decRatio = 512;  break;
 8000708:	4b23      	ldr	r3, [pc, #140]	; (8000798 <HAL_UART_RxCpltCallback+0x1d4>)
 800070a:	2205      	movs	r2, #5
 800070c:	701a      	strb	r2, [r3, #0]
 800070e:	4b23      	ldr	r3, [pc, #140]	; (800079c <HAL_UART_RxCpltCallback+0x1d8>)
 8000710:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	e02c      	b.n	8000772 <HAL_UART_RxCpltCallback+0x1ae>
		case 'o': mode = SINCmode; decRatio = 1024; break;
 8000718:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <HAL_UART_RxCpltCallback+0x1d4>)
 800071a:	2205      	movs	r2, #5
 800071c:	701a      	strb	r2, [r3, #0]
 800071e:	4b1f      	ldr	r3, [pc, #124]	; (800079c <HAL_UART_RxCpltCallback+0x1d8>)
 8000720:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	e024      	b.n	8000772 <HAL_UART_RxCpltCallback+0x1ae>
		case 'p': mode = SINCmode; decRatio = 4096; break;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <HAL_UART_RxCpltCallback+0x1d4>)
 800072a:	2205      	movs	r2, #5
 800072c:	701a      	strb	r2, [r3, #0]
 800072e:	4b1b      	ldr	r3, [pc, #108]	; (800079c <HAL_UART_RxCpltCallback+0x1d8>)
 8000730:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	e01c      	b.n	8000772 <HAL_UART_RxCpltCallback+0x1ae>

		case 'r': mode = TRACKmode; htim4.Instance->ARR = 999; break; // 1kHz
 8000738:	4b17      	ldr	r3, [pc, #92]	; (8000798 <HAL_UART_RxCpltCallback+0x1d4>)
 800073a:	2206      	movs	r2, #6
 800073c:	701a      	strb	r2, [r3, #0]
 800073e:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <HAL_UART_RxCpltCallback+0x1dc>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000746:	62da      	str	r2, [r3, #44]	; 0x2c
 8000748:	e013      	b.n	8000772 <HAL_UART_RxCpltCallback+0x1ae>
		case 's': mode = TRACKmode; htim4.Instance->ARR = 99; break; // 10kHz
 800074a:	4b13      	ldr	r3, [pc, #76]	; (8000798 <HAL_UART_RxCpltCallback+0x1d4>)
 800074c:	2206      	movs	r2, #6
 800074e:	701a      	strb	r2, [r3, #0]
 8000750:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <HAL_UART_RxCpltCallback+0x1dc>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2263      	movs	r2, #99	; 0x63
 8000756:	62da      	str	r2, [r3, #44]	; 0x2c
 8000758:	e00b      	b.n	8000772 <HAL_UART_RxCpltCallback+0x1ae>
		case 't': mode = TRACKmode; htim4.Instance->ARR = 19; break; // 50kHz
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <HAL_UART_RxCpltCallback+0x1d4>)
 800075c:	2206      	movs	r2, #6
 800075e:	701a      	strb	r2, [r3, #0]
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <HAL_UART_RxCpltCallback+0x1dc>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2213      	movs	r2, #19
 8000766:	62da      	str	r2, [r3, #44]	; 0x2c
 8000768:	e003      	b.n	8000772 <HAL_UART_RxCpltCallback+0x1ae>

		default: mode = OFFmode; break;
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <HAL_UART_RxCpltCallback+0x1d4>)
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]
 8000770:	bf00      	nop
	}
	  UART_Start_Receive_IT(&huart1, (uint8_t*)&rxData, 1);
 8000772:	2201      	movs	r2, #1
 8000774:	4907      	ldr	r1, [pc, #28]	; (8000794 <HAL_UART_RxCpltCallback+0x1d0>)
 8000776:	480b      	ldr	r0, [pc, #44]	; (80007a4 <HAL_UART_RxCpltCallback+0x1e0>)
 8000778:	f006 fea8 	bl	80074cc <UART_Start_Receive_IT>
}
 800077c:	bf00      	nop
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	200012f8 	.word	0x200012f8
 8000788:	200012d4 	.word	0x200012d4
 800078c:	200012d8 	.word	0x200012d8
 8000790:	200012dc 	.word	0x200012dc
 8000794:	200012d1 	.word	0x200012d1
 8000798:	200012d0 	.word	0x200012d0
 800079c:	200007d8 	.word	0x200007d8
 80007a0:	20001170 	.word	0x20001170
 80007a4:	200011bc 	.word	0x200011bc

080007a8 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
	if(__HAL_GPIO_EXTI_GET_IT(SD_CLK_Pin) != 0x00u) {
 80007ae:	4b8a      	ldr	r3, [pc, #552]	; (80009d8 <EXTI3_IRQHandler+0x230>)
 80007b0:	695b      	ldr	r3, [r3, #20]
 80007b2:	f003 0308 	and.w	r3, r3, #8
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	f000 8174 	beq.w	8000aa4 <EXTI3_IRQHandler+0x2fc>
	    __HAL_GPIO_EXTI_CLEAR_IT(SD_CLK_Pin);
 80007bc:	4b86      	ldr	r3, [pc, #536]	; (80009d8 <EXTI3_IRQHandler+0x230>)
 80007be:	2208      	movs	r2, #8
 80007c0:	615a      	str	r2, [r3, #20]
	    if(mode!=RAWmode){
 80007c2:	4b86      	ldr	r3, [pc, #536]	; (80009dc <EXTI3_IRQHandler+0x234>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	2b04      	cmp	r3, #4
 80007ca:	f000 80ca 	beq.w	8000962 <EXTI3_IRQHandler+0x1ba>
    	if(mode!=SARmode){
 80007ce:	4b83      	ldr	r3, [pc, #524]	; (80009dc <EXTI3_IRQHandler+0x234>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	2b03      	cmp	r3, #3
 80007d6:	f000 80ae 	beq.w	8000936 <EXTI3_IRQHandler+0x18e>
    		if(mode!=OFFmode){
 80007da:	4b80      	ldr	r3, [pc, #512]	; (80009dc <EXTI3_IRQHandler+0x234>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	f000 815f 	beq.w	8000aa4 <EXTI3_IRQHandler+0x2fc>
    			int32_t Data_in;
				if(HAL_GPIO_ReadPin(SD_DOUT_GPIO_Port, SD_DOUT_Pin)==GPIO_PIN_RESET){
 80007e6:	2140      	movs	r1, #64	; 0x40
 80007e8:	487d      	ldr	r0, [pc, #500]	; (80009e0 <EXTI3_IRQHandler+0x238>)
 80007ea:	f003 ffb9 	bl	8004760 <HAL_GPIO_ReadPin>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d115      	bne.n	8000820 <EXTI3_IRQHandler+0x78>
					accValue += 10000;
 80007f4:	4b7b      	ldr	r3, [pc, #492]	; (80009e4 <EXTI3_IRQHandler+0x23c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80007fc:	3310      	adds	r3, #16
 80007fe:	4a79      	ldr	r2, [pc, #484]	; (80009e4 <EXTI3_IRQHandler+0x23c>)
 8000800:	6013      	str	r3, [r2, #0]
					Data_in = 1;
 8000802:	2301      	movs	r3, #1
 8000804:	607b      	str	r3, [r7, #4]
					if(mode == FIRmode){
 8000806:	4b75      	ldr	r3, [pc, #468]	; (80009dc <EXTI3_IRQHandler+0x234>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	b2db      	uxtb	r3, r3
 800080c:	2b01      	cmp	r3, #1
 800080e:	d11c      	bne.n	800084a <EXTI3_IRQHandler+0xa2>
						actFirVal = updateFIR(+10000);
 8000810:	f242 7010 	movw	r0, #10000	; 0x2710
 8000814:	f7ff fe82 	bl	800051c <updateFIR>
 8000818:	4603      	mov	r3, r0
 800081a:	4a73      	ldr	r2, [pc, #460]	; (80009e8 <EXTI3_IRQHandler+0x240>)
 800081c:	6013      	str	r3, [r2, #0]
 800081e:	e014      	b.n	800084a <EXTI3_IRQHandler+0xa2>
					}
				}else{
					accValue -= 10000;
 8000820:	4b70      	ldr	r3, [pc, #448]	; (80009e4 <EXTI3_IRQHandler+0x23c>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 8000828:	3b10      	subs	r3, #16
 800082a:	4a6e      	ldr	r2, [pc, #440]	; (80009e4 <EXTI3_IRQHandler+0x23c>)
 800082c:	6013      	str	r3, [r2, #0]
					Data_in = -1;
 800082e:	f04f 33ff 	mov.w	r3, #4294967295
 8000832:	607b      	str	r3, [r7, #4]
					if(mode == FIRmode){
 8000834:	4b69      	ldr	r3, [pc, #420]	; (80009dc <EXTI3_IRQHandler+0x234>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	b2db      	uxtb	r3, r3
 800083a:	2b01      	cmp	r3, #1
 800083c:	d105      	bne.n	800084a <EXTI3_IRQHandler+0xa2>
						actFirVal = updateFIR(-10000);
 800083e:	486b      	ldr	r0, [pc, #428]	; (80009ec <EXTI3_IRQHandler+0x244>)
 8000840:	f7ff fe6c 	bl	800051c <updateFIR>
 8000844:	4603      	mov	r3, r0
 8000846:	4a68      	ldr	r2, [pc, #416]	; (80009e8 <EXTI3_IRQHandler+0x240>)
 8000848:	6013      	str	r3, [r2, #0]
					}
				}
				if(clockCounter<(decRatio-1)){
 800084a:	4b69      	ldr	r3, [pc, #420]	; (80009f0 <EXTI3_IRQHandler+0x248>)
 800084c:	881b      	ldrh	r3, [r3, #0]
 800084e:	b29b      	uxth	r3, r3
 8000850:	461a      	mov	r2, r3
 8000852:	4b68      	ldr	r3, [pc, #416]	; (80009f4 <EXTI3_IRQHandler+0x24c>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	3b01      	subs	r3, #1
 8000858:	429a      	cmp	r2, r3
 800085a:	da07      	bge.n	800086c <EXTI3_IRQHandler+0xc4>
					clockCounter++;
 800085c:	4b64      	ldr	r3, [pc, #400]	; (80009f0 <EXTI3_IRQHandler+0x248>)
 800085e:	881b      	ldrh	r3, [r3, #0]
 8000860:	b29b      	uxth	r3, r3
 8000862:	3301      	adds	r3, #1
 8000864:	b29a      	uxth	r2, r3
 8000866:	4b62      	ldr	r3, [pc, #392]	; (80009f0 <EXTI3_IRQHandler+0x248>)
 8000868:	801a      	strh	r2, [r3, #0]
 800086a:	e04f      	b.n	800090c <EXTI3_IRQHandler+0x164>
				}else{
					clockCounter=0;
 800086c:	4b60      	ldr	r3, [pc, #384]	; (80009f0 <EXTI3_IRQHandler+0x248>)
 800086e:	2200      	movs	r2, #0
 8000870:	801a      	strh	r2, [r3, #0]

					if(mode == FIRmode){
 8000872:	4b5a      	ldr	r3, [pc, #360]	; (80009dc <EXTI3_IRQHandler+0x234>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	b2db      	uxtb	r3, r3
 8000878:	2b01      	cmp	r3, #1
 800087a:	d104      	bne.n	8000886 <EXTI3_IRQHandler+0xde>
						actFirValDec = actFirVal;
 800087c:	4b5a      	ldr	r3, [pc, #360]	; (80009e8 <EXTI3_IRQHandler+0x240>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a5d      	ldr	r2, [pc, #372]	; (80009f8 <EXTI3_IRQHandler+0x250>)
 8000882:	6013      	str	r3, [r2, #0]
 8000884:	e002      	b.n	800088c <EXTI3_IRQHandler+0xe4>
					}else{
						actFirValDec = 0;
 8000886:	4b5c      	ldr	r3, [pc, #368]	; (80009f8 <EXTI3_IRQHandler+0x250>)
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
					}

					diff_3 = diff_2 - diff_2_d;
 800088c:	4b5b      	ldr	r3, [pc, #364]	; (80009fc <EXTI3_IRQHandler+0x254>)
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	4b5b      	ldr	r3, [pc, #364]	; (8000a00 <EXTI3_IRQHandler+0x258>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	1ad3      	subs	r3, r2, r3
 8000896:	4a5b      	ldr	r2, [pc, #364]	; (8000a04 <EXTI3_IRQHandler+0x25c>)
 8000898:	6013      	str	r3, [r2, #0]
					diff_2_d = diff_2;
 800089a:	4b58      	ldr	r3, [pc, #352]	; (80009fc <EXTI3_IRQHandler+0x254>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a58      	ldr	r2, [pc, #352]	; (8000a00 <EXTI3_IRQHandler+0x258>)
 80008a0:	6013      	str	r3, [r2, #0]
					diff_2 = diff_1 - diff_1_d;
 80008a2:	4b59      	ldr	r3, [pc, #356]	; (8000a08 <EXTI3_IRQHandler+0x260>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	4b59      	ldr	r3, [pc, #356]	; (8000a0c <EXTI3_IRQHandler+0x264>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	1ad3      	subs	r3, r2, r3
 80008ac:	4a53      	ldr	r2, [pc, #332]	; (80009fc <EXTI3_IRQHandler+0x254>)
 80008ae:	6013      	str	r3, [r2, #0]
					diff_1_d = diff_1;
 80008b0:	4b55      	ldr	r3, [pc, #340]	; (8000a08 <EXTI3_IRQHandler+0x260>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a55      	ldr	r2, [pc, #340]	; (8000a0c <EXTI3_IRQHandler+0x264>)
 80008b6:	6013      	str	r3, [r2, #0]
					diff_1 = Integrator_3 - Integrator_3_d2;
 80008b8:	4b55      	ldr	r3, [pc, #340]	; (8000a10 <EXTI3_IRQHandler+0x268>)
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	4b55      	ldr	r3, [pc, #340]	; (8000a14 <EXTI3_IRQHandler+0x26c>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	4a51      	ldr	r2, [pc, #324]	; (8000a08 <EXTI3_IRQHandler+0x260>)
 80008c4:	6013      	str	r3, [r2, #0]
					Integrator_3_d2 = Integrator_3;
 80008c6:	4b52      	ldr	r3, [pc, #328]	; (8000a10 <EXTI3_IRQHandler+0x268>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a52      	ldr	r2, [pc, #328]	; (8000a14 <EXTI3_IRQHandler+0x26c>)
 80008cc:	6013      	str	r3, [r2, #0]

					if(mode==SINCmode){
 80008ce:	4b43      	ldr	r3, [pc, #268]	; (80009dc <EXTI3_IRQHandler+0x234>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	2b05      	cmp	r3, #5
 80008d6:	d104      	bne.n	80008e2 <EXTI3_IRQHandler+0x13a>
						outValue = diff_3;
 80008d8:	4b4a      	ldr	r3, [pc, #296]	; (8000a04 <EXTI3_IRQHandler+0x25c>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a4e      	ldr	r2, [pc, #312]	; (8000a18 <EXTI3_IRQHandler+0x270>)
 80008de:	6013      	str	r3, [r2, #0]
 80008e0:	e003      	b.n	80008ea <EXTI3_IRQHandler+0x142>
					}else{
						outValue = accValue;
 80008e2:	4b40      	ldr	r3, [pc, #256]	; (80009e4 <EXTI3_IRQHandler+0x23c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a4c      	ldr	r2, [pc, #304]	; (8000a18 <EXTI3_IRQHandler+0x270>)
 80008e8:	6013      	str	r3, [r2, #0]
					}

					accValue = 0;
 80008ea:	4b3e      	ldr	r3, [pc, #248]	; (80009e4 <EXTI3_IRQHandler+0x23c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
					sendFlag = 1;
 80008f0:	4b4a      	ldr	r3, [pc, #296]	; (8000a1c <EXTI3_IRQHandler+0x274>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	701a      	strb	r2, [r3, #0]
					if(adcRunning==0){
 80008f6:	4b4a      	ldr	r3, [pc, #296]	; (8000a20 <EXTI3_IRQHandler+0x278>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d105      	bne.n	800090c <EXTI3_IRQHandler+0x164>
						HAL_ADC_Start_IT(&hadc1);
 8000900:	4848      	ldr	r0, [pc, #288]	; (8000a24 <EXTI3_IRQHandler+0x27c>)
 8000902:	f001 feaf 	bl	8002664 <HAL_ADC_Start_IT>
						adcRunning = 1;
 8000906:	4b46      	ldr	r3, [pc, #280]	; (8000a20 <EXTI3_IRQHandler+0x278>)
 8000908:	2201      	movs	r2, #1
 800090a:	701a      	strb	r2, [r3, #0]
					}
				}
				Integrator_3 += Integrator_2;
 800090c:	4b46      	ldr	r3, [pc, #280]	; (8000a28 <EXTI3_IRQHandler+0x280>)
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	4b3f      	ldr	r3, [pc, #252]	; (8000a10 <EXTI3_IRQHandler+0x268>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4413      	add	r3, r2
 8000916:	4a3e      	ldr	r2, [pc, #248]	; (8000a10 <EXTI3_IRQHandler+0x268>)
 8000918:	6013      	str	r3, [r2, #0]
				Integrator_2 += Integrator_1;
 800091a:	4b44      	ldr	r3, [pc, #272]	; (8000a2c <EXTI3_IRQHandler+0x284>)
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	4b42      	ldr	r3, [pc, #264]	; (8000a28 <EXTI3_IRQHandler+0x280>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4413      	add	r3, r2
 8000924:	4a40      	ldr	r2, [pc, #256]	; (8000a28 <EXTI3_IRQHandler+0x280>)
 8000926:	6013      	str	r3, [r2, #0]
				Integrator_1 += Data_in;
 8000928:	4b40      	ldr	r3, [pc, #256]	; (8000a2c <EXTI3_IRQHandler+0x284>)
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4413      	add	r3, r2
 8000930:	4a3e      	ldr	r2, [pc, #248]	; (8000a2c <EXTI3_IRQHandler+0x284>)
 8000932:	6013      	str	r3, [r2, #0]
					uartDmaFlag = 1;
				}
			}
		}
	}
}
 8000934:	e0b6      	b.n	8000aa4 <EXTI3_IRQHandler+0x2fc>
			actFirValDec = 0;
 8000936:	4b30      	ldr	r3, [pc, #192]	; (80009f8 <EXTI3_IRQHandler+0x250>)
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
			outValue = 0;
 800093c:	4b36      	ldr	r3, [pc, #216]	; (8000a18 <EXTI3_IRQHandler+0x270>)
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
			sendFlag = 1;
 8000942:	4b36      	ldr	r3, [pc, #216]	; (8000a1c <EXTI3_IRQHandler+0x274>)
 8000944:	2201      	movs	r2, #1
 8000946:	701a      	strb	r2, [r3, #0]
    		if(adcRunning==0){
 8000948:	4b35      	ldr	r3, [pc, #212]	; (8000a20 <EXTI3_IRQHandler+0x278>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	b2db      	uxtb	r3, r3
 800094e:	2b00      	cmp	r3, #0
 8000950:	f040 80a8 	bne.w	8000aa4 <EXTI3_IRQHandler+0x2fc>
    	 	  HAL_ADC_Start_IT(&hadc1);
 8000954:	4833      	ldr	r0, [pc, #204]	; (8000a24 <EXTI3_IRQHandler+0x27c>)
 8000956:	f001 fe85 	bl	8002664 <HAL_ADC_Start_IT>
    	 	  adcRunning = 1;
 800095a:	4b31      	ldr	r3, [pc, #196]	; (8000a20 <EXTI3_IRQHandler+0x278>)
 800095c:	2201      	movs	r2, #1
 800095e:	701a      	strb	r2, [r3, #0]
}
 8000960:	e0a0      	b.n	8000aa4 <EXTI3_IRQHandler+0x2fc>
			if (HAL_GPIO_ReadPin(SD_DOUT_GPIO_Port, SD_DOUT_Pin) == GPIO_PIN_RESET) {
 8000962:	2140      	movs	r1, #64	; 0x40
 8000964:	481e      	ldr	r0, [pc, #120]	; (80009e0 <EXTI3_IRQHandler+0x238>)
 8000966:	f003 fefb 	bl	8004760 <HAL_GPIO_ReadPin>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d167      	bne.n	8000a40 <EXTI3_IRQHandler+0x298>
				if (uartDmaFlag == 0) {
 8000970:	4b2f      	ldr	r3, [pc, #188]	; (8000a30 <EXTI3_IRQHandler+0x288>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	b2db      	uxtb	r3, r3
 8000976:	2b00      	cmp	r3, #0
 8000978:	f040 8094 	bne.w	8000aa4 <EXTI3_IRQHandler+0x2fc>
					dmaSize = 0;
 800097c:	4b2d      	ldr	r3, [pc, #180]	; (8000a34 <EXTI3_IRQHandler+0x28c>)
 800097e:	2200      	movs	r2, #0
 8000980:	701a      	strb	r2, [r3, #0]
					*(dmaBuff + dmaSize) = '0';
 8000982:	4b2c      	ldr	r3, [pc, #176]	; (8000a34 <EXTI3_IRQHandler+0x28c>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	b2db      	uxtb	r3, r3
 8000988:	461a      	mov	r2, r3
 800098a:	4b2b      	ldr	r3, [pc, #172]	; (8000a38 <EXTI3_IRQHandler+0x290>)
 800098c:	4413      	add	r3, r2
 800098e:	2230      	movs	r2, #48	; 0x30
 8000990:	701a      	strb	r2, [r3, #0]
					dmaSize++;
 8000992:	4b28      	ldr	r3, [pc, #160]	; (8000a34 <EXTI3_IRQHandler+0x28c>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	b2db      	uxtb	r3, r3
 8000998:	3301      	adds	r3, #1
 800099a:	b2da      	uxtb	r2, r3
 800099c:	4b25      	ldr	r3, [pc, #148]	; (8000a34 <EXTI3_IRQHandler+0x28c>)
 800099e:	701a      	strb	r2, [r3, #0]
					*(dmaBuff + dmaSize) = '\n';
 80009a0:	4b24      	ldr	r3, [pc, #144]	; (8000a34 <EXTI3_IRQHandler+0x28c>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	461a      	mov	r2, r3
 80009a8:	4b23      	ldr	r3, [pc, #140]	; (8000a38 <EXTI3_IRQHandler+0x290>)
 80009aa:	4413      	add	r3, r2
 80009ac:	220a      	movs	r2, #10
 80009ae:	701a      	strb	r2, [r3, #0]
					dmaSize++;
 80009b0:	4b20      	ldr	r3, [pc, #128]	; (8000a34 <EXTI3_IRQHandler+0x28c>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	3301      	adds	r3, #1
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	4b1e      	ldr	r3, [pc, #120]	; (8000a34 <EXTI3_IRQHandler+0x28c>)
 80009bc:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&huart1, (uint8_t*)dmaBuff, dmaSize);
 80009be:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <EXTI3_IRQHandler+0x28c>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	461a      	mov	r2, r3
 80009c8:	491b      	ldr	r1, [pc, #108]	; (8000a38 <EXTI3_IRQHandler+0x290>)
 80009ca:	481c      	ldr	r0, [pc, #112]	; (8000a3c <EXTI3_IRQHandler+0x294>)
 80009cc:	f005 fd34 	bl	8006438 <HAL_UART_Transmit_DMA>
					uartDmaFlag = 1;
 80009d0:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <EXTI3_IRQHandler+0x288>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	701a      	strb	r2, [r3, #0]
}
 80009d6:	e065      	b.n	8000aa4 <EXTI3_IRQHandler+0x2fc>
 80009d8:	40010400 	.word	0x40010400
 80009dc:	200012d0 	.word	0x200012d0
 80009e0:	48000400 	.word	0x48000400
 80009e4:	200012cc 	.word	0x200012cc
 80009e8:	200012c0 	.word	0x200012c0
 80009ec:	ffffd8f0 	.word	0xffffd8f0
 80009f0:	200012b0 	.word	0x200012b0
 80009f4:	200007d8 	.word	0x200007d8
 80009f8:	200012b8 	.word	0x200012b8
 80009fc:	200012e8 	.word	0x200012e8
 8000a00:	200012f4 	.word	0x200012f4
 8000a04:	200012ec 	.word	0x200012ec
 8000a08:	200012e4 	.word	0x200012e4
 8000a0c:	200012f0 	.word	0x200012f0
 8000a10:	200012dc 	.word	0x200012dc
 8000a14:	200012e0 	.word	0x200012e0
 8000a18:	200012c8 	.word	0x200012c8
 8000a1c:	200012b2 	.word	0x200012b2
 8000a20:	200012bd 	.word	0x200012bd
 8000a24:	20001058 	.word	0x20001058
 8000a28:	200012d8 	.word	0x200012d8
 8000a2c:	200012d4 	.word	0x200012d4
 8000a30:	200012b3 	.word	0x200012b3
 8000a34:	200012b4 	.word	0x200012b4
 8000a38:	200007dc 	.word	0x200007dc
 8000a3c:	200011bc 	.word	0x200011bc
				if (uartDmaFlag == 0) {
 8000a40:	4b1a      	ldr	r3, [pc, #104]	; (8000aac <EXTI3_IRQHandler+0x304>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d12c      	bne.n	8000aa4 <EXTI3_IRQHandler+0x2fc>
					dmaSize = 0;
 8000a4a:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <EXTI3_IRQHandler+0x308>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	701a      	strb	r2, [r3, #0]
					*(dmaBuff + dmaSize) = '1';
 8000a50:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <EXTI3_IRQHandler+0x308>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	461a      	mov	r2, r3
 8000a58:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <EXTI3_IRQHandler+0x30c>)
 8000a5a:	4413      	add	r3, r2
 8000a5c:	2231      	movs	r2, #49	; 0x31
 8000a5e:	701a      	strb	r2, [r3, #0]
					dmaSize++;
 8000a60:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <EXTI3_IRQHandler+0x308>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	3301      	adds	r3, #1
 8000a68:	b2da      	uxtb	r2, r3
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <EXTI3_IRQHandler+0x308>)
 8000a6c:	701a      	strb	r2, [r3, #0]
					*(dmaBuff + dmaSize) = '\n';
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <EXTI3_IRQHandler+0x308>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	461a      	mov	r2, r3
 8000a76:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <EXTI3_IRQHandler+0x30c>)
 8000a78:	4413      	add	r3, r2
 8000a7a:	220a      	movs	r2, #10
 8000a7c:	701a      	strb	r2, [r3, #0]
					dmaSize++;
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <EXTI3_IRQHandler+0x308>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	3301      	adds	r3, #1
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <EXTI3_IRQHandler+0x308>)
 8000a8a:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&huart1, (uint8_t*)dmaBuff, dmaSize);
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <EXTI3_IRQHandler+0x308>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	461a      	mov	r2, r3
 8000a96:	4907      	ldr	r1, [pc, #28]	; (8000ab4 <EXTI3_IRQHandler+0x30c>)
 8000a98:	4807      	ldr	r0, [pc, #28]	; (8000ab8 <EXTI3_IRQHandler+0x310>)
 8000a9a:	f005 fccd 	bl	8006438 <HAL_UART_Transmit_DMA>
					uartDmaFlag = 1;
 8000a9e:	4b03      	ldr	r3, [pc, #12]	; (8000aac <EXTI3_IRQHandler+0x304>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	701a      	strb	r2, [r3, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	200012b3 	.word	0x200012b3
 8000ab0:	200012b4 	.word	0x200012b4
 8000ab4:	200007dc 	.word	0x200007dc
 8000ab8:	200011bc 	.word	0x200011bc

08000abc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
	uartDmaFlag  = 0;
 8000ac4:	4b05      	ldr	r3, [pc, #20]	; (8000adc <HAL_UART_TxCpltCallback+0x20>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
	uartTxCt=200;
 8000aca:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <HAL_UART_TxCpltCallback+0x24>)
 8000acc:	22c8      	movs	r2, #200	; 0xc8
 8000ace:	601a      	str	r2, [r3, #0]
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	200012b3 	.word	0x200012b3
 8000ae0:	200012fc 	.word	0x200012fc

08000ae4 <printNumToBuff>:

uint8_t printNumToBuff(uint8_t offset, uint8_t *buff, int32_t val, uint8_t dig, uint8_t signs) {
 8000ae4:	b480      	push	{r7}
 8000ae6:	b091      	sub	sp, #68	; 0x44
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60b9      	str	r1, [r7, #8]
 8000aec:	607a      	str	r2, [r7, #4]
 8000aee:	461a      	mov	r2, r3
 8000af0:	4603      	mov	r3, r0
 8000af2:	73fb      	strb	r3, [r7, #15]
 8000af4:	4613      	mov	r3, r2
 8000af6:	73bb      	strb	r3, [r7, #14]
	uint8_t pos = offset;
 8000af8:	7bfb      	ldrb	r3, [r7, #15]
 8000afa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t i = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	uint8_t digits[40];

	if (val < 0) {
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	da0e      	bge.n	8000b28 <printNumToBuff+0x44>
		val *= -1;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	425b      	negs	r3, r3
 8000b0e:	607b      	str	r3, [r7, #4]
		*(buff+pos) = '-';
 8000b10:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000b14:	68ba      	ldr	r2, [r7, #8]
 8000b16:	4413      	add	r3, r2
 8000b18:	222d      	movs	r2, #45	; 0x2d
 8000b1a:	701a      	strb	r2, [r3, #0]
		pos++;
 8000b1c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000b20:	3301      	adds	r3, #1
 8000b22:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000b26:	e02f      	b.n	8000b88 <printNumToBuff+0xa4>
	} else {
		if(signs){
 8000b28:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d02b      	beq.n	8000b88 <printNumToBuff+0xa4>
			*(buff+pos) = '+';
 8000b30:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000b34:	68ba      	ldr	r2, [r7, #8]
 8000b36:	4413      	add	r3, r2
 8000b38:	222b      	movs	r2, #43	; 0x2b
 8000b3a:	701a      	strb	r2, [r3, #0]
			pos++;
 8000b3c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000b40:	3301      	adds	r3, #1
 8000b42:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		}
	}

		while (val > 0) {
 8000b46:	e01f      	b.n	8000b88 <printNumToBuff+0xa4>
			digits[i] = val % 10;
 8000b48:	687a      	ldr	r2, [r7, #4]
 8000b4a:	4b36      	ldr	r3, [pc, #216]	; (8000c24 <printNumToBuff+0x140>)
 8000b4c:	fb83 1302 	smull	r1, r3, r3, r2
 8000b50:	1099      	asrs	r1, r3, #2
 8000b52:	17d3      	asrs	r3, r2, #31
 8000b54:	1ac9      	subs	r1, r1, r3
 8000b56:	460b      	mov	r3, r1
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	440b      	add	r3, r1
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	1ad1      	subs	r1, r2, r3
 8000b60:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000b64:	b2ca      	uxtb	r2, r1
 8000b66:	3340      	adds	r3, #64	; 0x40
 8000b68:	443b      	add	r3, r7
 8000b6a:	f803 2c2c 	strb.w	r2, [r3, #-44]
			val /= 10;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4a2c      	ldr	r2, [pc, #176]	; (8000c24 <printNumToBuff+0x140>)
 8000b72:	fb82 1203 	smull	r1, r2, r2, r3
 8000b76:	1092      	asrs	r2, r2, #2
 8000b78:	17db      	asrs	r3, r3, #31
 8000b7a:	1ad3      	subs	r3, r2, r3
 8000b7c:	607b      	str	r3, [r7, #4]
			i++;
 8000b7e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000b82:	3301      	adds	r3, #1
 8000b84:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		while (val > 0) {
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	dcdc      	bgt.n	8000b48 <printNumToBuff+0x64>
		}
		for (uint8_t x = dig; x > 0; x--) {
 8000b8e:	7bbb      	ldrb	r3, [r7, #14]
 8000b90:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8000b94:	e015      	b.n	8000bc2 <printNumToBuff+0xde>
			if (i < x) {
 8000b96:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8000b9a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d20a      	bcs.n	8000bb8 <printNumToBuff+0xd4>
				*(buff+pos) = '0';
 8000ba2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000ba6:	68ba      	ldr	r2, [r7, #8]
 8000ba8:	4413      	add	r3, r2
 8000baa:	2230      	movs	r2, #48	; 0x30
 8000bac:	701a      	strb	r2, [r3, #0]
				pos++;
 8000bae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		for (uint8_t x = dig; x > 0; x--) {
 8000bb8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000bbc:	3b01      	subs	r3, #1
 8000bbe:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8000bc2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d1e5      	bne.n	8000b96 <printNumToBuff+0xb2>
			}
		}
		for (uint8_t x = 0; x < i; x++) {
 8000bca:	2300      	movs	r3, #0
 8000bcc:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8000bd0:	e01a      	b.n	8000c08 <printNumToBuff+0x124>
			*(buff+pos)  = digits[i - x - 1] + 0x30;
 8000bd2:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8000bd6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000bda:	1ad3      	subs	r3, r2, r3
 8000bdc:	3b01      	subs	r3, #1
 8000bde:	3340      	adds	r3, #64	; 0x40
 8000be0:	443b      	add	r3, r7
 8000be2:	f813 2c2c 	ldrb.w	r2, [r3, #-44]
 8000be6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000bea:	68b9      	ldr	r1, [r7, #8]
 8000bec:	440b      	add	r3, r1
 8000bee:	3230      	adds	r2, #48	; 0x30
 8000bf0:	b2d2      	uxtb	r2, r2
 8000bf2:	701a      	strb	r2, [r3, #0]
			pos++;
 8000bf4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		for (uint8_t x = 0; x < i; x++) {
 8000bfe:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000c02:	3301      	adds	r3, #1
 8000c04:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8000c08:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8000c0c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d3de      	bcc.n	8000bd2 <printNumToBuff+0xee>
		}
		return pos;
 8000c14:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3744      	adds	r7, #68	; 0x44
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	66666667 	.word	0x66666667

08000c28 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	  adcRunning = 0;
 8000c30:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	701a      	strb	r2, [r3, #0]
	  actAdcVal = HAL_ADC_GetValue(hadc);
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f001 fe46 	bl	80028c8 <HAL_ADC_GetValue>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	461a      	mov	r2, r3
 8000c40:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <HAL_ADC_ConvCpltCallback+0x30>)
 8000c42:	601a      	str	r2, [r3, #0]
	  actAdcFlag = 1;
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <HAL_ADC_ConvCpltCallback+0x34>)
 8000c46:	2201      	movs	r2, #1
 8000c48:	701a      	strb	r2, [r3, #0]
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200012bd 	.word	0x200012bd
 8000c58:	200012c4 	.word	0x200012c4
 8000c5c:	200012bc 	.word	0x200012bc

08000c60 <myDelayUs>:




void myDelayUs(uint32_t time){
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
htim2.Instance->CNT = 0;
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <myDelayUs+0x2c>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	625a      	str	r2, [r3, #36]	; 0x24
while((htim2.Instance->CNT)<time);
 8000c70:	bf00      	nop
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <myDelayUs+0x2c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	d8f9      	bhi.n	8000c72 <myDelayUs+0x12>
}
 8000c7e:	bf00      	nop
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	200010d8 	.word	0x200010d8

08000c90 <writeGPIO>:


void writeGPIO(uint8_t pinNum, uint8_t state){
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	460a      	mov	r2, r1
 8000c9a:	71fb      	strb	r3, [r7, #7]
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	71bb      	strb	r3, [r7, #6]
switch(pinNum){
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	2b09      	cmp	r3, #9
 8000ca4:	f200 80c2 	bhi.w	8000e2c <writeGPIO+0x19c>
 8000ca8:	a201      	add	r2, pc, #4	; (adr r2, 8000cb0 <writeGPIO+0x20>)
 8000caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cae:	bf00      	nop
 8000cb0:	08000cd9 	.word	0x08000cd9
 8000cb4:	08000cf7 	.word	0x08000cf7
 8000cb8:	08000d19 	.word	0x08000d19
 8000cbc:	08000d3b 	.word	0x08000d3b
 8000cc0:	08000d5d 	.word	0x08000d5d
 8000cc4:	08000d7b 	.word	0x08000d7b
 8000cc8:	08000d9d 	.word	0x08000d9d
 8000ccc:	08000dbf 	.word	0x08000dbf
 8000cd0:	08000de1 	.word	0x08000de1
 8000cd4:	08000e07 	.word	0x08000e07
case 0: if(state){HAL_GPIO_WritePin(GPIO0_GPIO_Port, GPIO0_Pin, GPIO_PIN_SET);}else{HAL_GPIO_WritePin(GPIO0_GPIO_Port, GPIO0_Pin, GPIO_PIN_RESET);} break;
 8000cd8:	79bb      	ldrb	r3, [r7, #6]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d005      	beq.n	8000cea <writeGPIO+0x5a>
 8000cde:	2201      	movs	r2, #1
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	4855      	ldr	r0, [pc, #340]	; (8000e38 <writeGPIO+0x1a8>)
 8000ce4:	f003 fd54 	bl	8004790 <HAL_GPIO_WritePin>
 8000ce8:	e0a1      	b.n	8000e2e <writeGPIO+0x19e>
 8000cea:	2200      	movs	r2, #0
 8000cec:	2101      	movs	r1, #1
 8000cee:	4852      	ldr	r0, [pc, #328]	; (8000e38 <writeGPIO+0x1a8>)
 8000cf0:	f003 fd4e 	bl	8004790 <HAL_GPIO_WritePin>
 8000cf4:	e09b      	b.n	8000e2e <writeGPIO+0x19e>
case 1: if(state){HAL_GPIO_WritePin(GPIO1_GPIO_Port, GPIO1_Pin, GPIO_PIN_SET);}else{HAL_GPIO_WritePin(GPIO1_GPIO_Port, GPIO1_Pin, GPIO_PIN_RESET);}break;
 8000cf6:	79bb      	ldrb	r3, [r7, #6]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d006      	beq.n	8000d0a <writeGPIO+0x7a>
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	2102      	movs	r1, #2
 8000d00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d04:	f003 fd44 	bl	8004790 <HAL_GPIO_WritePin>
 8000d08:	e091      	b.n	8000e2e <writeGPIO+0x19e>
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2102      	movs	r1, #2
 8000d0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d12:	f003 fd3d 	bl	8004790 <HAL_GPIO_WritePin>
 8000d16:	e08a      	b.n	8000e2e <writeGPIO+0x19e>
case 2: if(state){HAL_GPIO_WritePin(GPIO2_GPIO_Port, GPIO2_Pin, GPIO_PIN_SET);}else{HAL_GPIO_WritePin(GPIO2_GPIO_Port, GPIO2_Pin, GPIO_PIN_RESET);}break;
 8000d18:	79bb      	ldrb	r3, [r7, #6]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d006      	beq.n	8000d2c <writeGPIO+0x9c>
 8000d1e:	2201      	movs	r2, #1
 8000d20:	2104      	movs	r1, #4
 8000d22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d26:	f003 fd33 	bl	8004790 <HAL_GPIO_WritePin>
 8000d2a:	e080      	b.n	8000e2e <writeGPIO+0x19e>
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2104      	movs	r1, #4
 8000d30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d34:	f003 fd2c 	bl	8004790 <HAL_GPIO_WritePin>
 8000d38:	e079      	b.n	8000e2e <writeGPIO+0x19e>
case 3: if(state){HAL_GPIO_WritePin(GPIO3_GPIO_Port, GPIO3_Pin, GPIO_PIN_SET);}else{HAL_GPIO_WritePin(GPIO3_GPIO_Port, GPIO3_Pin, GPIO_PIN_RESET);}break;
 8000d3a:	79bb      	ldrb	r3, [r7, #6]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d006      	beq.n	8000d4e <writeGPIO+0xbe>
 8000d40:	2201      	movs	r2, #1
 8000d42:	2108      	movs	r1, #8
 8000d44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d48:	f003 fd22 	bl	8004790 <HAL_GPIO_WritePin>
 8000d4c:	e06f      	b.n	8000e2e <writeGPIO+0x19e>
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2108      	movs	r1, #8
 8000d52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d56:	f003 fd1b 	bl	8004790 <HAL_GPIO_WritePin>
 8000d5a:	e068      	b.n	8000e2e <writeGPIO+0x19e>
case 4: if(state){HAL_GPIO_WritePin(GPIO4_GPIO_Port, GPIO4_Pin, GPIO_PIN_SET);}else{HAL_GPIO_WritePin(GPIO4_GPIO_Port, GPIO4_Pin, GPIO_PIN_RESET);}break;
 8000d5c:	79bb      	ldrb	r3, [r7, #6]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d005      	beq.n	8000d6e <writeGPIO+0xde>
 8000d62:	2201      	movs	r2, #1
 8000d64:	2110      	movs	r1, #16
 8000d66:	4834      	ldr	r0, [pc, #208]	; (8000e38 <writeGPIO+0x1a8>)
 8000d68:	f003 fd12 	bl	8004790 <HAL_GPIO_WritePin>
 8000d6c:	e05f      	b.n	8000e2e <writeGPIO+0x19e>
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2110      	movs	r1, #16
 8000d72:	4831      	ldr	r0, [pc, #196]	; (8000e38 <writeGPIO+0x1a8>)
 8000d74:	f003 fd0c 	bl	8004790 <HAL_GPIO_WritePin>
 8000d78:	e059      	b.n	8000e2e <writeGPIO+0x19e>
case 5: if(state){HAL_GPIO_WritePin(GPIO5_GPIO_Port, GPIO5_Pin, GPIO_PIN_SET);}else{HAL_GPIO_WritePin(GPIO5_GPIO_Port, GPIO5_Pin, GPIO_PIN_RESET);}break;
 8000d7a:	79bb      	ldrb	r3, [r7, #6]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d006      	beq.n	8000d8e <writeGPIO+0xfe>
 8000d80:	2201      	movs	r2, #1
 8000d82:	2120      	movs	r1, #32
 8000d84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d88:	f003 fd02 	bl	8004790 <HAL_GPIO_WritePin>
 8000d8c:	e04f      	b.n	8000e2e <writeGPIO+0x19e>
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2120      	movs	r1, #32
 8000d92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d96:	f003 fcfb 	bl	8004790 <HAL_GPIO_WritePin>
 8000d9a:	e048      	b.n	8000e2e <writeGPIO+0x19e>
case 6: if(state){HAL_GPIO_WritePin(GPIO6_GPIO_Port, GPIO6_Pin, GPIO_PIN_SET);}else{HAL_GPIO_WritePin(GPIO6_GPIO_Port, GPIO6_Pin, GPIO_PIN_RESET);}break;
 8000d9c:	79bb      	ldrb	r3, [r7, #6]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d006      	beq.n	8000db0 <writeGPIO+0x120>
 8000da2:	2201      	movs	r2, #1
 8000da4:	2140      	movs	r1, #64	; 0x40
 8000da6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000daa:	f003 fcf1 	bl	8004790 <HAL_GPIO_WritePin>
 8000dae:	e03e      	b.n	8000e2e <writeGPIO+0x19e>
 8000db0:	2200      	movs	r2, #0
 8000db2:	2140      	movs	r1, #64	; 0x40
 8000db4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db8:	f003 fcea 	bl	8004790 <HAL_GPIO_WritePin>
 8000dbc:	e037      	b.n	8000e2e <writeGPIO+0x19e>
case 7: if(state){HAL_GPIO_WritePin(GPIO7_GPIO_Port, GPIO7_Pin, GPIO_PIN_SET);}else{HAL_GPIO_WritePin(GPIO7_GPIO_Port, GPIO7_Pin, GPIO_PIN_RESET);}break;
 8000dbe:	79bb      	ldrb	r3, [r7, #6]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d006      	beq.n	8000dd2 <writeGPIO+0x142>
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	2180      	movs	r1, #128	; 0x80
 8000dc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dcc:	f003 fce0 	bl	8004790 <HAL_GPIO_WritePin>
 8000dd0:	e02d      	b.n	8000e2e <writeGPIO+0x19e>
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2180      	movs	r1, #128	; 0x80
 8000dd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dda:	f003 fcd9 	bl	8004790 <HAL_GPIO_WritePin>
 8000dde:	e026      	b.n	8000e2e <writeGPIO+0x19e>
case 8: if(state){HAL_GPIO_WritePin(GPIO8_GPIO_Port, GPIO8_Pin, GPIO_PIN_SET);}else{HAL_GPIO_WritePin(GPIO8_GPIO_Port, GPIO8_Pin, GPIO_PIN_RESET);}break;
 8000de0:	79bb      	ldrb	r3, [r7, #6]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d007      	beq.n	8000df6 <writeGPIO+0x166>
 8000de6:	2201      	movs	r2, #1
 8000de8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df0:	f003 fcce 	bl	8004790 <HAL_GPIO_WritePin>
 8000df4:	e01b      	b.n	8000e2e <writeGPIO+0x19e>
 8000df6:	2200      	movs	r2, #0
 8000df8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e00:	f003 fcc6 	bl	8004790 <HAL_GPIO_WritePin>
 8000e04:	e013      	b.n	8000e2e <writeGPIO+0x19e>
case 9: if(state){HAL_GPIO_WritePin(GPIO9_GPIO_Port, GPIO9_Pin, GPIO_PIN_SET);}else{HAL_GPIO_WritePin(GPIO9_GPIO_Port, GPIO9_Pin, GPIO_PIN_RESET);}break;
 8000e06:	79bb      	ldrb	r3, [r7, #6]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d007      	beq.n	8000e1c <writeGPIO+0x18c>
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e16:	f003 fcbb 	bl	8004790 <HAL_GPIO_WritePin>
 8000e1a:	e008      	b.n	8000e2e <writeGPIO+0x19e>
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e26:	f003 fcb3 	bl	8004790 <HAL_GPIO_WritePin>
 8000e2a:	e000      	b.n	8000e2e <writeGPIO+0x19e>
default: break;
 8000e2c:	bf00      	nop
}
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	48000400 	.word	0x48000400

08000e3c <writeDACcode>:

void writeDACcode(uint8_t code){
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
writeGPIO(4, LOW);
 8000e46:	2100      	movs	r1, #0
 8000e48:	2004      	movs	r0, #4
 8000e4a:	f7ff ff21 	bl	8000c90 <writeGPIO>
if(code&1){writeGPIO(3, HIGH);}else{writeGPIO(3, LOW);}
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	f003 0301 	and.w	r3, r3, #1
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d004      	beq.n	8000e62 <writeDACcode+0x26>
 8000e58:	2101      	movs	r1, #1
 8000e5a:	2003      	movs	r0, #3
 8000e5c:	f7ff ff18 	bl	8000c90 <writeGPIO>
 8000e60:	e003      	b.n	8000e6a <writeDACcode+0x2e>
 8000e62:	2100      	movs	r1, #0
 8000e64:	2003      	movs	r0, #3
 8000e66:	f7ff ff13 	bl	8000c90 <writeGPIO>
if(code&2){writeGPIO(2, HIGH);}else{writeGPIO(2, LOW);}
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	f003 0302 	and.w	r3, r3, #2
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d004      	beq.n	8000e7e <writeDACcode+0x42>
 8000e74:	2101      	movs	r1, #1
 8000e76:	2002      	movs	r0, #2
 8000e78:	f7ff ff0a 	bl	8000c90 <writeGPIO>
 8000e7c:	e003      	b.n	8000e86 <writeDACcode+0x4a>
 8000e7e:	2100      	movs	r1, #0
 8000e80:	2002      	movs	r0, #2
 8000e82:	f7ff ff05 	bl	8000c90 <writeGPIO>
if(code&4){writeGPIO(1, HIGH);}else{writeGPIO(1, LOW);}
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	f003 0304 	and.w	r3, r3, #4
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d004      	beq.n	8000e9a <writeDACcode+0x5e>
 8000e90:	2101      	movs	r1, #1
 8000e92:	2001      	movs	r0, #1
 8000e94:	f7ff fefc 	bl	8000c90 <writeGPIO>
 8000e98:	e003      	b.n	8000ea2 <writeDACcode+0x66>
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	2001      	movs	r0, #1
 8000e9e:	f7ff fef7 	bl	8000c90 <writeGPIO>
if(code&8){writeGPIO(0, HIGH);}else{writeGPIO(0, LOW);}
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	f003 0308 	and.w	r3, r3, #8
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d004      	beq.n	8000eb6 <writeDACcode+0x7a>
 8000eac:	2101      	movs	r1, #1
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f7ff feee 	bl	8000c90 <writeGPIO>
 8000eb4:	e003      	b.n	8000ebe <writeDACcode+0x82>
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	2000      	movs	r0, #0
 8000eba:	f7ff fee9 	bl	8000c90 <writeGPIO>
myDelayUs(1);
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	f7ff fece 	bl	8000c60 <myDelayUs>
writeGPIO(4, HIGH);
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	2004      	movs	r0, #4
 8000ec8:	f7ff fee2 	bl	8000c90 <writeGPIO>
myDelayUs(1);
 8000ecc:	2001      	movs	r0, #1
 8000ece:	f7ff fec7 	bl	8000c60 <myDelayUs>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <adcTracking>:

void adcTracking(void){
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(SD_CNT_GPIO_Port, SD_CNT_Pin)==GPIO_PIN_SET){
 8000ee0:	2120      	movs	r1, #32
 8000ee2:	4820      	ldr	r0, [pc, #128]	; (8000f64 <adcTracking+0x88>)
 8000ee4:	f003 fc3c 	bl	8004760 <HAL_GPIO_ReadPin>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d105      	bne.n	8000efa <adcTracking+0x1e>
		adcTrackingCount--;
 8000eee:	4b1e      	ldr	r3, [pc, #120]	; (8000f68 <adcTracking+0x8c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	4a1c      	ldr	r2, [pc, #112]	; (8000f68 <adcTracking+0x8c>)
 8000ef6:	6013      	str	r3, [r2, #0]
 8000ef8:	e004      	b.n	8000f04 <adcTracking+0x28>
	}else{
		adcTrackingCount++;
 8000efa:	4b1b      	ldr	r3, [pc, #108]	; (8000f68 <adcTracking+0x8c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	3301      	adds	r3, #1
 8000f00:	4a19      	ldr	r2, [pc, #100]	; (8000f68 <adcTracking+0x8c>)
 8000f02:	6013      	str	r3, [r2, #0]
	}
	if(adcTrackingCount<0){
 8000f04:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <adcTracking+0x8c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	da02      	bge.n	8000f12 <adcTracking+0x36>
		adcTrackingCount = 0;
 8000f0c:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <adcTracking+0x8c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
	}
	if(adcTrackingCount>15){
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <adcTracking+0x8c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2b0f      	cmp	r3, #15
 8000f18:	dd02      	ble.n	8000f20 <adcTracking+0x44>
		adcTrackingCount = 15;
 8000f1a:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <adcTracking+0x8c>)
 8000f1c:	220f      	movs	r2, #15
 8000f1e:	601a      	str	r2, [r3, #0]
	}
	writeDACcode(adcTrackingCount);
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <adcTracking+0x8c>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff ff88 	bl	8000e3c <writeDACcode>
	if(uartDmaFlag == 0){
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <adcTracking+0x90>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d113      	bne.n	8000f5e <adcTracking+0x82>
		dmaSize = 1;
 8000f36:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <adcTracking+0x94>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	701a      	strb	r2, [r3, #0]
		*(dmaBuff+0) = adcTrackingCount;
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <adcTracking+0x8c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <adcTracking+0x98>)
 8000f44:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)dmaBuff, dmaSize);
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <adcTracking+0x94>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	461a      	mov	r2, r3
 8000f50:	4908      	ldr	r1, [pc, #32]	; (8000f74 <adcTracking+0x98>)
 8000f52:	4809      	ldr	r0, [pc, #36]	; (8000f78 <adcTracking+0x9c>)
 8000f54:	f005 f9dc 	bl	8006310 <HAL_UART_Transmit_IT>
		uartDmaFlag = 1;
 8000f58:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <adcTracking+0x90>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	701a      	strb	r2, [r3, #0]
	}
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	48000400 	.word	0x48000400
 8000f68:	20001300 	.word	0x20001300
 8000f6c:	200012b3 	.word	0x200012b3
 8000f70:	200012b4 	.word	0x200012b4
 8000f74:	200007dc 	.word	0x200007dc
 8000f78:	200011bc 	.word	0x200011bc

08000f7c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
if(htim==&htim3){
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a1e      	ldr	r2, [pc, #120]	; (8001000 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d129      	bne.n	8000fe0 <HAL_TIM_PeriodElapsedCallback+0x64>
	if(uartRxCt>0){
 8000f8c:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	dd0a      	ble.n	8000faa <HAL_TIM_PeriodElapsedCallback+0x2e>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8000f94:	2201      	movs	r2, #1
 8000f96:	2180      	movs	r1, #128	; 0x80
 8000f98:	481b      	ldr	r0, [pc, #108]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000f9a:	f003 fbf9 	bl	8004790 <HAL_GPIO_WritePin>
		uartRxCt--;
 8000f9e:	4b19      	ldr	r3, [pc, #100]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	4a17      	ldr	r2, [pc, #92]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	e004      	b.n	8000fb4 <HAL_TIM_PeriodElapsedCallback+0x38>
	}else{
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2180      	movs	r1, #128	; 0x80
 8000fae:	4816      	ldr	r0, [pc, #88]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000fb0:	f003 fbee 	bl	8004790 <HAL_GPIO_WritePin>
	}
	if(uartTxCt>0){
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	dd0b      	ble.n	8000fd4 <HAL_TIM_PeriodElapsedCallback+0x58>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fc2:	4811      	ldr	r0, [pc, #68]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000fc4:	f003 fbe4 	bl	8004790 <HAL_GPIO_WritePin>
		uartTxCt--;
 8000fc8:	4b10      	ldr	r3, [pc, #64]	; (800100c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	4a0f      	ldr	r2, [pc, #60]	; (800100c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000fd0:	6013      	str	r3, [r2, #0]
 8000fd2:	e005      	b.n	8000fe0 <HAL_TIM_PeriodElapsedCallback+0x64>
	}else{
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fda:	480b      	ldr	r0, [pc, #44]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000fdc:	f003 fbd8 	bl	8004790 <HAL_GPIO_WritePin>
	}
}
if(htim==&htim4){
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a0b      	ldr	r2, [pc, #44]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d106      	bne.n	8000ff6 <HAL_TIM_PeriodElapsedCallback+0x7a>
	if(mode==TRACKmode){
 8000fe8:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b06      	cmp	r3, #6
 8000ff0:	d101      	bne.n	8000ff6 <HAL_TIM_PeriodElapsedCallback+0x7a>
		adcTracking();
 8000ff2:	f7ff ff73 	bl	8000edc <adcTracking>
	}
}
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20001124 	.word	0x20001124
 8001004:	200012f8 	.word	0x200012f8
 8001008:	48000400 	.word	0x48000400
 800100c:	200012fc 	.word	0x200012fc
 8001010:	20001170 	.word	0x20001170
 8001014:	200012d0 	.word	0x200012d0

08001018 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800101e:	f000 feca 	bl	8001db6 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(1000);
 8001022:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001026:	f000 ff37 	bl	8001e98 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800102a:	f000 f9a5 	bl	8001378 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800102e:	f000 fc01 	bl	8001834 <MX_GPIO_Init>
  MX_DMA_Init();
 8001032:	f000 fbd5 	bl	80017e0 <MX_DMA_Init>
  MX_ADC1_Init();
 8001036:	f000 f9e9 	bl	800140c <MX_ADC1_Init>
  MX_DAC1_Init();
 800103a:	f000 fa5f 	bl	80014fc <MX_DAC1_Init>
  MX_USART1_UART_Init();
 800103e:	f000 fb81 	bl	8001744 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001042:	f000 fae3 	bl	800160c <MX_TIM3_Init>
  MX_TIM2_Init();
 8001046:	f000 fa93 	bl	8001570 <MX_TIM2_Init>
  MX_TIM4_Init();
 800104a:	f000 fb2d 	bl	80016a8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 800104e:	486b      	ldr	r0, [pc, #428]	; (80011fc <main+0x1e4>)
 8001050:	f004 fbd0 	bl	80057f4 <HAL_TIM_Base_Start>
  HAL_Delay(100);
 8001054:	2064      	movs	r0, #100	; 0x64
 8001056:	f000 ff1f 	bl	8001e98 <HAL_Delay>
  for(uint8_t i=0;i<5;i++){
 800105a:	2300      	movs	r3, #0
 800105c:	71fb      	strb	r3, [r7, #7]
 800105e:	e01e      	b.n	800109e <main+0x86>
	  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8001060:	2201      	movs	r2, #1
 8001062:	2180      	movs	r1, #128	; 0x80
 8001064:	4866      	ldr	r0, [pc, #408]	; (8001200 <main+0x1e8>)
 8001066:	f003 fb93 	bl	8004790 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 800106a:	2201      	movs	r2, #1
 800106c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001070:	4863      	ldr	r0, [pc, #396]	; (8001200 <main+0x1e8>)
 8001072:	f003 fb8d 	bl	8004790 <HAL_GPIO_WritePin>
	  HAL_Delay(250);
 8001076:	20fa      	movs	r0, #250	; 0xfa
 8001078:	f000 ff0e 	bl	8001e98 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	2180      	movs	r1, #128	; 0x80
 8001080:	485f      	ldr	r0, [pc, #380]	; (8001200 <main+0x1e8>)
 8001082:	f003 fb85 	bl	8004790 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8001086:	2200      	movs	r2, #0
 8001088:	f44f 7180 	mov.w	r1, #256	; 0x100
 800108c:	485c      	ldr	r0, [pc, #368]	; (8001200 <main+0x1e8>)
 800108e:	f003 fb7f 	bl	8004790 <HAL_GPIO_WritePin>
	  HAL_Delay(250);
 8001092:	20fa      	movs	r0, #250	; 0xfa
 8001094:	f000 ff00 	bl	8001e98 <HAL_Delay>
  for(uint8_t i=0;i<5;i++){
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	3301      	adds	r3, #1
 800109c:	71fb      	strb	r3, [r7, #7]
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	2b04      	cmp	r3, #4
 80010a2:	d9dd      	bls.n	8001060 <main+0x48>
  }
  UART_Start_Receive_IT(&huart1, (uint8_t*)&rxData, 1);
 80010a4:	2201      	movs	r2, #1
 80010a6:	4957      	ldr	r1, [pc, #348]	; (8001204 <main+0x1ec>)
 80010a8:	4857      	ldr	r0, [pc, #348]	; (8001208 <main+0x1f0>)
 80010aa:	f006 fa0f 	bl	80074cc <UART_Start_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80010ae:	4857      	ldr	r0, [pc, #348]	; (800120c <main+0x1f4>)
 80010b0:	f004 fc02 	bl	80058b8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80010b4:	4856      	ldr	r0, [pc, #344]	; (8001210 <main+0x1f8>)
 80010b6:	f004 fbff 	bl	80058b8 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if((mode!=RAWmode)&&(mode!=OFFmode)&&(mode!=TRACKmode)&&(sendFlag==1)&&(actAdcFlag==1)){
 80010ba:	4b56      	ldr	r3, [pc, #344]	; (8001214 <main+0x1fc>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	2b04      	cmp	r3, #4
 80010c2:	f000 80bb 	beq.w	800123c <main+0x224>
 80010c6:	4b53      	ldr	r3, [pc, #332]	; (8001214 <main+0x1fc>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	f000 80b5 	beq.w	800123c <main+0x224>
 80010d2:	4b50      	ldr	r3, [pc, #320]	; (8001214 <main+0x1fc>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	2b06      	cmp	r3, #6
 80010da:	f000 80af 	beq.w	800123c <main+0x224>
 80010de:	4b4e      	ldr	r3, [pc, #312]	; (8001218 <main+0x200>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	f040 80a9 	bne.w	800123c <main+0x224>
 80010ea:	4b4c      	ldr	r3, [pc, #304]	; (800121c <main+0x204>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	f040 80a3 	bne.w	800123c <main+0x224>
		  if(uartDmaFlag == 0){
 80010f6:	4b4a      	ldr	r3, [pc, #296]	; (8001220 <main+0x208>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d176      	bne.n	80011ee <main+0x1d6>
			  dmaSize = printNumToBuff(0, (uint8_t*)dmaBuff, actAdcVal, 1, 1);
 8001100:	4b48      	ldr	r3, [pc, #288]	; (8001224 <main+0x20c>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	2301      	movs	r3, #1
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	2301      	movs	r3, #1
 800110a:	4947      	ldr	r1, [pc, #284]	; (8001228 <main+0x210>)
 800110c:	2000      	movs	r0, #0
 800110e:	f7ff fce9 	bl	8000ae4 <printNumToBuff>
 8001112:	4603      	mov	r3, r0
 8001114:	461a      	mov	r2, r3
 8001116:	4b45      	ldr	r3, [pc, #276]	; (800122c <main+0x214>)
 8001118:	701a      	strb	r2, [r3, #0]
			  *(dmaBuff+dmaSize) = ' ';
 800111a:	4b44      	ldr	r3, [pc, #272]	; (800122c <main+0x214>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	b2db      	uxtb	r3, r3
 8001120:	461a      	mov	r2, r3
 8001122:	4b41      	ldr	r3, [pc, #260]	; (8001228 <main+0x210>)
 8001124:	4413      	add	r3, r2
 8001126:	2220      	movs	r2, #32
 8001128:	701a      	strb	r2, [r3, #0]
			  dmaSize++;
 800112a:	4b40      	ldr	r3, [pc, #256]	; (800122c <main+0x214>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	b2db      	uxtb	r3, r3
 8001130:	3301      	adds	r3, #1
 8001132:	b2da      	uxtb	r2, r3
 8001134:	4b3d      	ldr	r3, [pc, #244]	; (800122c <main+0x214>)
 8001136:	701a      	strb	r2, [r3, #0]
			  dmaSize = printNumToBuff(dmaSize, (uint8_t*)dmaBuff, outValue/decRatio, 1, 1);
 8001138:	4b3c      	ldr	r3, [pc, #240]	; (800122c <main+0x214>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	b2d8      	uxtb	r0, r3
 800113e:	4b3c      	ldr	r3, [pc, #240]	; (8001230 <main+0x218>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	4b3c      	ldr	r3, [pc, #240]	; (8001234 <main+0x21c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	fb92 f2f3 	sdiv	r2, r2, r3
 800114a:	2301      	movs	r3, #1
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	2301      	movs	r3, #1
 8001150:	4935      	ldr	r1, [pc, #212]	; (8001228 <main+0x210>)
 8001152:	f7ff fcc7 	bl	8000ae4 <printNumToBuff>
 8001156:	4603      	mov	r3, r0
 8001158:	461a      	mov	r2, r3
 800115a:	4b34      	ldr	r3, [pc, #208]	; (800122c <main+0x214>)
 800115c:	701a      	strb	r2, [r3, #0]
			  *(dmaBuff+dmaSize) = ' ';
 800115e:	4b33      	ldr	r3, [pc, #204]	; (800122c <main+0x214>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	b2db      	uxtb	r3, r3
 8001164:	461a      	mov	r2, r3
 8001166:	4b30      	ldr	r3, [pc, #192]	; (8001228 <main+0x210>)
 8001168:	4413      	add	r3, r2
 800116a:	2220      	movs	r2, #32
 800116c:	701a      	strb	r2, [r3, #0]
			  dmaSize++;
 800116e:	4b2f      	ldr	r3, [pc, #188]	; (800122c <main+0x214>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	b2db      	uxtb	r3, r3
 8001174:	3301      	adds	r3, #1
 8001176:	b2da      	uxtb	r2, r3
 8001178:	4b2c      	ldr	r3, [pc, #176]	; (800122c <main+0x214>)
 800117a:	701a      	strb	r2, [r3, #0]
			  dmaSize = printNumToBuff(dmaSize, (uint8_t*)dmaBuff, actFirValDec, 1, 1);
 800117c:	4b2b      	ldr	r3, [pc, #172]	; (800122c <main+0x214>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	b2d8      	uxtb	r0, r3
 8001182:	4b2d      	ldr	r3, [pc, #180]	; (8001238 <main+0x220>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	2301      	movs	r3, #1
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2301      	movs	r3, #1
 800118c:	4926      	ldr	r1, [pc, #152]	; (8001228 <main+0x210>)
 800118e:	f7ff fca9 	bl	8000ae4 <printNumToBuff>
 8001192:	4603      	mov	r3, r0
 8001194:	461a      	mov	r2, r3
 8001196:	4b25      	ldr	r3, [pc, #148]	; (800122c <main+0x214>)
 8001198:	701a      	strb	r2, [r3, #0]
			  *(dmaBuff+dmaSize) = '\r';
 800119a:	4b24      	ldr	r3, [pc, #144]	; (800122c <main+0x214>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b21      	ldr	r3, [pc, #132]	; (8001228 <main+0x210>)
 80011a4:	4413      	add	r3, r2
 80011a6:	220d      	movs	r2, #13
 80011a8:	701a      	strb	r2, [r3, #0]
			  dmaSize++;
 80011aa:	4b20      	ldr	r3, [pc, #128]	; (800122c <main+0x214>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	3301      	adds	r3, #1
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	4b1d      	ldr	r3, [pc, #116]	; (800122c <main+0x214>)
 80011b6:	701a      	strb	r2, [r3, #0]
			  *(dmaBuff+dmaSize) = '\n';
 80011b8:	4b1c      	ldr	r3, [pc, #112]	; (800122c <main+0x214>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	461a      	mov	r2, r3
 80011c0:	4b19      	ldr	r3, [pc, #100]	; (8001228 <main+0x210>)
 80011c2:	4413      	add	r3, r2
 80011c4:	220a      	movs	r2, #10
 80011c6:	701a      	strb	r2, [r3, #0]
			  dmaSize++;
 80011c8:	4b18      	ldr	r3, [pc, #96]	; (800122c <main+0x214>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	3301      	adds	r3, #1
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	4b16      	ldr	r3, [pc, #88]	; (800122c <main+0x214>)
 80011d4:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit_DMA(&huart1, (uint8_t*)dmaBuff, dmaSize);
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <main+0x214>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	b29b      	uxth	r3, r3
 80011de:	461a      	mov	r2, r3
 80011e0:	4911      	ldr	r1, [pc, #68]	; (8001228 <main+0x210>)
 80011e2:	4809      	ldr	r0, [pc, #36]	; (8001208 <main+0x1f0>)
 80011e4:	f005 f928 	bl	8006438 <HAL_UART_Transmit_DMA>
			  uartDmaFlag = 1;
 80011e8:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <main+0x208>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	701a      	strb	r2, [r3, #0]
		  }
		  sendFlag = 0;
 80011ee:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <main+0x200>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	701a      	strb	r2, [r3, #0]
		  actAdcFlag = 0;
 80011f4:	4b09      	ldr	r3, [pc, #36]	; (800121c <main+0x204>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	701a      	strb	r2, [r3, #0]
 80011fa:	e0ad      	b.n	8001358 <main+0x340>
 80011fc:	200010d8 	.word	0x200010d8
 8001200:	48000400 	.word	0x48000400
 8001204:	200012d1 	.word	0x200012d1
 8001208:	200011bc 	.word	0x200011bc
 800120c:	20001124 	.word	0x20001124
 8001210:	20001170 	.word	0x20001170
 8001214:	200012d0 	.word	0x200012d0
 8001218:	200012b2 	.word	0x200012b2
 800121c:	200012bc 	.word	0x200012bc
 8001220:	200012b3 	.word	0x200012b3
 8001224:	200012c4 	.word	0x200012c4
 8001228:	200007dc 	.word	0x200007dc
 800122c:	200012b4 	.word	0x200012b4
 8001230:	200012c8 	.word	0x200012c8
 8001234:	200007d8 	.word	0x200007d8
 8001238:	200012b8 	.word	0x200012b8
	  }else if(mode==OFFmode){
 800123c:	4b47      	ldr	r3, [pc, #284]	; (800135c <main+0x344>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2b00      	cmp	r3, #0
 8001244:	f47f af39 	bne.w	80010ba <main+0xa2>
		  if(uartDmaFlag == 0){
 8001248:	4b45      	ldr	r3, [pc, #276]	; (8001360 <main+0x348>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b00      	cmp	r3, #0
 8001250:	d17f      	bne.n	8001352 <main+0x33a>
			  dmaSize = printNumToBuff(0, (uint8_t*)dmaBuff, test_cnt, 1, 1);
 8001252:	4b44      	ldr	r3, [pc, #272]	; (8001364 <main+0x34c>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	2301      	movs	r3, #1
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	2301      	movs	r3, #1
 800125c:	4942      	ldr	r1, [pc, #264]	; (8001368 <main+0x350>)
 800125e:	2000      	movs	r0, #0
 8001260:	f7ff fc40 	bl	8000ae4 <printNumToBuff>
 8001264:	4603      	mov	r3, r0
 8001266:	461a      	mov	r2, r3
 8001268:	4b40      	ldr	r3, [pc, #256]	; (800136c <main+0x354>)
 800126a:	701a      	strb	r2, [r3, #0]
			  *(dmaBuff+dmaSize) = ' ';
 800126c:	4b3f      	ldr	r3, [pc, #252]	; (800136c <main+0x354>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	b2db      	uxtb	r3, r3
 8001272:	461a      	mov	r2, r3
 8001274:	4b3c      	ldr	r3, [pc, #240]	; (8001368 <main+0x350>)
 8001276:	4413      	add	r3, r2
 8001278:	2220      	movs	r2, #32
 800127a:	701a      	strb	r2, [r3, #0]
			  dmaSize++;
 800127c:	4b3b      	ldr	r3, [pc, #236]	; (800136c <main+0x354>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	b2db      	uxtb	r3, r3
 8001282:	3301      	adds	r3, #1
 8001284:	b2da      	uxtb	r2, r3
 8001286:	4b39      	ldr	r3, [pc, #228]	; (800136c <main+0x354>)
 8001288:	701a      	strb	r2, [r3, #0]
			  dmaSize = printNumToBuff(dmaSize, (uint8_t*)dmaBuff, test_cnt, 1, 1);
 800128a:	4b38      	ldr	r3, [pc, #224]	; (800136c <main+0x354>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	b2d8      	uxtb	r0, r3
 8001290:	4b34      	ldr	r3, [pc, #208]	; (8001364 <main+0x34c>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	2301      	movs	r3, #1
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	2301      	movs	r3, #1
 800129a:	4933      	ldr	r1, [pc, #204]	; (8001368 <main+0x350>)
 800129c:	f7ff fc22 	bl	8000ae4 <printNumToBuff>
 80012a0:	4603      	mov	r3, r0
 80012a2:	461a      	mov	r2, r3
 80012a4:	4b31      	ldr	r3, [pc, #196]	; (800136c <main+0x354>)
 80012a6:	701a      	strb	r2, [r3, #0]
			  *(dmaBuff+dmaSize) = ' ';
 80012a8:	4b30      	ldr	r3, [pc, #192]	; (800136c <main+0x354>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	461a      	mov	r2, r3
 80012b0:	4b2d      	ldr	r3, [pc, #180]	; (8001368 <main+0x350>)
 80012b2:	4413      	add	r3, r2
 80012b4:	2220      	movs	r2, #32
 80012b6:	701a      	strb	r2, [r3, #0]
			  dmaSize++;
 80012b8:	4b2c      	ldr	r3, [pc, #176]	; (800136c <main+0x354>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	3301      	adds	r3, #1
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	4b2a      	ldr	r3, [pc, #168]	; (800136c <main+0x354>)
 80012c4:	701a      	strb	r2, [r3, #0]
			  dmaSize = printNumToBuff(dmaSize, (uint8_t*)dmaBuff, test_cnt, 1, 1);
 80012c6:	4b29      	ldr	r3, [pc, #164]	; (800136c <main+0x354>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	b2d8      	uxtb	r0, r3
 80012cc:	4b25      	ldr	r3, [pc, #148]	; (8001364 <main+0x34c>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	2301      	movs	r3, #1
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	2301      	movs	r3, #1
 80012d6:	4924      	ldr	r1, [pc, #144]	; (8001368 <main+0x350>)
 80012d8:	f7ff fc04 	bl	8000ae4 <printNumToBuff>
 80012dc:	4603      	mov	r3, r0
 80012de:	461a      	mov	r2, r3
 80012e0:	4b22      	ldr	r3, [pc, #136]	; (800136c <main+0x354>)
 80012e2:	701a      	strb	r2, [r3, #0]
			  *(dmaBuff+dmaSize) = '\r';
 80012e4:	4b21      	ldr	r3, [pc, #132]	; (800136c <main+0x354>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	461a      	mov	r2, r3
 80012ec:	4b1e      	ldr	r3, [pc, #120]	; (8001368 <main+0x350>)
 80012ee:	4413      	add	r3, r2
 80012f0:	220d      	movs	r2, #13
 80012f2:	701a      	strb	r2, [r3, #0]
			  dmaSize++;
 80012f4:	4b1d      	ldr	r3, [pc, #116]	; (800136c <main+0x354>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	3301      	adds	r3, #1
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	4b1b      	ldr	r3, [pc, #108]	; (800136c <main+0x354>)
 8001300:	701a      	strb	r2, [r3, #0]
			  *(dmaBuff+dmaSize) = '\n';
 8001302:	4b1a      	ldr	r3, [pc, #104]	; (800136c <main+0x354>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	b2db      	uxtb	r3, r3
 8001308:	461a      	mov	r2, r3
 800130a:	4b17      	ldr	r3, [pc, #92]	; (8001368 <main+0x350>)
 800130c:	4413      	add	r3, r2
 800130e:	220a      	movs	r2, #10
 8001310:	701a      	strb	r2, [r3, #0]
			  dmaSize++;
 8001312:	4b16      	ldr	r3, [pc, #88]	; (800136c <main+0x354>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	b2db      	uxtb	r3, r3
 8001318:	3301      	adds	r3, #1
 800131a:	b2da      	uxtb	r2, r3
 800131c:	4b13      	ldr	r3, [pc, #76]	; (800136c <main+0x354>)
 800131e:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit_DMA(&huart1, (uint8_t*)dmaBuff, dmaSize);
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <main+0x354>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	b2db      	uxtb	r3, r3
 8001326:	b29b      	uxth	r3, r3
 8001328:	461a      	mov	r2, r3
 800132a:	490f      	ldr	r1, [pc, #60]	; (8001368 <main+0x350>)
 800132c:	4810      	ldr	r0, [pc, #64]	; (8001370 <main+0x358>)
 800132e:	f005 f883 	bl	8006438 <HAL_UART_Transmit_DMA>
			  uartDmaFlag = 1;
 8001332:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <main+0x348>)
 8001334:	2201      	movs	r2, #1
 8001336:	701a      	strb	r2, [r3, #0]
			  test_cnt++;
 8001338:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <main+0x34c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	3301      	adds	r3, #1
 800133e:	4a09      	ldr	r2, [pc, #36]	; (8001364 <main+0x34c>)
 8001340:	6013      	str	r3, [r2, #0]
			  if(test_cnt>1000){
 8001342:	4b08      	ldr	r3, [pc, #32]	; (8001364 <main+0x34c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800134a:	dd02      	ble.n	8001352 <main+0x33a>
				  test_cnt=-1000;
 800134c:	4b05      	ldr	r3, [pc, #20]	; (8001364 <main+0x34c>)
 800134e:	4a09      	ldr	r2, [pc, #36]	; (8001374 <main+0x35c>)
 8001350:	601a      	str	r2, [r3, #0]
			  }
		  }
		  HAL_Delay(100);
 8001352:	2064      	movs	r0, #100	; 0x64
 8001354:	f000 fda0 	bl	8001e98 <HAL_Delay>
	  if((mode!=RAWmode)&&(mode!=OFFmode)&&(mode!=TRACKmode)&&(sendFlag==1)&&(actAdcFlag==1)){
 8001358:	e6af      	b.n	80010ba <main+0xa2>
 800135a:	bf00      	nop
 800135c:	200012d0 	.word	0x200012d0
 8001360:	200012b3 	.word	0x200012b3
 8001364:	20001304 	.word	0x20001304
 8001368:	200007dc 	.word	0x200007dc
 800136c:	200012b4 	.word	0x200012b4
 8001370:	200011bc 	.word	0x200011bc
 8001374:	fffffc18 	.word	0xfffffc18

08001378 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b094      	sub	sp, #80	; 0x50
 800137c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800137e:	f107 0318 	add.w	r3, r7, #24
 8001382:	2238      	movs	r2, #56	; 0x38
 8001384:	2100      	movs	r1, #0
 8001386:	4618      	mov	r0, r3
 8001388:	f007 fb4a 	bl	8008a20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	609a      	str	r2, [r3, #8]
 8001396:	60da      	str	r2, [r3, #12]
 8001398:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800139a:	2000      	movs	r0, #0
 800139c:	f003 fa10 	bl	80047c0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013a0:	2301      	movs	r3, #1
 80013a2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013a8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013aa:	2302      	movs	r3, #2
 80013ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013ae:	2303      	movs	r3, #3
 80013b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80013b2:	2301      	movs	r3, #1
 80013b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 42;
 80013b6:	232a      	movs	r3, #42	; 0x2a
 80013b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013ba:	2302      	movs	r3, #2
 80013bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013be:	2302      	movs	r3, #2
 80013c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013c2:	2302      	movs	r3, #2
 80013c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c6:	f107 0318 	add.w	r3, r7, #24
 80013ca:	4618      	mov	r0, r3
 80013cc:	f003 fa9c 	bl	8004908 <HAL_RCC_OscConfig>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <SystemClock_Config+0x62>
  {
    Error_Handler();
 80013d6:	f000 fab1 	bl	800193c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013da:	230f      	movs	r3, #15
 80013dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013de:	2303      	movs	r3, #3
 80013e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013e6:	2300      	movs	r3, #0
 80013e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ea:	2300      	movs	r3, #0
 80013ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	2104      	movs	r1, #4
 80013f2:	4618      	mov	r0, r3
 80013f4:	f003 fd9a 	bl	8004f2c <HAL_RCC_ClockConfig>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80013fe:	f000 fa9d 	bl	800193c <Error_Handler>
  }
}
 8001402:	bf00      	nop
 8001404:	3750      	adds	r7, #80	; 0x50
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08c      	sub	sp, #48	; 0x30
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	2220      	movs	r2, #32
 8001422:	2100      	movs	r1, #0
 8001424:	4618      	mov	r0, r3
 8001426:	f007 fafb 	bl	8008a20 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800142a:	4b32      	ldr	r3, [pc, #200]	; (80014f4 <MX_ADC1_Init+0xe8>)
 800142c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001430:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8001432:	4b30      	ldr	r3, [pc, #192]	; (80014f4 <MX_ADC1_Init+0xe8>)
 8001434:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001438:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800143a:	4b2e      	ldr	r3, [pc, #184]	; (80014f4 <MX_ADC1_Init+0xe8>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001440:	4b2c      	ldr	r3, [pc, #176]	; (80014f4 <MX_ADC1_Init+0xe8>)
 8001442:	2200      	movs	r2, #0
 8001444:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001446:	4b2b      	ldr	r3, [pc, #172]	; (80014f4 <MX_ADC1_Init+0xe8>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800144c:	4b29      	ldr	r3, [pc, #164]	; (80014f4 <MX_ADC1_Init+0xe8>)
 800144e:	2200      	movs	r2, #0
 8001450:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001452:	4b28      	ldr	r3, [pc, #160]	; (80014f4 <MX_ADC1_Init+0xe8>)
 8001454:	2204      	movs	r2, #4
 8001456:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001458:	4b26      	ldr	r3, [pc, #152]	; (80014f4 <MX_ADC1_Init+0xe8>)
 800145a:	2200      	movs	r2, #0
 800145c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800145e:	4b25      	ldr	r3, [pc, #148]	; (80014f4 <MX_ADC1_Init+0xe8>)
 8001460:	2200      	movs	r2, #0
 8001462:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001464:	4b23      	ldr	r3, [pc, #140]	; (80014f4 <MX_ADC1_Init+0xe8>)
 8001466:	2201      	movs	r2, #1
 8001468:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800146a:	4b22      	ldr	r3, [pc, #136]	; (80014f4 <MX_ADC1_Init+0xe8>)
 800146c:	2200      	movs	r2, #0
 800146e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001472:	4b20      	ldr	r3, [pc, #128]	; (80014f4 <MX_ADC1_Init+0xe8>)
 8001474:	2200      	movs	r2, #0
 8001476:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001478:	4b1e      	ldr	r3, [pc, #120]	; (80014f4 <MX_ADC1_Init+0xe8>)
 800147a:	2200      	movs	r2, #0
 800147c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800147e:	4b1d      	ldr	r3, [pc, #116]	; (80014f4 <MX_ADC1_Init+0xe8>)
 8001480:	2200      	movs	r2, #0
 8001482:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001486:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <MX_ADC1_Init+0xe8>)
 8001488:	2200      	movs	r2, #0
 800148a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800148c:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <MX_ADC1_Init+0xe8>)
 800148e:	2200      	movs	r2, #0
 8001490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001494:	4817      	ldr	r0, [pc, #92]	; (80014f4 <MX_ADC1_Init+0xe8>)
 8001496:	f000 ff61 	bl	800235c <HAL_ADC_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80014a0:	f000 fa4c 	bl	800193c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80014a4:	2300      	movs	r3, #0
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80014a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ac:	4619      	mov	r1, r3
 80014ae:	4811      	ldr	r0, [pc, #68]	; (80014f4 <MX_ADC1_Init+0xe8>)
 80014b0:	f002 f914 	bl	80036dc <HAL_ADCEx_MultiModeConfigChannel>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80014ba:	f000 fa3f 	bl	800193c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014be:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <MX_ADC1_Init+0xec>)
 80014c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014c2:	2306      	movs	r3, #6
 80014c4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 80014c6:	2303      	movs	r3, #3
 80014c8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014ca:	237f      	movs	r3, #127	; 0x7f
 80014cc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014ce:	2304      	movs	r3, #4
 80014d0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	4619      	mov	r1, r3
 80014da:	4806      	ldr	r0, [pc, #24]	; (80014f4 <MX_ADC1_Init+0xe8>)
 80014dc:	f001 fc30 	bl	8002d40 <HAL_ADC_ConfigChannel>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80014e6:	f000 fa29 	bl	800193c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014ea:	bf00      	nop
 80014ec:	3730      	adds	r7, #48	; 0x30
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20001058 	.word	0x20001058
 80014f8:	04300002 	.word	0x04300002

080014fc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08c      	sub	sp, #48	; 0x30
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001502:	463b      	mov	r3, r7
 8001504:	2230      	movs	r2, #48	; 0x30
 8001506:	2100      	movs	r1, #0
 8001508:	4618      	mov	r0, r3
 800150a:	f007 fa89 	bl	8008a20 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800150e:	4b16      	ldr	r3, [pc, #88]	; (8001568 <MX_DAC1_Init+0x6c>)
 8001510:	4a16      	ldr	r2, [pc, #88]	; (800156c <MX_DAC1_Init+0x70>)
 8001512:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001514:	4814      	ldr	r0, [pc, #80]	; (8001568 <MX_DAC1_Init+0x6c>)
 8001516:	f002 fa94 	bl	8003a42 <HAL_DAC_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001520:	f000 fa0c 	bl	800193c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001524:	2302      	movs	r3, #2
 8001526:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001528:	2300      	movs	r3, #0
 800152a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800152c:	2300      	movs	r3, #0
 800152e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001530:	2300      	movs	r3, #0
 8001532:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001538:	2300      	movs	r3, #0
 800153a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001540:	2301      	movs	r3, #1
 8001542:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001544:	2300      	movs	r3, #0
 8001546:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001548:	463b      	mov	r3, r7
 800154a:	2200      	movs	r2, #0
 800154c:	4619      	mov	r1, r3
 800154e:	4806      	ldr	r0, [pc, #24]	; (8001568 <MX_DAC1_Init+0x6c>)
 8001550:	f002 fa9a 	bl	8003a88 <HAL_DAC_ConfigChannel>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800155a:	f000 f9ef 	bl	800193c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	3730      	adds	r7, #48	; 0x30
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	200010c4 	.word	0x200010c4
 800156c:	50000800 	.word	0x50000800

08001570 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001576:	f107 0310 	add.w	r3, r7, #16
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001584:	1d3b      	adds	r3, r7, #4
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800158e:	4b1e      	ldr	r3, [pc, #120]	; (8001608 <MX_TIM2_Init+0x98>)
 8001590:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001594:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 167;
 8001596:	4b1c      	ldr	r3, [pc, #112]	; (8001608 <MX_TIM2_Init+0x98>)
 8001598:	22a7      	movs	r2, #167	; 0xa7
 800159a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159c:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <MX_TIM2_Init+0x98>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 80015a2:	4b19      	ldr	r3, [pc, #100]	; (8001608 <MX_TIM2_Init+0x98>)
 80015a4:	f04f 32ff 	mov.w	r2, #4294967295
 80015a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015aa:	4b17      	ldr	r3, [pc, #92]	; (8001608 <MX_TIM2_Init+0x98>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b0:	4b15      	ldr	r3, [pc, #84]	; (8001608 <MX_TIM2_Init+0x98>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015b6:	4814      	ldr	r0, [pc, #80]	; (8001608 <MX_TIM2_Init+0x98>)
 80015b8:	f004 f8c4 	bl	8005744 <HAL_TIM_Base_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80015c2:	f000 f9bb 	bl	800193c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015cc:	f107 0310 	add.w	r3, r7, #16
 80015d0:	4619      	mov	r1, r3
 80015d2:	480d      	ldr	r0, [pc, #52]	; (8001608 <MX_TIM2_Init+0x98>)
 80015d4:	f004 fb2a 	bl	8005c2c <HAL_TIM_ConfigClockSource>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80015de:	f000 f9ad 	bl	800193c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e2:	2300      	movs	r3, #0
 80015e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	4619      	mov	r1, r3
 80015ee:	4806      	ldr	r0, [pc, #24]	; (8001608 <MX_TIM2_Init+0x98>)
 80015f0:	f004 fd76 	bl	80060e0 <HAL_TIMEx_MasterConfigSynchronization>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80015fa:	f000 f99f 	bl	800193c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015fe:	bf00      	nop
 8001600:	3720      	adds	r7, #32
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	200010d8 	.word	0x200010d8

0800160c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b088      	sub	sp, #32
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001612:	f107 0310 	add.w	r3, r7, #16
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]
 8001628:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <MX_TIM3_Init+0x94>)
 800162c:	4a1d      	ldr	r2, [pc, #116]	; (80016a4 <MX_TIM3_Init+0x98>)
 800162e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 8001630:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <MX_TIM3_Init+0x94>)
 8001632:	2209      	movs	r2, #9
 8001634:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001636:	4b1a      	ldr	r3, [pc, #104]	; (80016a0 <MX_TIM3_Init+0x94>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16799;
 800163c:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <MX_TIM3_Init+0x94>)
 800163e:	f244 129f 	movw	r2, #16799	; 0x419f
 8001642:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001644:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <MX_TIM3_Init+0x94>)
 8001646:	2200      	movs	r2, #0
 8001648:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164a:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <MX_TIM3_Init+0x94>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001650:	4813      	ldr	r0, [pc, #76]	; (80016a0 <MX_TIM3_Init+0x94>)
 8001652:	f004 f877 	bl	8005744 <HAL_TIM_Base_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800165c:	f000 f96e 	bl	800193c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001664:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001666:	f107 0310 	add.w	r3, r7, #16
 800166a:	4619      	mov	r1, r3
 800166c:	480c      	ldr	r0, [pc, #48]	; (80016a0 <MX_TIM3_Init+0x94>)
 800166e:	f004 fadd 	bl	8005c2c <HAL_TIM_ConfigClockSource>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001678:	f000 f960 	bl	800193c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800167c:	2300      	movs	r3, #0
 800167e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001680:	2300      	movs	r3, #0
 8001682:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001684:	1d3b      	adds	r3, r7, #4
 8001686:	4619      	mov	r1, r3
 8001688:	4805      	ldr	r0, [pc, #20]	; (80016a0 <MX_TIM3_Init+0x94>)
 800168a:	f004 fd29 	bl	80060e0 <HAL_TIMEx_MasterConfigSynchronization>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001694:	f000 f952 	bl	800193c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001698:	bf00      	nop
 800169a:	3720      	adds	r7, #32
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20001124 	.word	0x20001124
 80016a4:	40000400 	.word	0x40000400

080016a8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b088      	sub	sp, #32
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ae:	f107 0310 	add.w	r3, r7, #16
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016bc:	1d3b      	adds	r3, r7, #4
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016c6:	4b1d      	ldr	r3, [pc, #116]	; (800173c <MX_TIM4_Init+0x94>)
 80016c8:	4a1d      	ldr	r2, [pc, #116]	; (8001740 <MX_TIM4_Init+0x98>)
 80016ca:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 167;
 80016cc:	4b1b      	ldr	r3, [pc, #108]	; (800173c <MX_TIM4_Init+0x94>)
 80016ce:	22a7      	movs	r2, #167	; 0xa7
 80016d0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d2:	4b1a      	ldr	r3, [pc, #104]	; (800173c <MX_TIM4_Init+0x94>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80016d8:	4b18      	ldr	r3, [pc, #96]	; (800173c <MX_TIM4_Init+0x94>)
 80016da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016de:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e0:	4b16      	ldr	r3, [pc, #88]	; (800173c <MX_TIM4_Init+0x94>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e6:	4b15      	ldr	r3, [pc, #84]	; (800173c <MX_TIM4_Init+0x94>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80016ec:	4813      	ldr	r0, [pc, #76]	; (800173c <MX_TIM4_Init+0x94>)
 80016ee:	f004 f829 	bl	8005744 <HAL_TIM_Base_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80016f8:	f000 f920 	bl	800193c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001700:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001702:	f107 0310 	add.w	r3, r7, #16
 8001706:	4619      	mov	r1, r3
 8001708:	480c      	ldr	r0, [pc, #48]	; (800173c <MX_TIM4_Init+0x94>)
 800170a:	f004 fa8f 	bl	8005c2c <HAL_TIM_ConfigClockSource>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001714:	f000 f912 	bl	800193c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001718:	2300      	movs	r3, #0
 800171a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800171c:	2300      	movs	r3, #0
 800171e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001720:	1d3b      	adds	r3, r7, #4
 8001722:	4619      	mov	r1, r3
 8001724:	4805      	ldr	r0, [pc, #20]	; (800173c <MX_TIM4_Init+0x94>)
 8001726:	f004 fcdb 	bl	80060e0 <HAL_TIMEx_MasterConfigSynchronization>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001730:	f000 f904 	bl	800193c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001734:	bf00      	nop
 8001736:	3720      	adds	r7, #32
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20001170 	.word	0x20001170
 8001740:	40000800 	.word	0x40000800

08001744 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001748:	4b22      	ldr	r3, [pc, #136]	; (80017d4 <MX_USART1_UART_Init+0x90>)
 800174a:	4a23      	ldr	r2, [pc, #140]	; (80017d8 <MX_USART1_UART_Init+0x94>)
 800174c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1500000;
 800174e:	4b21      	ldr	r3, [pc, #132]	; (80017d4 <MX_USART1_UART_Init+0x90>)
 8001750:	4a22      	ldr	r2, [pc, #136]	; (80017dc <MX_USART1_UART_Init+0x98>)
 8001752:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001754:	4b1f      	ldr	r3, [pc, #124]	; (80017d4 <MX_USART1_UART_Init+0x90>)
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800175a:	4b1e      	ldr	r3, [pc, #120]	; (80017d4 <MX_USART1_UART_Init+0x90>)
 800175c:	2200      	movs	r2, #0
 800175e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001760:	4b1c      	ldr	r3, [pc, #112]	; (80017d4 <MX_USART1_UART_Init+0x90>)
 8001762:	2200      	movs	r2, #0
 8001764:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001766:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <MX_USART1_UART_Init+0x90>)
 8001768:	220c      	movs	r2, #12
 800176a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800176c:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <MX_USART1_UART_Init+0x90>)
 800176e:	2200      	movs	r2, #0
 8001770:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001772:	4b18      	ldr	r3, [pc, #96]	; (80017d4 <MX_USART1_UART_Init+0x90>)
 8001774:	2200      	movs	r2, #0
 8001776:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001778:	4b16      	ldr	r3, [pc, #88]	; (80017d4 <MX_USART1_UART_Init+0x90>)
 800177a:	2200      	movs	r2, #0
 800177c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800177e:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <MX_USART1_UART_Init+0x90>)
 8001780:	2200      	movs	r2, #0
 8001782:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001784:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <MX_USART1_UART_Init+0x90>)
 8001786:	2200      	movs	r2, #0
 8001788:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800178a:	4812      	ldr	r0, [pc, #72]	; (80017d4 <MX_USART1_UART_Init+0x90>)
 800178c:	f004 fd70 	bl	8006270 <HAL_UART_Init>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8001796:	f000 f8d1 	bl	800193c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800179a:	2100      	movs	r1, #0
 800179c:	480d      	ldr	r0, [pc, #52]	; (80017d4 <MX_USART1_UART_Init+0x90>)
 800179e:	f007 f850 	bl	8008842 <HAL_UARTEx_SetTxFifoThreshold>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 80017a8:	f000 f8c8 	bl	800193c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017ac:	2100      	movs	r1, #0
 80017ae:	4809      	ldr	r0, [pc, #36]	; (80017d4 <MX_USART1_UART_Init+0x90>)
 80017b0:	f007 f885 	bl	80088be <HAL_UARTEx_SetRxFifoThreshold>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 80017ba:	f000 f8bf 	bl	800193c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80017be:	4805      	ldr	r0, [pc, #20]	; (80017d4 <MX_USART1_UART_Init+0x90>)
 80017c0:	f007 f806 	bl	80087d0 <HAL_UARTEx_DisableFifoMode>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 80017ca:	f000 f8b7 	bl	800193c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200011bc 	.word	0x200011bc
 80017d8:	40013800 	.word	0x40013800
 80017dc:	0016e360 	.word	0x0016e360

080017e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80017e6:	4b12      	ldr	r3, [pc, #72]	; (8001830 <MX_DMA_Init+0x50>)
 80017e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ea:	4a11      	ldr	r2, [pc, #68]	; (8001830 <MX_DMA_Init+0x50>)
 80017ec:	f043 0304 	orr.w	r3, r3, #4
 80017f0:	6493      	str	r3, [r2, #72]	; 0x48
 80017f2:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <MX_DMA_Init+0x50>)
 80017f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017f6:	f003 0304 	and.w	r3, r3, #4
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017fe:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <MX_DMA_Init+0x50>)
 8001800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001802:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <MX_DMA_Init+0x50>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	6493      	str	r3, [r2, #72]	; 0x48
 800180a:	4b09      	ldr	r3, [pc, #36]	; (8001830 <MX_DMA_Init+0x50>)
 800180c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	603b      	str	r3, [r7, #0]
 8001814:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001816:	2200      	movs	r2, #0
 8001818:	2100      	movs	r1, #0
 800181a:	200b      	movs	r0, #11
 800181c:	f002 f8dd 	bl	80039da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001820:	200b      	movs	r0, #11
 8001822:	f002 f8f4 	bl	8003a0e <HAL_NVIC_EnableIRQ>

}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40021000 	.word	0x40021000

08001834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b088      	sub	sp, #32
 8001838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183a:	f107 030c 	add.w	r3, r7, #12
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]
 8001844:	609a      	str	r2, [r3, #8]
 8001846:	60da      	str	r2, [r3, #12]
 8001848:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800184a:	4b3a      	ldr	r3, [pc, #232]	; (8001934 <MX_GPIO_Init+0x100>)
 800184c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184e:	4a39      	ldr	r2, [pc, #228]	; (8001934 <MX_GPIO_Init+0x100>)
 8001850:	f043 0320 	orr.w	r3, r3, #32
 8001854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001856:	4b37      	ldr	r3, [pc, #220]	; (8001934 <MX_GPIO_Init+0x100>)
 8001858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185a:	f003 0320 	and.w	r3, r3, #32
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001862:	4b34      	ldr	r3, [pc, #208]	; (8001934 <MX_GPIO_Init+0x100>)
 8001864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001866:	4a33      	ldr	r2, [pc, #204]	; (8001934 <MX_GPIO_Init+0x100>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800186e:	4b31      	ldr	r3, [pc, #196]	; (8001934 <MX_GPIO_Init+0x100>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800187a:	4b2e      	ldr	r3, [pc, #184]	; (8001934 <MX_GPIO_Init+0x100>)
 800187c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187e:	4a2d      	ldr	r2, [pc, #180]	; (8001934 <MX_GPIO_Init+0x100>)
 8001880:	f043 0302 	orr.w	r3, r3, #2
 8001884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001886:	4b2b      	ldr	r3, [pc, #172]	; (8001934 <MX_GPIO_Init+0x100>)
 8001888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	603b      	str	r3, [r7, #0]
 8001890:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO1_Pin|GPIO2_Pin|GPIO3_Pin|GPIO5_Pin
 8001892:	2200      	movs	r2, #0
 8001894:	f640 11ee 	movw	r1, #2542	; 0x9ee
 8001898:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800189c:	f002 ff78 	bl	8004790 <HAL_GPIO_WritePin>
                          |GPIO6_Pin|GPIO7_Pin|GPIO8_Pin|GPIO9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO0_Pin|GPIO4_Pin|LED_B_Pin|LED_G_Pin, GPIO_PIN_RESET);
 80018a0:	2200      	movs	r2, #0
 80018a2:	f240 1191 	movw	r1, #401	; 0x191
 80018a6:	4824      	ldr	r0, [pc, #144]	; (8001938 <MX_GPIO_Init+0x104>)
 80018a8:	f002 ff72 	bl	8004790 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO1_Pin GPIO2_Pin GPIO3_Pin GPIO5_Pin
                           GPIO6_Pin GPIO7_Pin GPIO8_Pin GPIO9_Pin */
  GPIO_InitStruct.Pin = GPIO1_Pin|GPIO2_Pin|GPIO3_Pin|GPIO5_Pin
 80018ac:	f640 13ee 	movw	r3, #2542	; 0x9ee
 80018b0:	60fb      	str	r3, [r7, #12]
                          |GPIO6_Pin|GPIO7_Pin|GPIO8_Pin|GPIO9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b2:	2301      	movs	r3, #1
 80018b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ba:	2300      	movs	r3, #0
 80018bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018be:	f107 030c 	add.w	r3, r7, #12
 80018c2:	4619      	mov	r1, r3
 80018c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c8:	f002 fdc8 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO0_Pin GPIO4_Pin LED_B_Pin LED_G_Pin */
  GPIO_InitStruct.Pin = GPIO0_Pin|GPIO4_Pin|LED_B_Pin|LED_G_Pin;
 80018cc:	f240 1391 	movw	r3, #401	; 0x191
 80018d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d2:	2301      	movs	r3, #1
 80018d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018da:	2300      	movs	r3, #0
 80018dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018de:	f107 030c 	add.w	r3, r7, #12
 80018e2:	4619      	mov	r1, r3
 80018e4:	4814      	ldr	r0, [pc, #80]	; (8001938 <MX_GPIO_Init+0x104>)
 80018e6:	f002 fdb9 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CLK_Pin */
  GPIO_InitStruct.Pin = SD_CLK_Pin;
 80018ea:	2308      	movs	r3, #8
 80018ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018ee:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80018f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SD_CLK_GPIO_Port, &GPIO_InitStruct);
 80018f8:	f107 030c 	add.w	r3, r7, #12
 80018fc:	4619      	mov	r1, r3
 80018fe:	480e      	ldr	r0, [pc, #56]	; (8001938 <MX_GPIO_Init+0x104>)
 8001900:	f002 fdac 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CNT_Pin SD_DOUT_Pin */
  GPIO_InitStruct.Pin = SD_CNT_Pin|SD_DOUT_Pin;
 8001904:	2360      	movs	r3, #96	; 0x60
 8001906:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001908:	2300      	movs	r3, #0
 800190a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001910:	f107 030c 	add.w	r3, r7, #12
 8001914:	4619      	mov	r1, r3
 8001916:	4808      	ldr	r0, [pc, #32]	; (8001938 <MX_GPIO_Init+0x104>)
 8001918:	f002 fda0 	bl	800445c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800191c:	2200      	movs	r2, #0
 800191e:	2100      	movs	r1, #0
 8001920:	2009      	movs	r0, #9
 8001922:	f002 f85a 	bl	80039da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001926:	2009      	movs	r0, #9
 8001928:	f002 f871 	bl	8003a0e <HAL_NVIC_EnableIRQ>

}
 800192c:	bf00      	nop
 800192e:	3720      	adds	r7, #32
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40021000 	.word	0x40021000
 8001938:	48000400 	.word	0x48000400

0800193c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001940:	b672      	cpsid	i
}
 8001942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001944:	e7fe      	b.n	8001944 <Error_Handler+0x8>
	...

08001948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800194e:	4b0f      	ldr	r3, [pc, #60]	; (800198c <HAL_MspInit+0x44>)
 8001950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001952:	4a0e      	ldr	r2, [pc, #56]	; (800198c <HAL_MspInit+0x44>)
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	6613      	str	r3, [r2, #96]	; 0x60
 800195a:	4b0c      	ldr	r3, [pc, #48]	; (800198c <HAL_MspInit+0x44>)
 800195c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	607b      	str	r3, [r7, #4]
 8001964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001966:	4b09      	ldr	r3, [pc, #36]	; (800198c <HAL_MspInit+0x44>)
 8001968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196a:	4a08      	ldr	r2, [pc, #32]	; (800198c <HAL_MspInit+0x44>)
 800196c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001970:	6593      	str	r3, [r2, #88]	; 0x58
 8001972:	4b06      	ldr	r3, [pc, #24]	; (800198c <HAL_MspInit+0x44>)
 8001974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197a:	603b      	str	r3, [r7, #0]
 800197c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	40021000 	.word	0x40021000

08001990 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b09a      	sub	sp, #104	; 0x68
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001998:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019a8:	f107 0310 	add.w	r3, r7, #16
 80019ac:	2244      	movs	r2, #68	; 0x44
 80019ae:	2100      	movs	r1, #0
 80019b0:	4618      	mov	r0, r3
 80019b2:	f007 f835 	bl	8008a20 <memset>
  if(hadc->Instance==ADC1)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019be:	d13c      	bne.n	8001a3a <HAL_ADC_MspInit+0xaa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80019c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019c4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80019c6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80019ca:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019cc:	f107 0310 	add.w	r3, r7, #16
 80019d0:	4618      	mov	r0, r3
 80019d2:	f003 fcc7 	bl	8005364 <HAL_RCCEx_PeriphCLKConfig>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80019dc:	f7ff ffae 	bl	800193c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80019e0:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <HAL_ADC_MspInit+0xb4>)
 80019e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e4:	4a17      	ldr	r2, [pc, #92]	; (8001a44 <HAL_ADC_MspInit+0xb4>)
 80019e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ec:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <HAL_ADC_MspInit+0xb4>)
 80019ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f8:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <HAL_ADC_MspInit+0xb4>)
 80019fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fc:	4a11      	ldr	r2, [pc, #68]	; (8001a44 <HAL_ADC_MspInit+0xb4>)
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a04:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <HAL_ADC_MspInit+0xb4>)
 8001a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = SD_ADC_Pin;
 8001a10:	2301      	movs	r3, #1
 8001a12:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a14:	2303      	movs	r3, #3
 8001a16:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(SD_ADC_GPIO_Port, &GPIO_InitStruct);
 8001a1c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a20:	4619      	mov	r1, r3
 8001a22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a26:	f002 fd19 	bl	800445c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	2012      	movs	r0, #18
 8001a30:	f001 ffd3 	bl	80039da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001a34:	2012      	movs	r0, #18
 8001a36:	f001 ffea 	bl	8003a0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a3a:	bf00      	nop
 8001a3c:	3768      	adds	r7, #104	; 0x68
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40021000 	.word	0x40021000

08001a48 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08a      	sub	sp, #40	; 0x28
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a15      	ldr	r2, [pc, #84]	; (8001abc <HAL_DAC_MspInit+0x74>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d124      	bne.n	8001ab4 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001a6a:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <HAL_DAC_MspInit+0x78>)
 8001a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6e:	4a14      	ldr	r2, [pc, #80]	; (8001ac0 <HAL_DAC_MspInit+0x78>)
 8001a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a76:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <HAL_DAC_MspInit+0x78>)
 8001a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a7e:	613b      	str	r3, [r7, #16]
 8001a80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a82:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <HAL_DAC_MspInit+0x78>)
 8001a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a86:	4a0e      	ldr	r2, [pc, #56]	; (8001ac0 <HAL_DAC_MspInit+0x78>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <HAL_DAC_MspInit+0x78>)
 8001a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = SD_DAC_Pin;
 8001a9a:	2310      	movs	r3, #16
 8001a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SD_DAC_GPIO_Port, &GPIO_InitStruct);
 8001aa6:	f107 0314 	add.w	r3, r7, #20
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ab0:	f002 fcd4 	bl	800445c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001ab4:	bf00      	nop
 8001ab6:	3728      	adds	r7, #40	; 0x28
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	50000800 	.word	0x50000800
 8001ac0:	40021000 	.word	0x40021000

08001ac4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ad4:	d10c      	bne.n	8001af0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ad6:	4b22      	ldr	r3, [pc, #136]	; (8001b60 <HAL_TIM_Base_MspInit+0x9c>)
 8001ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ada:	4a21      	ldr	r2, [pc, #132]	; (8001b60 <HAL_TIM_Base_MspInit+0x9c>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ae2:	4b1f      	ldr	r3, [pc, #124]	; (8001b60 <HAL_TIM_Base_MspInit+0x9c>)
 8001ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	617b      	str	r3, [r7, #20]
 8001aec:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001aee:	e032      	b.n	8001b56 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a1b      	ldr	r2, [pc, #108]	; (8001b64 <HAL_TIM_Base_MspInit+0xa0>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d114      	bne.n	8001b24 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001afa:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <HAL_TIM_Base_MspInit+0x9c>)
 8001afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afe:	4a18      	ldr	r2, [pc, #96]	; (8001b60 <HAL_TIM_Base_MspInit+0x9c>)
 8001b00:	f043 0302 	orr.w	r3, r3, #2
 8001b04:	6593      	str	r3, [r2, #88]	; 0x58
 8001b06:	4b16      	ldr	r3, [pc, #88]	; (8001b60 <HAL_TIM_Base_MspInit+0x9c>)
 8001b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	613b      	str	r3, [r7, #16]
 8001b10:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2100      	movs	r1, #0
 8001b16:	201d      	movs	r0, #29
 8001b18:	f001 ff5f 	bl	80039da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b1c:	201d      	movs	r0, #29
 8001b1e:	f001 ff76 	bl	8003a0e <HAL_NVIC_EnableIRQ>
}
 8001b22:	e018      	b.n	8001b56 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a0f      	ldr	r2, [pc, #60]	; (8001b68 <HAL_TIM_Base_MspInit+0xa4>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d113      	bne.n	8001b56 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b2e:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <HAL_TIM_Base_MspInit+0x9c>)
 8001b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b32:	4a0b      	ldr	r2, [pc, #44]	; (8001b60 <HAL_TIM_Base_MspInit+0x9c>)
 8001b34:	f043 0304 	orr.w	r3, r3, #4
 8001b38:	6593      	str	r3, [r2, #88]	; 0x58
 8001b3a:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <HAL_TIM_Base_MspInit+0x9c>)
 8001b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001b46:	2200      	movs	r2, #0
 8001b48:	2100      	movs	r1, #0
 8001b4a:	201e      	movs	r0, #30
 8001b4c:	f001 ff45 	bl	80039da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001b50:	201e      	movs	r0, #30
 8001b52:	f001 ff5c 	bl	8003a0e <HAL_NVIC_EnableIRQ>
}
 8001b56:	bf00      	nop
 8001b58:	3718      	adds	r7, #24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40021000 	.word	0x40021000
 8001b64:	40000400 	.word	0x40000400
 8001b68:	40000800 	.word	0x40000800

08001b6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b09a      	sub	sp, #104	; 0x68
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b74:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b84:	f107 0310 	add.w	r3, r7, #16
 8001b88:	2244      	movs	r2, #68	; 0x44
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f006 ff47 	bl	8008a20 <memset>
  if(huart->Instance==USART1)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a38      	ldr	r2, [pc, #224]	; (8001c78 <HAL_UART_MspInit+0x10c>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d168      	bne.n	8001c6e <HAL_UART_MspInit+0x102>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ba4:	f107 0310 	add.w	r3, r7, #16
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f003 fbdb 	bl	8005364 <HAL_RCCEx_PeriphCLKConfig>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001bb4:	f7ff fec2 	bl	800193c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bb8:	4b30      	ldr	r3, [pc, #192]	; (8001c7c <HAL_UART_MspInit+0x110>)
 8001bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bbc:	4a2f      	ldr	r2, [pc, #188]	; (8001c7c <HAL_UART_MspInit+0x110>)
 8001bbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bc2:	6613      	str	r3, [r2, #96]	; 0x60
 8001bc4:	4b2d      	ldr	r3, [pc, #180]	; (8001c7c <HAL_UART_MspInit+0x110>)
 8001bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd0:	4b2a      	ldr	r3, [pc, #168]	; (8001c7c <HAL_UART_MspInit+0x110>)
 8001bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd4:	4a29      	ldr	r2, [pc, #164]	; (8001c7c <HAL_UART_MspInit+0x110>)
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bdc:	4b27      	ldr	r3, [pc, #156]	; (8001c7c <HAL_UART_MspInit+0x110>)
 8001bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001be8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001bec:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bfa:	2307      	movs	r3, #7
 8001bfc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c02:	4619      	mov	r1, r3
 8001c04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c08:	f002 fc28 	bl	800445c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8001c0c:	4b1c      	ldr	r3, [pc, #112]	; (8001c80 <HAL_UART_MspInit+0x114>)
 8001c0e:	4a1d      	ldr	r2, [pc, #116]	; (8001c84 <HAL_UART_MspInit+0x118>)
 8001c10:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001c12:	4b1b      	ldr	r3, [pc, #108]	; (8001c80 <HAL_UART_MspInit+0x114>)
 8001c14:	2219      	movs	r2, #25
 8001c16:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c18:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <HAL_UART_MspInit+0x114>)
 8001c1a:	2210      	movs	r2, #16
 8001c1c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c1e:	4b18      	ldr	r3, [pc, #96]	; (8001c80 <HAL_UART_MspInit+0x114>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c24:	4b16      	ldr	r3, [pc, #88]	; (8001c80 <HAL_UART_MspInit+0x114>)
 8001c26:	2280      	movs	r2, #128	; 0x80
 8001c28:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c2a:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <HAL_UART_MspInit+0x114>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c30:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <HAL_UART_MspInit+0x114>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001c36:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <HAL_UART_MspInit+0x114>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c3c:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <HAL_UART_MspInit+0x114>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001c42:	480f      	ldr	r0, [pc, #60]	; (8001c80 <HAL_UART_MspInit+0x114>)
 8001c44:	f002 f8d8 	bl	8003df8 <HAL_DMA_Init>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8001c4e:	f7ff fe75 	bl	800193c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a0a      	ldr	r2, [pc, #40]	; (8001c80 <HAL_UART_MspInit+0x114>)
 8001c56:	67da      	str	r2, [r3, #124]	; 0x7c
 8001c58:	4a09      	ldr	r2, [pc, #36]	; (8001c80 <HAL_UART_MspInit+0x114>)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2100      	movs	r1, #0
 8001c62:	2025      	movs	r0, #37	; 0x25
 8001c64:	f001 feb9 	bl	80039da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c68:	2025      	movs	r0, #37	; 0x25
 8001c6a:	f001 fed0 	bl	8003a0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c6e:	bf00      	nop
 8001c70:	3768      	adds	r7, #104	; 0x68
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40013800 	.word	0x40013800
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	20001250 	.word	0x20001250
 8001c84:	40020008 	.word	0x40020008

08001c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c8c:	e7fe      	b.n	8001c8c <NMI_Handler+0x4>

08001c8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c92:	e7fe      	b.n	8001c92 <HardFault_Handler+0x4>

08001c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c98:	e7fe      	b.n	8001c98 <MemManage_Handler+0x4>

08001c9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c9e:	e7fe      	b.n	8001c9e <BusFault_Handler+0x4>

08001ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca4:	e7fe      	b.n	8001ca4 <UsageFault_Handler+0x4>

08001ca6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cd4:	f000 f8c2 	bl	8001e5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cd8:	bf00      	nop
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001ce0:	4802      	ldr	r0, [pc, #8]	; (8001cec <DMA1_Channel1_IRQHandler+0x10>)
 8001ce2:	f002 fa6c 	bl	80041be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	20001250 	.word	0x20001250

08001cf0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001cf4:	4802      	ldr	r0, [pc, #8]	; (8001d00 <ADC1_2_IRQHandler+0x10>)
 8001cf6:	f000 fdf5 	bl	80028e4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20001058 	.word	0x20001058

08001d04 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d08:	4802      	ldr	r0, [pc, #8]	; (8001d14 <TIM3_IRQHandler+0x10>)
 8001d0a:	f003 fe3f 	bl	800598c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20001124 	.word	0x20001124

08001d18 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001d1c:	4802      	ldr	r0, [pc, #8]	; (8001d28 <TIM4_IRQHandler+0x10>)
 8001d1e:	f003 fe35 	bl	800598c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20001170 	.word	0x20001170

08001d2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d30:	4802      	ldr	r0, [pc, #8]	; (8001d3c <USART1_IRQHandler+0x10>)
 8001d32:	f004 fc01 	bl	8006538 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	200011bc 	.word	0x200011bc

08001d40 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <SystemInit+0x20>)
 8001d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d4a:	4a05      	ldr	r2, [pc, #20]	; (8001d60 <SystemInit+0x20>)
 8001d4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d64:	480d      	ldr	r0, [pc, #52]	; (8001d9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d66:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit  
 8001d68:	f7ff ffea 	bl	8001d40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d6c:	480c      	ldr	r0, [pc, #48]	; (8001da0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d6e:	490d      	ldr	r1, [pc, #52]	; (8001da4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d70:	4a0d      	ldr	r2, [pc, #52]	; (8001da8 <LoopForever+0xe>)
  movs r3, #0
 8001d72:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001d74:	e002      	b.n	8001d7c <LoopCopyDataInit>

08001d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d7a:	3304      	adds	r3, #4

08001d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d80:	d3f9      	bcc.n	8001d76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d82:	4a0a      	ldr	r2, [pc, #40]	; (8001dac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d84:	4c0a      	ldr	r4, [pc, #40]	; (8001db0 <LoopForever+0x16>)
  movs r3, #0
 8001d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d88:	e001      	b.n	8001d8e <LoopFillZerobss>

08001d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d8c:	3204      	adds	r2, #4

08001d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d90:	d3fb      	bcc.n	8001d8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d92:	f006 fe21 	bl	80089d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d96:	f7ff f93f 	bl	8001018 <main>

08001d9a <LoopForever>:

LoopForever:
    b LoopForever
 8001d9a:	e7fe      	b.n	8001d9a <LoopForever>
  ldr   r0, =_estack
 8001d9c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001da0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001da4:	20000868 	.word	0x20000868
  ldr r2, =_sidata
 8001da8:	08008a98 	.word	0x08008a98
  ldr r2, =_sbss
 8001dac:	20000868 	.word	0x20000868
  ldr r4, =_ebss
 8001db0:	2000130c 	.word	0x2000130c

08001db4 <AES_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001db4:	e7fe      	b.n	8001db4 <AES_IRQHandler>

08001db6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dc0:	2003      	movs	r0, #3
 8001dc2:	f001 fdff 	bl	80039c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dc6:	200f      	movs	r0, #15
 8001dc8:	f000 f80e 	bl	8001de8 <HAL_InitTick>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d002      	beq.n	8001dd8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	71fb      	strb	r3, [r7, #7]
 8001dd6:	e001      	b.n	8001ddc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001dd8:	f7ff fdb6 	bl	8001948 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ddc:	79fb      	ldrb	r3, [r7, #7]

}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
	...

08001de8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001df0:	2300      	movs	r3, #0
 8001df2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001df4:	4b16      	ldr	r3, [pc, #88]	; (8001e50 <HAL_InitTick+0x68>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d022      	beq.n	8001e42 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001dfc:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <HAL_InitTick+0x6c>)
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	4b13      	ldr	r3, [pc, #76]	; (8001e50 <HAL_InitTick+0x68>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e08:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e10:	4618      	mov	r0, r3
 8001e12:	f001 fe0a 	bl	8003a2a <HAL_SYSTICK_Config>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d10f      	bne.n	8001e3c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b0f      	cmp	r3, #15
 8001e20:	d809      	bhi.n	8001e36 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e22:	2200      	movs	r2, #0
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	f04f 30ff 	mov.w	r0, #4294967295
 8001e2a:	f001 fdd6 	bl	80039da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e2e:	4a0a      	ldr	r2, [pc, #40]	; (8001e58 <HAL_InitTick+0x70>)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6013      	str	r3, [r2, #0]
 8001e34:	e007      	b.n	8001e46 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	73fb      	strb	r3, [r7, #15]
 8001e3a:	e004      	b.n	8001e46 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	73fb      	strb	r3, [r7, #15]
 8001e40:	e001      	b.n	8001e46 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	20000864 	.word	0x20000864
 8001e54:	2000085c 	.word	0x2000085c
 8001e58:	20000860 	.word	0x20000860

08001e5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e60:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <HAL_IncTick+0x1c>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <HAL_IncTick+0x20>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4413      	add	r3, r2
 8001e6a:	4a03      	ldr	r2, [pc, #12]	; (8001e78 <HAL_IncTick+0x1c>)
 8001e6c:	6013      	str	r3, [r2, #0]
}
 8001e6e:	bf00      	nop
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	20001308 	.word	0x20001308
 8001e7c:	20000864 	.word	0x20000864

08001e80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  return uwTick;
 8001e84:	4b03      	ldr	r3, [pc, #12]	; (8001e94 <HAL_GetTick+0x14>)
 8001e86:	681b      	ldr	r3, [r3, #0]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	20001308 	.word	0x20001308

08001e98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ea0:	f7ff ffee 	bl	8001e80 <HAL_GetTick>
 8001ea4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb0:	d004      	beq.n	8001ebc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eb2:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <HAL_Delay+0x40>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	4413      	add	r3, r2
 8001eba:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ebc:	bf00      	nop
 8001ebe:	f7ff ffdf 	bl	8001e80 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d8f7      	bhi.n	8001ebe <HAL_Delay+0x26>
  {
  }
}
 8001ece:	bf00      	nop
 8001ed0:	bf00      	nop
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	20000864 	.word	0x20000864

08001edc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	609a      	str	r2, [r3, #8]
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
 8001f0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	431a      	orrs	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b087      	sub	sp, #28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
 8001f50:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	3360      	adds	r3, #96	; 0x60
 8001f56:	461a      	mov	r2, r3
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4413      	add	r3, r2
 8001f5e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <LL_ADC_SetOffset+0x44>)
 8001f66:	4013      	ands	r3, r2
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	4313      	orrs	r3, r2
 8001f74:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f7c:	bf00      	nop
 8001f7e:	371c      	adds	r7, #28
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	03fff000 	.word	0x03fff000

08001f8c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	3360      	adds	r3, #96	; 0x60
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3714      	adds	r7, #20
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b087      	sub	sp, #28
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	3360      	adds	r3, #96	; 0x60
 8001fc8:	461a      	mov	r2, r3
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	4413      	add	r3, r2
 8001fd0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001fe2:	bf00      	nop
 8001fe4:	371c      	adds	r7, #28
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b087      	sub	sp, #28
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	60f8      	str	r0, [r7, #12]
 8001ff6:	60b9      	str	r1, [r7, #8]
 8001ff8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	3360      	adds	r3, #96	; 0x60
 8001ffe:	461a      	mov	r2, r3
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	431a      	orrs	r2, r3
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002018:	bf00      	nop
 800201a:	371c      	adds	r7, #28
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002024:	b480      	push	{r7}
 8002026:	b087      	sub	sp, #28
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	3360      	adds	r3, #96	; 0x60
 8002034:	461a      	mov	r2, r3
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4413      	add	r3, r2
 800203c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	431a      	orrs	r2, r3
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800204e:	bf00      	nop
 8002050:	371c      	adds	r7, #28
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
 8002062:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	615a      	str	r2, [r3, #20]
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002094:	2301      	movs	r3, #1
 8002096:	e000      	b.n	800209a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80020a6:	b480      	push	{r7}
 80020a8:	b087      	sub	sp, #28
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	60f8      	str	r0, [r7, #12]
 80020ae:	60b9      	str	r1, [r7, #8]
 80020b0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	3330      	adds	r3, #48	; 0x30
 80020b6:	461a      	mov	r2, r3
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	0a1b      	lsrs	r3, r3, #8
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	f003 030c 	and.w	r3, r3, #12
 80020c2:	4413      	add	r3, r2
 80020c4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	f003 031f 	and.w	r3, r3, #31
 80020d0:	211f      	movs	r1, #31
 80020d2:	fa01 f303 	lsl.w	r3, r1, r3
 80020d6:	43db      	mvns	r3, r3
 80020d8:	401a      	ands	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	0e9b      	lsrs	r3, r3, #26
 80020de:	f003 011f 	and.w	r1, r3, #31
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	f003 031f 	and.w	r3, r3, #31
 80020e8:	fa01 f303 	lsl.w	r3, r1, r3
 80020ec:	431a      	orrs	r2, r3
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80020f2:	bf00      	nop
 80020f4:	371c      	adds	r7, #28
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80020fe:	b480      	push	{r7}
 8002100:	b083      	sub	sp, #12
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800210a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002112:	2301      	movs	r3, #1
 8002114:	e000      	b.n	8002118 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002124:	b480      	push	{r7}
 8002126:	b087      	sub	sp, #28
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	3314      	adds	r3, #20
 8002134:	461a      	mov	r2, r3
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	0e5b      	lsrs	r3, r3, #25
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	4413      	add	r3, r2
 8002142:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	0d1b      	lsrs	r3, r3, #20
 800214c:	f003 031f 	and.w	r3, r3, #31
 8002150:	2107      	movs	r1, #7
 8002152:	fa01 f303 	lsl.w	r3, r1, r3
 8002156:	43db      	mvns	r3, r3
 8002158:	401a      	ands	r2, r3
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	0d1b      	lsrs	r3, r3, #20
 800215e:	f003 031f 	and.w	r3, r3, #31
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	fa01 f303 	lsl.w	r3, r1, r3
 8002168:	431a      	orrs	r2, r3
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800216e:	bf00      	nop
 8002170:	371c      	adds	r7, #28
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
	...

0800217c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002194:	43db      	mvns	r3, r3
 8002196:	401a      	ands	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f003 0318 	and.w	r3, r3, #24
 800219e:	4908      	ldr	r1, [pc, #32]	; (80021c0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80021a0:	40d9      	lsrs	r1, r3
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	400b      	ands	r3, r1
 80021a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021aa:	431a      	orrs	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80021b2:	bf00      	nop
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	0007ffff 	.word	0x0007ffff

080021c4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f003 031f 	and.w	r3, r3, #31
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800220c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6093      	str	r3, [r2, #8]
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002230:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002234:	d101      	bne.n	800223a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002258:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800225c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002280:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002284:	d101      	bne.n	800228a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002286:	2301      	movs	r3, #1
 8002288:	e000      	b.n	800228c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022ac:	f043 0201 	orr.w	r2, r3, #1
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d101      	bne.n	80022d8 <LL_ADC_IsEnabled+0x18>
 80022d4:	2301      	movs	r3, #1
 80022d6:	e000      	b.n	80022da <LL_ADC_IsEnabled+0x1a>
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022f6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022fa:	f043 0204 	orr.w	r2, r3, #4
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 0304 	and.w	r3, r3, #4
 800231e:	2b04      	cmp	r3, #4
 8002320:	d101      	bne.n	8002326 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002322:	2301      	movs	r3, #1
 8002324:	e000      	b.n	8002328 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f003 0308 	and.w	r3, r3, #8
 8002344:	2b08      	cmp	r3, #8
 8002346:	d101      	bne.n	800234c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002348:	2301      	movs	r3, #1
 800234a:	e000      	b.n	800234e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
	...

0800235c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800235c:	b590      	push	{r4, r7, lr}
 800235e:	b089      	sub	sp, #36	; 0x24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002364:	2300      	movs	r3, #0
 8002366:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002368:	2300      	movs	r3, #0
 800236a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e167      	b.n	8002646 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002380:	2b00      	cmp	r3, #0
 8002382:	d109      	bne.n	8002398 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f7ff fb03 	bl	8001990 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff ff3f 	bl	8002220 <LL_ADC_IsDeepPowerDownEnabled>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d004      	beq.n	80023b2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff ff25 	bl	80021fc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff ff5a 	bl	8002270 <LL_ADC_IsInternalRegulatorEnabled>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d115      	bne.n	80023ee <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff ff3e 	bl	8002248 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023cc:	4ba0      	ldr	r3, [pc, #640]	; (8002650 <HAL_ADC_Init+0x2f4>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	099b      	lsrs	r3, r3, #6
 80023d2:	4aa0      	ldr	r2, [pc, #640]	; (8002654 <HAL_ADC_Init+0x2f8>)
 80023d4:	fba2 2303 	umull	r2, r3, r2, r3
 80023d8:	099b      	lsrs	r3, r3, #6
 80023da:	3301      	adds	r3, #1
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023e0:	e002      	b.n	80023e8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	3b01      	subs	r3, #1
 80023e6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f9      	bne.n	80023e2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff ff3c 	bl	8002270 <LL_ADC_IsInternalRegulatorEnabled>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10d      	bne.n	800241a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002402:	f043 0210 	orr.w	r2, r3, #16
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800240e:	f043 0201 	orr.w	r2, r3, #1
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff ff75 	bl	800230e <LL_ADC_REG_IsConversionOngoing>
 8002424:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800242a:	f003 0310 	and.w	r3, r3, #16
 800242e:	2b00      	cmp	r3, #0
 8002430:	f040 8100 	bne.w	8002634 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	2b00      	cmp	r3, #0
 8002438:	f040 80fc 	bne.w	8002634 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002440:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002444:	f043 0202 	orr.w	r2, r3, #2
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff ff35 	bl	80022c0 <LL_ADC_IsEnabled>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d111      	bne.n	8002480 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800245c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002460:	f7ff ff2e 	bl	80022c0 <LL_ADC_IsEnabled>
 8002464:	4604      	mov	r4, r0
 8002466:	487c      	ldr	r0, [pc, #496]	; (8002658 <HAL_ADC_Init+0x2fc>)
 8002468:	f7ff ff2a 	bl	80022c0 <LL_ADC_IsEnabled>
 800246c:	4603      	mov	r3, r0
 800246e:	4323      	orrs	r3, r4
 8002470:	2b00      	cmp	r3, #0
 8002472:	d105      	bne.n	8002480 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	4619      	mov	r1, r3
 800247a:	4878      	ldr	r0, [pc, #480]	; (800265c <HAL_ADC_Init+0x300>)
 800247c:	f7ff fd2e 	bl	8001edc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	7f5b      	ldrb	r3, [r3, #29]
 8002484:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800248a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002490:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002496:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800249e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024a0:	4313      	orrs	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d106      	bne.n	80024bc <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b2:	3b01      	subs	r3, #1
 80024b4:	045b      	lsls	r3, r3, #17
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d009      	beq.n	80024d8 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	4b60      	ldr	r3, [pc, #384]	; (8002660 <HAL_ADC_Init+0x304>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	6812      	ldr	r2, [r2, #0]
 80024e6:	69b9      	ldr	r1, [r7, #24]
 80024e8:	430b      	orrs	r3, r1
 80024ea:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff ff14 	bl	8002334 <LL_ADC_INJ_IsConversionOngoing>
 800250c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d16d      	bne.n	80025f0 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d16a      	bne.n	80025f0 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800251e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002526:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002528:	4313      	orrs	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002536:	f023 0302 	bic.w	r3, r3, #2
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	6812      	ldr	r2, [r2, #0]
 800253e:	69b9      	ldr	r1, [r7, #24]
 8002540:	430b      	orrs	r3, r1
 8002542:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d017      	beq.n	800257c <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	691a      	ldr	r2, [r3, #16]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800255a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002564:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002568:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6911      	ldr	r1, [r2, #16]
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	6812      	ldr	r2, [r2, #0]
 8002574:	430b      	orrs	r3, r1
 8002576:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800257a:	e013      	b.n	80025a4 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	691a      	ldr	r2, [r3, #16]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800258a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800259c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025a0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d118      	bne.n	80025e0 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80025b8:	f023 0304 	bic.w	r3, r3, #4
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80025c4:	4311      	orrs	r1, r2
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80025ca:	4311      	orrs	r1, r2
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80025d0:	430a      	orrs	r2, r1
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f042 0201 	orr.w	r2, r2, #1
 80025dc:	611a      	str	r2, [r3, #16]
 80025de:	e007      	b.n	80025f0 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	691a      	ldr	r2, [r3, #16]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 0201 	bic.w	r2, r2, #1
 80025ee:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	695b      	ldr	r3, [r3, #20]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d10c      	bne.n	8002612 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	f023 010f 	bic.w	r1, r3, #15
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	1e5a      	subs	r2, r3, #1
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	430a      	orrs	r2, r1
 800260e:	631a      	str	r2, [r3, #48]	; 0x30
 8002610:	e007      	b.n	8002622 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 020f 	bic.w	r2, r2, #15
 8002620:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002626:	f023 0303 	bic.w	r3, r3, #3
 800262a:	f043 0201 	orr.w	r2, r3, #1
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	65da      	str	r2, [r3, #92]	; 0x5c
 8002632:	e007      	b.n	8002644 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002638:	f043 0210 	orr.w	r2, r3, #16
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002644:	7ffb      	ldrb	r3, [r7, #31]
}
 8002646:	4618      	mov	r0, r3
 8002648:	3724      	adds	r7, #36	; 0x24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd90      	pop	{r4, r7, pc}
 800264e:	bf00      	nop
 8002650:	2000085c 	.word	0x2000085c
 8002654:	053e2d63 	.word	0x053e2d63
 8002658:	50000100 	.word	0x50000100
 800265c:	50000300 	.word	0x50000300
 8002660:	fff04007 	.word	0xfff04007

08002664 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800266c:	4894      	ldr	r0, [pc, #592]	; (80028c0 <HAL_ADC_Start_IT+0x25c>)
 800266e:	f7ff fda9 	bl	80021c4 <LL_ADC_GetMultimode>
 8002672:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff fe48 	bl	800230e <LL_ADC_REG_IsConversionOngoing>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	f040 8114 	bne.w	80028ae <HAL_ADC_Start_IT+0x24a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800268c:	2b01      	cmp	r3, #1
 800268e:	d101      	bne.n	8002694 <HAL_ADC_Start_IT+0x30>
 8002690:	2302      	movs	r3, #2
 8002692:	e111      	b.n	80028b8 <HAL_ADC_Start_IT+0x254>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 ff3f 	bl	8003520 <ADC_Enable>
 80026a2:	4603      	mov	r3, r0
 80026a4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80026a6:	7dfb      	ldrb	r3, [r7, #23]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f040 80fb 	bne.w	80028a4 <HAL_ADC_Start_IT+0x240>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026b6:	f023 0301 	bic.w	r3, r3, #1
 80026ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a7f      	ldr	r2, [pc, #508]	; (80028c4 <HAL_ADC_Start_IT+0x260>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d002      	beq.n	80026d2 <HAL_ADC_Start_IT+0x6e>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	e001      	b.n	80026d6 <HAL_ADC_Start_IT+0x72>
 80026d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	6812      	ldr	r2, [r2, #0]
 80026da:	4293      	cmp	r3, r2
 80026dc:	d002      	beq.n	80026e4 <HAL_ADC_Start_IT+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d105      	bne.n	80026f0 <HAL_ADC_Start_IT+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d006      	beq.n	800270a <HAL_ADC_Start_IT+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002700:	f023 0206 	bic.w	r2, r3, #6
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	661a      	str	r2, [r3, #96]	; 0x60
 8002708:	e002      	b.n	8002710 <HAL_ADC_Start_IT+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	221c      	movs	r2, #28
 8002716:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	685a      	ldr	r2, [r3, #4]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f022 021c 	bic.w	r2, r2, #28
 800272e:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	2b08      	cmp	r3, #8
 8002736:	d108      	bne.n	800274a <HAL_ADC_Start_IT+0xe6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f042 0208 	orr.w	r2, r2, #8
 8002746:	605a      	str	r2, [r3, #4]
          break;
 8002748:	e008      	b.n	800275c <HAL_ADC_Start_IT+0xf8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f042 0204 	orr.w	r2, r2, #4
 8002758:	605a      	str	r2, [r3, #4]
          break;
 800275a:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002760:	2b00      	cmp	r3, #0
 8002762:	d107      	bne.n	8002774 <HAL_ADC_Start_IT+0x110>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 0210 	orr.w	r2, r2, #16
 8002772:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a52      	ldr	r2, [pc, #328]	; (80028c4 <HAL_ADC_Start_IT+0x260>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d002      	beq.n	8002784 <HAL_ADC_Start_IT+0x120>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	e001      	b.n	8002788 <HAL_ADC_Start_IT+0x124>
 8002784:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	6812      	ldr	r2, [r2, #0]
 800278c:	4293      	cmp	r3, r2
 800278e:	d008      	beq.n	80027a2 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d005      	beq.n	80027a2 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	2b05      	cmp	r3, #5
 800279a:	d002      	beq.n	80027a2 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	2b09      	cmp	r3, #9
 80027a0:	d13b      	bne.n	800281a <HAL_ADC_Start_IT+0x1b6>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d02d      	beq.n	800280c <HAL_ADC_Start_IT+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027b8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	2b08      	cmp	r3, #8
 80027c6:	d110      	bne.n	80027ea <HAL_ADC_Start_IT+0x186>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 0220 	bic.w	r2, r2, #32
 80027d6:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	685a      	ldr	r2, [r3, #4]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027e6:	605a      	str	r2, [r3, #4]
              break;
 80027e8:	e011      	b.n	800280e <HAL_ADC_Start_IT+0x1aa>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	685a      	ldr	r2, [r3, #4]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027f8:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f042 0220 	orr.w	r2, r2, #32
 8002808:	605a      	str	r2, [r3, #4]
              break;
 800280a:	e000      	b.n	800280e <HAL_ADC_Start_IT+0x1aa>
          }
        }
 800280c:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff fd67 	bl	80022e6 <LL_ADC_REG_StartConversion>
 8002818:	e04d      	b.n	80028b6 <HAL_ADC_Start_IT+0x252>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a26      	ldr	r2, [pc, #152]	; (80028c4 <HAL_ADC_Start_IT+0x260>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d002      	beq.n	8002836 <HAL_ADC_Start_IT+0x1d2>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	e001      	b.n	800283a <HAL_ADC_Start_IT+0x1d6>
 8002836:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800283a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d035      	beq.n	80028b4 <HAL_ADC_Start_IT+0x250>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800284c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002850:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	2b08      	cmp	r3, #8
 800285e:	d110      	bne.n	8002882 <HAL_ADC_Start_IT+0x21e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0220 	bic.w	r2, r2, #32
 800286e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800287e:	605a      	str	r2, [r3, #4]
              break;
 8002880:	e019      	b.n	80028b6 <HAL_ADC_Start_IT+0x252>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002890:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f042 0220 	orr.w	r2, r2, #32
 80028a0:	605a      	str	r2, [r3, #4]
              break;
 80028a2:	e008      	b.n	80028b6 <HAL_ADC_Start_IT+0x252>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80028ac:	e003      	b.n	80028b6 <HAL_ADC_Start_IT+0x252>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80028ae:	2302      	movs	r3, #2
 80028b0:	75fb      	strb	r3, [r7, #23]
 80028b2:	e000      	b.n	80028b6 <HAL_ADC_Start_IT+0x252>
        }
 80028b4:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 80028b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3718      	adds	r7, #24
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	50000300 	.word	0x50000300
 80028c4:	50000100 	.word	0x50000100

080028c8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
	...

080028e4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b08a      	sub	sp, #40	; 0x28
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80028ec:	2300      	movs	r3, #0
 80028ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002900:	4883      	ldr	r0, [pc, #524]	; (8002b10 <HAL_ADC_IRQHandler+0x22c>)
 8002902:	f7ff fc5f 	bl	80021c4 <LL_ADC_GetMultimode>
 8002906:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d017      	beq.n	8002942 <HAL_ADC_IRQHandler+0x5e>
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d012      	beq.n	8002942 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002920:	f003 0310 	and.w	r3, r3, #16
 8002924:	2b00      	cmp	r3, #0
 8002926:	d105      	bne.n	8002934 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800292c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 fec7 	bl	80036c8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2202      	movs	r2, #2
 8002940:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	2b00      	cmp	r3, #0
 800294a:	d004      	beq.n	8002956 <HAL_ADC_IRQHandler+0x72>
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10a      	bne.n	800296c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800295c:	2b00      	cmp	r3, #0
 800295e:	f000 8085 	beq.w	8002a6c <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	f003 0308 	and.w	r3, r3, #8
 8002968:	2b00      	cmp	r3, #0
 800296a:	d07f      	beq.n	8002a6c <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002970:	f003 0310 	and.w	r3, r3, #16
 8002974:	2b00      	cmp	r3, #0
 8002976:	d105      	bne.n	8002984 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff fb79 	bl	8002080 <LL_ADC_REG_IsTriggerSourceSWStart>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d064      	beq.n	8002a5e <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a5e      	ldr	r2, [pc, #376]	; (8002b14 <HAL_ADC_IRQHandler+0x230>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d002      	beq.n	80029a4 <HAL_ADC_IRQHandler+0xc0>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	e001      	b.n	80029a8 <HAL_ADC_IRQHandler+0xc4>
 80029a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	6812      	ldr	r2, [r2, #0]
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d008      	beq.n	80029c2 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d005      	beq.n	80029c2 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	2b05      	cmp	r3, #5
 80029ba:	d002      	beq.n	80029c2 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	2b09      	cmp	r3, #9
 80029c0:	d104      	bne.n	80029cc <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	623b      	str	r3, [r7, #32]
 80029ca:	e00d      	b.n	80029e8 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a50      	ldr	r2, [pc, #320]	; (8002b14 <HAL_ADC_IRQHandler+0x230>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d002      	beq.n	80029dc <HAL_ADC_IRQHandler+0xf8>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	e001      	b.n	80029e0 <HAL_ADC_IRQHandler+0xfc>
 80029dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80029e0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80029e8:	6a3b      	ldr	r3, [r7, #32]
 80029ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d135      	bne.n	8002a5e <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	2b08      	cmp	r3, #8
 80029fe:	d12e      	bne.n	8002a5e <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff fc82 	bl	800230e <LL_ADC_REG_IsConversionOngoing>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d11a      	bne.n	8002a46 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 020c 	bic.w	r2, r2, #12
 8002a1e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d112      	bne.n	8002a5e <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3c:	f043 0201 	orr.w	r2, r3, #1
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a44:	e00b      	b.n	8002a5e <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4a:	f043 0210 	orr.w	r2, r3, #16
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a56:	f043 0201 	orr.w	r2, r3, #1
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7fe f8e2 	bl	8000c28 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	220c      	movs	r2, #12
 8002a6a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	f003 0320 	and.w	r3, r3, #32
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d004      	beq.n	8002a80 <HAL_ADC_IRQHandler+0x19c>
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	f003 0320 	and.w	r3, r3, #32
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d10b      	bne.n	8002a98 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 809e 	beq.w	8002bc8 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 8098 	beq.w	8002bc8 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a9c:	f003 0310 	and.w	r3, r3, #16
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d105      	bne.n	8002ab0 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff fb22 	bl	80020fe <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002aba:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff fadd 	bl	8002080 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ac6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a11      	ldr	r2, [pc, #68]	; (8002b14 <HAL_ADC_IRQHandler+0x230>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d002      	beq.n	8002ad8 <HAL_ADC_IRQHandler+0x1f4>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	e001      	b.n	8002adc <HAL_ADC_IRQHandler+0x1f8>
 8002ad8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	6812      	ldr	r2, [r2, #0]
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d008      	beq.n	8002af6 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d005      	beq.n	8002af6 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	2b06      	cmp	r3, #6
 8002aee:	d002      	beq.n	8002af6 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	2b07      	cmp	r3, #7
 8002af4:	d104      	bne.n	8002b00 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	623b      	str	r3, [r7, #32]
 8002afe:	e011      	b.n	8002b24 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a03      	ldr	r2, [pc, #12]	; (8002b14 <HAL_ADC_IRQHandler+0x230>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d006      	beq.n	8002b18 <HAL_ADC_IRQHandler+0x234>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	e005      	b.n	8002b1c <HAL_ADC_IRQHandler+0x238>
 8002b10:	50000300 	.word	0x50000300
 8002b14:	50000100 	.word	0x50000100
 8002b18:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b1c:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d047      	beq.n	8002bba <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002b2a:	6a3b      	ldr	r3, [r7, #32]
 8002b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d007      	beq.n	8002b44 <HAL_ADC_IRQHandler+0x260>
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d03f      	beq.n	8002bba <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002b3a:	6a3b      	ldr	r3, [r7, #32]
 8002b3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d13a      	bne.n	8002bba <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b4e:	2b40      	cmp	r3, #64	; 0x40
 8002b50:	d133      	bne.n	8002bba <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002b52:	6a3b      	ldr	r3, [r7, #32]
 8002b54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d12e      	bne.n	8002bba <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff fbe7 	bl	8002334 <LL_ADC_INJ_IsConversionOngoing>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d11a      	bne.n	8002ba2 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	685a      	ldr	r2, [r3, #4]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b7a:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b80:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d112      	bne.n	8002bba <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b98:	f043 0201 	orr.w	r2, r3, #1
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ba0:	e00b      	b.n	8002bba <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba6:	f043 0210 	orr.w	r2, r3, #16
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bb2:	f043 0201 	orr.w	r2, r3, #1
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 fd5c 	bl	8003678 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2260      	movs	r2, #96	; 0x60
 8002bc6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d011      	beq.n	8002bf6 <HAL_ADC_IRQHandler+0x312>
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00c      	beq.n	8002bf6 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 f895 	bl	8002d18 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2280      	movs	r2, #128	; 0x80
 8002bf4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d012      	beq.n	8002c26 <HAL_ADC_IRQHandler+0x342>
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00d      	beq.n	8002c26 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 fd42 	bl	80036a0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c24:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d012      	beq.n	8002c56 <HAL_ADC_IRQHandler+0x372>
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00d      	beq.n	8002c56 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c3e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 fd34 	bl	80036b4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c54:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	f003 0310 	and.w	r3, r3, #16
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d036      	beq.n	8002cce <HAL_ADC_IRQHandler+0x3ea>
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	f003 0310 	and.w	r3, r3, #16
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d031      	beq.n	8002cce <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d102      	bne.n	8002c78 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8002c72:	2301      	movs	r3, #1
 8002c74:	627b      	str	r3, [r7, #36]	; 0x24
 8002c76:	e014      	b.n	8002ca2 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d008      	beq.n	8002c90 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002c7e:	4825      	ldr	r0, [pc, #148]	; (8002d14 <HAL_ADC_IRQHandler+0x430>)
 8002c80:	f7ff faae 	bl	80021e0 <LL_ADC_GetMultiDMATransfer>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00b      	beq.n	8002ca2 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c8e:	e008      	b.n	8002ca2 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d10e      	bne.n	8002cc6 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cb8:	f043 0202 	orr.w	r2, r3, #2
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 f833 	bl	8002d2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2210      	movs	r2, #16
 8002ccc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d018      	beq.n	8002d0a <HAL_ADC_IRQHandler+0x426>
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d013      	beq.n	8002d0a <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cf2:	f043 0208 	orr.w	r2, r3, #8
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d02:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 fcc1 	bl	800368c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002d0a:	bf00      	nop
 8002d0c:	3728      	adds	r7, #40	; 0x28
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	50000300 	.word	0x50000300

08002d18 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b0b6      	sub	sp, #216	; 0xd8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002d50:	2300      	movs	r3, #0
 8002d52:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d101      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x22>
 8002d5e:	2302      	movs	r3, #2
 8002d60:	e3c8      	b.n	80034f4 <HAL_ADC_ConfigChannel+0x7b4>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff facd 	bl	800230e <LL_ADC_REG_IsConversionOngoing>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f040 83ad 	bne.w	80034d6 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6818      	ldr	r0, [r3, #0]
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	6859      	ldr	r1, [r3, #4]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	461a      	mov	r2, r3
 8002d8a:	f7ff f98c 	bl	80020a6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff fabb 	bl	800230e <LL_ADC_REG_IsConversionOngoing>
 8002d98:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff fac7 	bl	8002334 <LL_ADC_INJ_IsConversionOngoing>
 8002da6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002daa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f040 81d9 	bne.w	8003166 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002db4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f040 81d4 	bne.w	8003166 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002dc6:	d10f      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6818      	ldr	r0, [r3, #0]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	f7ff f9a6 	bl	8002124 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff f93a 	bl	800205a <LL_ADC_SetSamplingTimeCommonConfig>
 8002de6:	e00e      	b.n	8002e06 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6818      	ldr	r0, [r3, #0]
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	6819      	ldr	r1, [r3, #0]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	461a      	mov	r2, r3
 8002df6:	f7ff f995 	bl	8002124 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2100      	movs	r1, #0
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff f92a 	bl	800205a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	695a      	ldr	r2, [r3, #20]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	08db      	lsrs	r3, r3, #3
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	2b04      	cmp	r3, #4
 8002e26:	d022      	beq.n	8002e6e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6818      	ldr	r0, [r3, #0]
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	6919      	ldr	r1, [r3, #16]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e38:	f7ff f884 	bl	8001f44 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6818      	ldr	r0, [r3, #0]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	6919      	ldr	r1, [r3, #16]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	461a      	mov	r2, r3
 8002e4a:	f7ff f8d0 	bl	8001fee <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6818      	ldr	r0, [r3, #0]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d102      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x124>
 8002e5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e62:	e000      	b.n	8002e66 <HAL_ADC_ConfigChannel+0x126>
 8002e64:	2300      	movs	r3, #0
 8002e66:	461a      	mov	r2, r3
 8002e68:	f7ff f8dc 	bl	8002024 <LL_ADC_SetOffsetSaturation>
 8002e6c:	e17b      	b.n	8003166 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2100      	movs	r1, #0
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff f889 	bl	8001f8c <LL_ADC_GetOffsetChannel>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10a      	bne.n	8002e9a <HAL_ADC_ConfigChannel+0x15a>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2100      	movs	r1, #0
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff f87e 	bl	8001f8c <LL_ADC_GetOffsetChannel>
 8002e90:	4603      	mov	r3, r0
 8002e92:	0e9b      	lsrs	r3, r3, #26
 8002e94:	f003 021f 	and.w	r2, r3, #31
 8002e98:	e01e      	b.n	8002ed8 <HAL_ADC_ConfigChannel+0x198>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff f873 	bl	8001f8c <LL_ADC_GetOffsetChannel>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002eb0:	fa93 f3a3 	rbit	r3, r3
 8002eb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002eb8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002ebc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ec0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002ec8:	2320      	movs	r3, #32
 8002eca:	e004      	b.n	8002ed6 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002ecc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ed0:	fab3 f383 	clz	r3, r3
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d105      	bne.n	8002ef0 <HAL_ADC_ConfigChannel+0x1b0>
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	0e9b      	lsrs	r3, r3, #26
 8002eea:	f003 031f 	and.w	r3, r3, #31
 8002eee:	e018      	b.n	8002f22 <HAL_ADC_ConfigChannel+0x1e2>
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002efc:	fa93 f3a3 	rbit	r3, r3
 8002f00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002f04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002f0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d101      	bne.n	8002f18 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002f14:	2320      	movs	r3, #32
 8002f16:	e004      	b.n	8002f22 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002f18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f1c:	fab3 f383 	clz	r3, r3
 8002f20:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d106      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff f842 	bl	8001fb8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2101      	movs	r1, #1
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff f826 	bl	8001f8c <LL_ADC_GetOffsetChannel>
 8002f40:	4603      	mov	r3, r0
 8002f42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10a      	bne.n	8002f60 <HAL_ADC_ConfigChannel+0x220>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2101      	movs	r1, #1
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7ff f81b 	bl	8001f8c <LL_ADC_GetOffsetChannel>
 8002f56:	4603      	mov	r3, r0
 8002f58:	0e9b      	lsrs	r3, r3, #26
 8002f5a:	f003 021f 	and.w	r2, r3, #31
 8002f5e:	e01e      	b.n	8002f9e <HAL_ADC_ConfigChannel+0x25e>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2101      	movs	r1, #1
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7ff f810 	bl	8001f8c <LL_ADC_GetOffsetChannel>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002f76:	fa93 f3a3 	rbit	r3, r3
 8002f7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002f7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002f86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002f8e:	2320      	movs	r3, #32
 8002f90:	e004      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002f92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f96:	fab3 f383 	clz	r3, r3
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d105      	bne.n	8002fb6 <HAL_ADC_ConfigChannel+0x276>
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	0e9b      	lsrs	r3, r3, #26
 8002fb0:	f003 031f 	and.w	r3, r3, #31
 8002fb4:	e018      	b.n	8002fe8 <HAL_ADC_ConfigChannel+0x2a8>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002fc2:	fa93 f3a3 	rbit	r3, r3
 8002fc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002fca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002fce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002fd2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002fda:	2320      	movs	r3, #32
 8002fdc:	e004      	b.n	8002fe8 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002fde:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002fe2:	fab3 f383 	clz	r3, r3
 8002fe6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d106      	bne.n	8002ffa <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7fe ffdf 	bl	8001fb8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2102      	movs	r1, #2
 8003000:	4618      	mov	r0, r3
 8003002:	f7fe ffc3 	bl	8001f8c <LL_ADC_GetOffsetChannel>
 8003006:	4603      	mov	r3, r0
 8003008:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10a      	bne.n	8003026 <HAL_ADC_ConfigChannel+0x2e6>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2102      	movs	r1, #2
 8003016:	4618      	mov	r0, r3
 8003018:	f7fe ffb8 	bl	8001f8c <LL_ADC_GetOffsetChannel>
 800301c:	4603      	mov	r3, r0
 800301e:	0e9b      	lsrs	r3, r3, #26
 8003020:	f003 021f 	and.w	r2, r3, #31
 8003024:	e01e      	b.n	8003064 <HAL_ADC_ConfigChannel+0x324>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2102      	movs	r1, #2
 800302c:	4618      	mov	r0, r3
 800302e:	f7fe ffad 	bl	8001f8c <LL_ADC_GetOffsetChannel>
 8003032:	4603      	mov	r3, r0
 8003034:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003038:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800303c:	fa93 f3a3 	rbit	r3, r3
 8003040:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003044:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003048:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800304c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003054:	2320      	movs	r3, #32
 8003056:	e004      	b.n	8003062 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003058:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800305c:	fab3 f383 	clz	r3, r3
 8003060:	b2db      	uxtb	r3, r3
 8003062:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800306c:	2b00      	cmp	r3, #0
 800306e:	d105      	bne.n	800307c <HAL_ADC_ConfigChannel+0x33c>
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	0e9b      	lsrs	r3, r3, #26
 8003076:	f003 031f 	and.w	r3, r3, #31
 800307a:	e016      	b.n	80030aa <HAL_ADC_ConfigChannel+0x36a>
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003084:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003088:	fa93 f3a3 	rbit	r3, r3
 800308c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800308e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003090:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003094:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 800309c:	2320      	movs	r3, #32
 800309e:	e004      	b.n	80030aa <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80030a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030a4:	fab3 f383 	clz	r3, r3
 80030a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d106      	bne.n	80030bc <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2200      	movs	r2, #0
 80030b4:	2102      	movs	r1, #2
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7fe ff7e 	bl	8001fb8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2103      	movs	r1, #3
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fe ff62 	bl	8001f8c <LL_ADC_GetOffsetChannel>
 80030c8:	4603      	mov	r3, r0
 80030ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10a      	bne.n	80030e8 <HAL_ADC_ConfigChannel+0x3a8>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2103      	movs	r1, #3
 80030d8:	4618      	mov	r0, r3
 80030da:	f7fe ff57 	bl	8001f8c <LL_ADC_GetOffsetChannel>
 80030de:	4603      	mov	r3, r0
 80030e0:	0e9b      	lsrs	r3, r3, #26
 80030e2:	f003 021f 	and.w	r2, r3, #31
 80030e6:	e017      	b.n	8003118 <HAL_ADC_ConfigChannel+0x3d8>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2103      	movs	r1, #3
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fe ff4c 	bl	8001f8c <LL_ADC_GetOffsetChannel>
 80030f4:	4603      	mov	r3, r0
 80030f6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030fa:	fa93 f3a3 	rbit	r3, r3
 80030fe:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003100:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003102:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003104:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800310a:	2320      	movs	r3, #32
 800310c:	e003      	b.n	8003116 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800310e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003110:	fab3 f383 	clz	r3, r3
 8003114:	b2db      	uxtb	r3, r3
 8003116:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003120:	2b00      	cmp	r3, #0
 8003122:	d105      	bne.n	8003130 <HAL_ADC_ConfigChannel+0x3f0>
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	0e9b      	lsrs	r3, r3, #26
 800312a:	f003 031f 	and.w	r3, r3, #31
 800312e:	e011      	b.n	8003154 <HAL_ADC_ConfigChannel+0x414>
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003136:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003138:	fa93 f3a3 	rbit	r3, r3
 800313c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800313e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003140:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003148:	2320      	movs	r3, #32
 800314a:	e003      	b.n	8003154 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 800314c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800314e:	fab3 f383 	clz	r3, r3
 8003152:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003154:	429a      	cmp	r2, r3
 8003156:	d106      	bne.n	8003166 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2200      	movs	r2, #0
 800315e:	2103      	movs	r1, #3
 8003160:	4618      	mov	r0, r3
 8003162:	f7fe ff29 	bl	8001fb8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff f8a8 	bl	80022c0 <LL_ADC_IsEnabled>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	f040 8140 	bne.w	80033f8 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6818      	ldr	r0, [r3, #0]
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	6819      	ldr	r1, [r3, #0]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	461a      	mov	r2, r3
 8003186:	f7fe fff9 	bl	800217c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	4a8f      	ldr	r2, [pc, #572]	; (80033cc <HAL_ADC_ConfigChannel+0x68c>)
 8003190:	4293      	cmp	r3, r2
 8003192:	f040 8131 	bne.w	80033f8 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10b      	bne.n	80031be <HAL_ADC_ConfigChannel+0x47e>
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	0e9b      	lsrs	r3, r3, #26
 80031ac:	3301      	adds	r3, #1
 80031ae:	f003 031f 	and.w	r3, r3, #31
 80031b2:	2b09      	cmp	r3, #9
 80031b4:	bf94      	ite	ls
 80031b6:	2301      	movls	r3, #1
 80031b8:	2300      	movhi	r3, #0
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	e019      	b.n	80031f2 <HAL_ADC_ConfigChannel+0x4b2>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031c6:	fa93 f3a3 	rbit	r3, r3
 80031ca:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80031cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031ce:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80031d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80031d6:	2320      	movs	r3, #32
 80031d8:	e003      	b.n	80031e2 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80031da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031dc:	fab3 f383 	clz	r3, r3
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	3301      	adds	r3, #1
 80031e4:	f003 031f 	and.w	r3, r3, #31
 80031e8:	2b09      	cmp	r3, #9
 80031ea:	bf94      	ite	ls
 80031ec:	2301      	movls	r3, #1
 80031ee:	2300      	movhi	r3, #0
 80031f0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d079      	beq.n	80032ea <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d107      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x4d2>
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	0e9b      	lsrs	r3, r3, #26
 8003208:	3301      	adds	r3, #1
 800320a:	069b      	lsls	r3, r3, #26
 800320c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003210:	e015      	b.n	800323e <HAL_ADC_ConfigChannel+0x4fe>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800321a:	fa93 f3a3 	rbit	r3, r3
 800321e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003222:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003224:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800322a:	2320      	movs	r3, #32
 800322c:	e003      	b.n	8003236 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800322e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003230:	fab3 f383 	clz	r3, r3
 8003234:	b2db      	uxtb	r3, r3
 8003236:	3301      	adds	r3, #1
 8003238:	069b      	lsls	r3, r3, #26
 800323a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003246:	2b00      	cmp	r3, #0
 8003248:	d109      	bne.n	800325e <HAL_ADC_ConfigChannel+0x51e>
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	0e9b      	lsrs	r3, r3, #26
 8003250:	3301      	adds	r3, #1
 8003252:	f003 031f 	and.w	r3, r3, #31
 8003256:	2101      	movs	r1, #1
 8003258:	fa01 f303 	lsl.w	r3, r1, r3
 800325c:	e017      	b.n	800328e <HAL_ADC_ConfigChannel+0x54e>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003264:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003266:	fa93 f3a3 	rbit	r3, r3
 800326a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800326c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800326e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003270:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003276:	2320      	movs	r3, #32
 8003278:	e003      	b.n	8003282 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800327a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800327c:	fab3 f383 	clz	r3, r3
 8003280:	b2db      	uxtb	r3, r3
 8003282:	3301      	adds	r3, #1
 8003284:	f003 031f 	and.w	r3, r3, #31
 8003288:	2101      	movs	r1, #1
 800328a:	fa01 f303 	lsl.w	r3, r1, r3
 800328e:	ea42 0103 	orr.w	r1, r2, r3
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10a      	bne.n	80032b4 <HAL_ADC_ConfigChannel+0x574>
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	0e9b      	lsrs	r3, r3, #26
 80032a4:	3301      	adds	r3, #1
 80032a6:	f003 021f 	and.w	r2, r3, #31
 80032aa:	4613      	mov	r3, r2
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	4413      	add	r3, r2
 80032b0:	051b      	lsls	r3, r3, #20
 80032b2:	e018      	b.n	80032e6 <HAL_ADC_ConfigChannel+0x5a6>
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032bc:	fa93 f3a3 	rbit	r3, r3
 80032c0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80032c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80032c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d101      	bne.n	80032d0 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80032cc:	2320      	movs	r3, #32
 80032ce:	e003      	b.n	80032d8 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80032d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032d2:	fab3 f383 	clz	r3, r3
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	3301      	adds	r3, #1
 80032da:	f003 021f 	and.w	r2, r3, #31
 80032de:	4613      	mov	r3, r2
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	4413      	add	r3, r2
 80032e4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032e6:	430b      	orrs	r3, r1
 80032e8:	e081      	b.n	80033ee <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d107      	bne.n	8003306 <HAL_ADC_ConfigChannel+0x5c6>
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	0e9b      	lsrs	r3, r3, #26
 80032fc:	3301      	adds	r3, #1
 80032fe:	069b      	lsls	r3, r3, #26
 8003300:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003304:	e015      	b.n	8003332 <HAL_ADC_ConfigChannel+0x5f2>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800330e:	fa93 f3a3 	rbit	r3, r3
 8003312:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003316:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800331e:	2320      	movs	r3, #32
 8003320:	e003      	b.n	800332a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003324:	fab3 f383 	clz	r3, r3
 8003328:	b2db      	uxtb	r3, r3
 800332a:	3301      	adds	r3, #1
 800332c:	069b      	lsls	r3, r3, #26
 800332e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800333a:	2b00      	cmp	r3, #0
 800333c:	d109      	bne.n	8003352 <HAL_ADC_ConfigChannel+0x612>
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	0e9b      	lsrs	r3, r3, #26
 8003344:	3301      	adds	r3, #1
 8003346:	f003 031f 	and.w	r3, r3, #31
 800334a:	2101      	movs	r1, #1
 800334c:	fa01 f303 	lsl.w	r3, r1, r3
 8003350:	e017      	b.n	8003382 <HAL_ADC_ConfigChannel+0x642>
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003358:	6a3b      	ldr	r3, [r7, #32]
 800335a:	fa93 f3a3 	rbit	r3, r3
 800335e:	61fb      	str	r3, [r7, #28]
  return result;
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800336a:	2320      	movs	r3, #32
 800336c:	e003      	b.n	8003376 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003370:	fab3 f383 	clz	r3, r3
 8003374:	b2db      	uxtb	r3, r3
 8003376:	3301      	adds	r3, #1
 8003378:	f003 031f 	and.w	r3, r3, #31
 800337c:	2101      	movs	r1, #1
 800337e:	fa01 f303 	lsl.w	r3, r1, r3
 8003382:	ea42 0103 	orr.w	r1, r2, r3
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10d      	bne.n	80033ae <HAL_ADC_ConfigChannel+0x66e>
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	0e9b      	lsrs	r3, r3, #26
 8003398:	3301      	adds	r3, #1
 800339a:	f003 021f 	and.w	r2, r3, #31
 800339e:	4613      	mov	r3, r2
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	4413      	add	r3, r2
 80033a4:	3b1e      	subs	r3, #30
 80033a6:	051b      	lsls	r3, r3, #20
 80033a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033ac:	e01e      	b.n	80033ec <HAL_ADC_ConfigChannel+0x6ac>
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	fa93 f3a3 	rbit	r3, r3
 80033ba:	613b      	str	r3, [r7, #16]
  return result;
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d104      	bne.n	80033d0 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80033c6:	2320      	movs	r3, #32
 80033c8:	e006      	b.n	80033d8 <HAL_ADC_ConfigChannel+0x698>
 80033ca:	bf00      	nop
 80033cc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	fab3 f383 	clz	r3, r3
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	3301      	adds	r3, #1
 80033da:	f003 021f 	and.w	r2, r3, #31
 80033de:	4613      	mov	r3, r2
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	4413      	add	r3, r2
 80033e4:	3b1e      	subs	r3, #30
 80033e6:	051b      	lsls	r3, r3, #20
 80033e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033ec:	430b      	orrs	r3, r1
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	6892      	ldr	r2, [r2, #8]
 80033f2:	4619      	mov	r1, r3
 80033f4:	f7fe fe96 	bl	8002124 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	4b3f      	ldr	r3, [pc, #252]	; (80034fc <HAL_ADC_ConfigChannel+0x7bc>)
 80033fe:	4013      	ands	r3, r2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d071      	beq.n	80034e8 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003404:	483e      	ldr	r0, [pc, #248]	; (8003500 <HAL_ADC_ConfigChannel+0x7c0>)
 8003406:	f7fe fd8f 	bl	8001f28 <LL_ADC_GetCommonPathInternalCh>
 800340a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a3c      	ldr	r2, [pc, #240]	; (8003504 <HAL_ADC_ConfigChannel+0x7c4>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d004      	beq.n	8003422 <HAL_ADC_ConfigChannel+0x6e2>
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a3a      	ldr	r2, [pc, #232]	; (8003508 <HAL_ADC_ConfigChannel+0x7c8>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d127      	bne.n	8003472 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003422:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003426:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d121      	bne.n	8003472 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003436:	d157      	bne.n	80034e8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003438:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800343c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003440:	4619      	mov	r1, r3
 8003442:	482f      	ldr	r0, [pc, #188]	; (8003500 <HAL_ADC_ConfigChannel+0x7c0>)
 8003444:	f7fe fd5d 	bl	8001f02 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003448:	4b30      	ldr	r3, [pc, #192]	; (800350c <HAL_ADC_ConfigChannel+0x7cc>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	099b      	lsrs	r3, r3, #6
 800344e:	4a30      	ldr	r2, [pc, #192]	; (8003510 <HAL_ADC_ConfigChannel+0x7d0>)
 8003450:	fba2 2303 	umull	r2, r3, r2, r3
 8003454:	099b      	lsrs	r3, r3, #6
 8003456:	1c5a      	adds	r2, r3, #1
 8003458:	4613      	mov	r3, r2
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	4413      	add	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003462:	e002      	b.n	800346a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	3b01      	subs	r3, #1
 8003468:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1f9      	bne.n	8003464 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003470:	e03a      	b.n	80034e8 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a27      	ldr	r2, [pc, #156]	; (8003514 <HAL_ADC_ConfigChannel+0x7d4>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d113      	bne.n	80034a4 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800347c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003480:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10d      	bne.n	80034a4 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a22      	ldr	r2, [pc, #136]	; (8003518 <HAL_ADC_ConfigChannel+0x7d8>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d02a      	beq.n	80034e8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003492:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003496:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800349a:	4619      	mov	r1, r3
 800349c:	4818      	ldr	r0, [pc, #96]	; (8003500 <HAL_ADC_ConfigChannel+0x7c0>)
 800349e:	f7fe fd30 	bl	8001f02 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034a2:	e021      	b.n	80034e8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a1c      	ldr	r2, [pc, #112]	; (800351c <HAL_ADC_ConfigChannel+0x7dc>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d11c      	bne.n	80034e8 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80034ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d116      	bne.n	80034e8 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a16      	ldr	r2, [pc, #88]	; (8003518 <HAL_ADC_ConfigChannel+0x7d8>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d011      	beq.n	80034e8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034cc:	4619      	mov	r1, r3
 80034ce:	480c      	ldr	r0, [pc, #48]	; (8003500 <HAL_ADC_ConfigChannel+0x7c0>)
 80034d0:	f7fe fd17 	bl	8001f02 <LL_ADC_SetCommonPathInternalCh>
 80034d4:	e008      	b.n	80034e8 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034da:	f043 0220 	orr.w	r2, r3, #32
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80034f0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	37d8      	adds	r7, #216	; 0xd8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	80080000 	.word	0x80080000
 8003500:	50000300 	.word	0x50000300
 8003504:	c3210000 	.word	0xc3210000
 8003508:	90c00010 	.word	0x90c00010
 800350c:	2000085c 	.word	0x2000085c
 8003510:	053e2d63 	.word	0x053e2d63
 8003514:	c7520000 	.word	0xc7520000
 8003518:	50000100 	.word	0x50000100
 800351c:	cb840000 	.word	0xcb840000

08003520 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003528:	2300      	movs	r3, #0
 800352a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4618      	mov	r0, r3
 8003532:	f7fe fec5 	bl	80022c0 <LL_ADC_IsEnabled>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d169      	bne.n	8003610 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689a      	ldr	r2, [r3, #8]
 8003542:	4b36      	ldr	r3, [pc, #216]	; (800361c <ADC_Enable+0xfc>)
 8003544:	4013      	ands	r3, r2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00d      	beq.n	8003566 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800354e:	f043 0210 	orr.w	r2, r3, #16
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800355a:	f043 0201 	orr.w	r2, r3, #1
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e055      	b.n	8003612 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f7fe fe94 	bl	8002298 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003570:	482b      	ldr	r0, [pc, #172]	; (8003620 <ADC_Enable+0x100>)
 8003572:	f7fe fcd9 	bl	8001f28 <LL_ADC_GetCommonPathInternalCh>
 8003576:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003578:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800357c:	2b00      	cmp	r3, #0
 800357e:	d013      	beq.n	80035a8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003580:	4b28      	ldr	r3, [pc, #160]	; (8003624 <ADC_Enable+0x104>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	099b      	lsrs	r3, r3, #6
 8003586:	4a28      	ldr	r2, [pc, #160]	; (8003628 <ADC_Enable+0x108>)
 8003588:	fba2 2303 	umull	r2, r3, r2, r3
 800358c:	099b      	lsrs	r3, r3, #6
 800358e:	1c5a      	adds	r2, r3, #1
 8003590:	4613      	mov	r3, r2
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	4413      	add	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800359a:	e002      	b.n	80035a2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	3b01      	subs	r3, #1
 80035a0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1f9      	bne.n	800359c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80035a8:	f7fe fc6a 	bl	8001e80 <HAL_GetTick>
 80035ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035ae:	e028      	b.n	8003602 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7fe fe83 	bl	80022c0 <LL_ADC_IsEnabled>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d104      	bne.n	80035ca <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7fe fe67 	bl	8002298 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035ca:	f7fe fc59 	bl	8001e80 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d914      	bls.n	8003602 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d00d      	beq.n	8003602 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ea:	f043 0210 	orr.w	r2, r3, #16
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035f6:	f043 0201 	orr.w	r2, r3, #1
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e007      	b.n	8003612 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b01      	cmp	r3, #1
 800360e:	d1cf      	bne.n	80035b0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	8000003f 	.word	0x8000003f
 8003620:	50000300 	.word	0x50000300
 8003624:	2000085c 	.word	0x2000085c
 8003628:	053e2d63 	.word	0x053e2d63

0800362c <LL_ADC_IsEnabled>:
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b01      	cmp	r3, #1
 800363e:	d101      	bne.n	8003644 <LL_ADC_IsEnabled+0x18>
 8003640:	2301      	movs	r3, #1
 8003642:	e000      	b.n	8003646 <LL_ADC_IsEnabled+0x1a>
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <LL_ADC_REG_IsConversionOngoing>:
{
 8003652:	b480      	push	{r7}
 8003654:	b083      	sub	sp, #12
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 0304 	and.w	r3, r3, #4
 8003662:	2b04      	cmp	r3, #4
 8003664:	d101      	bne.n	800366a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003666:	2301      	movs	r3, #1
 8003668:	e000      	b.n	800366c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80036dc:	b590      	push	{r4, r7, lr}
 80036de:	b0a1      	sub	sp, #132	; 0x84
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036e6:	2300      	movs	r3, #0
 80036e8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d101      	bne.n	80036fa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80036f6:	2302      	movs	r3, #2
 80036f8:	e08b      	b.n	8003812 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003702:	2300      	movs	r3, #0
 8003704:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003706:	2300      	movs	r3, #0
 8003708:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003712:	d102      	bne.n	800371a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003714:	4b41      	ldr	r3, [pc, #260]	; (800381c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003716:	60bb      	str	r3, [r7, #8]
 8003718:	e001      	b.n	800371e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800371a:	2300      	movs	r3, #0
 800371c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10b      	bne.n	800373c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003728:	f043 0220 	orr.w	r2, r3, #32
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e06a      	b.n	8003812 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	4618      	mov	r0, r3
 8003740:	f7ff ff87 	bl	8003652 <LL_ADC_REG_IsConversionOngoing>
 8003744:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f7ff ff81 	bl	8003652 <LL_ADC_REG_IsConversionOngoing>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d14c      	bne.n	80037f0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003756:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003758:	2b00      	cmp	r3, #0
 800375a:	d149      	bne.n	80037f0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800375c:	4b30      	ldr	r3, [pc, #192]	; (8003820 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800375e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d028      	beq.n	80037ba <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003768:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	6859      	ldr	r1, [r3, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800377a:	035b      	lsls	r3, r3, #13
 800377c:	430b      	orrs	r3, r1
 800377e:	431a      	orrs	r2, r3
 8003780:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003782:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003784:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003788:	f7ff ff50 	bl	800362c <LL_ADC_IsEnabled>
 800378c:	4604      	mov	r4, r0
 800378e:	4823      	ldr	r0, [pc, #140]	; (800381c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003790:	f7ff ff4c 	bl	800362c <LL_ADC_IsEnabled>
 8003794:	4603      	mov	r3, r0
 8003796:	4323      	orrs	r3, r4
 8003798:	2b00      	cmp	r3, #0
 800379a:	d133      	bne.n	8003804 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800379c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80037a4:	f023 030f 	bic.w	r3, r3, #15
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	6811      	ldr	r1, [r2, #0]
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	6892      	ldr	r2, [r2, #8]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	431a      	orrs	r2, r3
 80037b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037b6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80037b8:	e024      	b.n	8003804 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80037ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037c4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037c6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80037ca:	f7ff ff2f 	bl	800362c <LL_ADC_IsEnabled>
 80037ce:	4604      	mov	r4, r0
 80037d0:	4812      	ldr	r0, [pc, #72]	; (800381c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80037d2:	f7ff ff2b 	bl	800362c <LL_ADC_IsEnabled>
 80037d6:	4603      	mov	r3, r0
 80037d8:	4323      	orrs	r3, r4
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d112      	bne.n	8003804 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80037de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80037e6:	f023 030f 	bic.w	r3, r3, #15
 80037ea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80037ec:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80037ee:	e009      	b.n	8003804 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f4:	f043 0220 	orr.w	r2, r3, #32
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003802:	e000      	b.n	8003806 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003804:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800380e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003812:	4618      	mov	r0, r3
 8003814:	3784      	adds	r7, #132	; 0x84
 8003816:	46bd      	mov	sp, r7
 8003818:	bd90      	pop	{r4, r7, pc}
 800381a:	bf00      	nop
 800381c:	50000100 	.word	0x50000100
 8003820:	50000300 	.word	0x50000300

08003824 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003834:	4b0c      	ldr	r3, [pc, #48]	; (8003868 <__NVIC_SetPriorityGrouping+0x44>)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003840:	4013      	ands	r3, r2
 8003842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800384c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003856:	4a04      	ldr	r2, [pc, #16]	; (8003868 <__NVIC_SetPriorityGrouping+0x44>)
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	60d3      	str	r3, [r2, #12]
}
 800385c:	bf00      	nop
 800385e:	3714      	adds	r7, #20
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr
 8003868:	e000ed00 	.word	0xe000ed00

0800386c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003870:	4b04      	ldr	r3, [pc, #16]	; (8003884 <__NVIC_GetPriorityGrouping+0x18>)
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	0a1b      	lsrs	r3, r3, #8
 8003876:	f003 0307 	and.w	r3, r3, #7
}
 800387a:	4618      	mov	r0, r3
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	e000ed00 	.word	0xe000ed00

08003888 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	4603      	mov	r3, r0
 8003890:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003896:	2b00      	cmp	r3, #0
 8003898:	db0b      	blt.n	80038b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800389a:	79fb      	ldrb	r3, [r7, #7]
 800389c:	f003 021f 	and.w	r2, r3, #31
 80038a0:	4907      	ldr	r1, [pc, #28]	; (80038c0 <__NVIC_EnableIRQ+0x38>)
 80038a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a6:	095b      	lsrs	r3, r3, #5
 80038a8:	2001      	movs	r0, #1
 80038aa:	fa00 f202 	lsl.w	r2, r0, r2
 80038ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038b2:	bf00      	nop
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	e000e100 	.word	0xe000e100

080038c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	4603      	mov	r3, r0
 80038cc:	6039      	str	r1, [r7, #0]
 80038ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	db0a      	blt.n	80038ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	b2da      	uxtb	r2, r3
 80038dc:	490c      	ldr	r1, [pc, #48]	; (8003910 <__NVIC_SetPriority+0x4c>)
 80038de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e2:	0112      	lsls	r2, r2, #4
 80038e4:	b2d2      	uxtb	r2, r2
 80038e6:	440b      	add	r3, r1
 80038e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038ec:	e00a      	b.n	8003904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	4908      	ldr	r1, [pc, #32]	; (8003914 <__NVIC_SetPriority+0x50>)
 80038f4:	79fb      	ldrb	r3, [r7, #7]
 80038f6:	f003 030f 	and.w	r3, r3, #15
 80038fa:	3b04      	subs	r3, #4
 80038fc:	0112      	lsls	r2, r2, #4
 80038fe:	b2d2      	uxtb	r2, r2
 8003900:	440b      	add	r3, r1
 8003902:	761a      	strb	r2, [r3, #24]
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	e000e100 	.word	0xe000e100
 8003914:	e000ed00 	.word	0xe000ed00

08003918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003918:	b480      	push	{r7}
 800391a:	b089      	sub	sp, #36	; 0x24
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f003 0307 	and.w	r3, r3, #7
 800392a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f1c3 0307 	rsb	r3, r3, #7
 8003932:	2b04      	cmp	r3, #4
 8003934:	bf28      	it	cs
 8003936:	2304      	movcs	r3, #4
 8003938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	3304      	adds	r3, #4
 800393e:	2b06      	cmp	r3, #6
 8003940:	d902      	bls.n	8003948 <NVIC_EncodePriority+0x30>
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	3b03      	subs	r3, #3
 8003946:	e000      	b.n	800394a <NVIC_EncodePriority+0x32>
 8003948:	2300      	movs	r3, #0
 800394a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800394c:	f04f 32ff 	mov.w	r2, #4294967295
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	43da      	mvns	r2, r3
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	401a      	ands	r2, r3
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003960:	f04f 31ff 	mov.w	r1, #4294967295
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	fa01 f303 	lsl.w	r3, r1, r3
 800396a:	43d9      	mvns	r1, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003970:	4313      	orrs	r3, r2
         );
}
 8003972:	4618      	mov	r0, r3
 8003974:	3724      	adds	r7, #36	; 0x24
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
	...

08003980 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3b01      	subs	r3, #1
 800398c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003990:	d301      	bcc.n	8003996 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003992:	2301      	movs	r3, #1
 8003994:	e00f      	b.n	80039b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003996:	4a0a      	ldr	r2, [pc, #40]	; (80039c0 <SysTick_Config+0x40>)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	3b01      	subs	r3, #1
 800399c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800399e:	210f      	movs	r1, #15
 80039a0:	f04f 30ff 	mov.w	r0, #4294967295
 80039a4:	f7ff ff8e 	bl	80038c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039a8:	4b05      	ldr	r3, [pc, #20]	; (80039c0 <SysTick_Config+0x40>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039ae:	4b04      	ldr	r3, [pc, #16]	; (80039c0 <SysTick_Config+0x40>)
 80039b0:	2207      	movs	r2, #7
 80039b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	e000e010 	.word	0xe000e010

080039c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f7ff ff29 	bl	8003824 <__NVIC_SetPriorityGrouping>
}
 80039d2:	bf00      	nop
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b086      	sub	sp, #24
 80039de:	af00      	add	r7, sp, #0
 80039e0:	4603      	mov	r3, r0
 80039e2:	60b9      	str	r1, [r7, #8]
 80039e4:	607a      	str	r2, [r7, #4]
 80039e6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80039e8:	f7ff ff40 	bl	800386c <__NVIC_GetPriorityGrouping>
 80039ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	68b9      	ldr	r1, [r7, #8]
 80039f2:	6978      	ldr	r0, [r7, #20]
 80039f4:	f7ff ff90 	bl	8003918 <NVIC_EncodePriority>
 80039f8:	4602      	mov	r2, r0
 80039fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039fe:	4611      	mov	r1, r2
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7ff ff5f 	bl	80038c4 <__NVIC_SetPriority>
}
 8003a06:	bf00      	nop
 8003a08:	3718      	adds	r7, #24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b082      	sub	sp, #8
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	4603      	mov	r3, r0
 8003a16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff ff33 	bl	8003888 <__NVIC_EnableIRQ>
}
 8003a22:	bf00      	nop
 8003a24:	3708      	adds	r7, #8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b082      	sub	sp, #8
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7ff ffa4 	bl	8003980 <SysTick_Config>
 8003a38:	4603      	mov	r3, r0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b082      	sub	sp, #8
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d101      	bne.n	8003a54 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e014      	b.n	8003a7e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	791b      	ldrb	r3, [r3, #4]
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d105      	bne.n	8003a6a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f7fd ffef 	bl	8001a48 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2202      	movs	r2, #2
 8003a6e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
	...

08003a88 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b08a      	sub	sp, #40	; 0x28
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a94:	2300      	movs	r3, #0
 8003a96:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d002      	beq.n	8003aa4 <HAL_DAC_ConfigChannel+0x1c>
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d101      	bne.n	8003aa8 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e19e      	b.n	8003de6 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	795b      	ldrb	r3, [r3, #5]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d101      	bne.n	8003ab4 <HAL_DAC_ConfigChannel+0x2c>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	e198      	b.n	8003de6 <HAL_DAC_ConfigChannel+0x35e>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2202      	movs	r2, #2
 8003abe:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	2b04      	cmp	r3, #4
 8003ac6:	d17a      	bne.n	8003bbe <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003ac8:	f7fe f9da 	bl	8001e80 <HAL_GetTick>
 8003acc:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d13d      	bne.n	8003b50 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003ad4:	e018      	b.n	8003b08 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003ad6:	f7fe f9d3 	bl	8001e80 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d911      	bls.n	8003b08 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00a      	beq.n	8003b08 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	f043 0208 	orr.w	r2, r3, #8
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2203      	movs	r2, #3
 8003b02:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e16e      	b.n	8003de6 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1df      	bne.n	8003ad6 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b1e:	641a      	str	r2, [r3, #64]	; 0x40
 8003b20:	e020      	b.n	8003b64 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003b22:	f7fe f9ad 	bl	8001e80 <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d90f      	bls.n	8003b50 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	da0a      	bge.n	8003b50 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	f043 0208 	orr.w	r2, r3, #8
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2203      	movs	r2, #3
 8003b4a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e14a      	b.n	8003de6 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	dbe3      	blt.n	8003b22 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68ba      	ldr	r2, [r7, #8]
 8003b60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b62:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f003 0310 	and.w	r3, r3, #16
 8003b70:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003b74:	fa01 f303 	lsl.w	r3, r1, r3
 8003b78:	43db      	mvns	r3, r3
 8003b7a:	ea02 0103 	and.w	r1, r2, r3
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f003 0310 	and.w	r3, r3, #16
 8003b88:	409a      	lsls	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f003 0310 	and.w	r3, r3, #16
 8003b9e:	21ff      	movs	r1, #255	; 0xff
 8003ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba4:	43db      	mvns	r3, r3
 8003ba6:	ea02 0103 	and.w	r1, r2, r3
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f003 0310 	and.w	r3, r3, #16
 8003bb4:	409a      	lsls	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d11d      	bne.n	8003c02 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bcc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f003 0310 	and.w	r3, r3, #16
 8003bd4:	221f      	movs	r2, #31
 8003bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bda:	43db      	mvns	r3, r3
 8003bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bde:	4013      	ands	r3, r2
 8003be0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f003 0310 	and.w	r3, r3, #16
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c00:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c08:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f003 0310 	and.w	r3, r3, #16
 8003c10:	2207      	movs	r2, #7
 8003c12:	fa02 f303 	lsl.w	r3, r2, r3
 8003c16:	43db      	mvns	r3, r3
 8003c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d102      	bne.n	8003c2c <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8003c26:	2300      	movs	r3, #0
 8003c28:	623b      	str	r3, [r7, #32]
 8003c2a:	e00f      	b.n	8003c4c <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d102      	bne.n	8003c3a <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003c34:	2301      	movs	r3, #1
 8003c36:	623b      	str	r3, [r7, #32]
 8003c38:	e008      	b.n	8003c4c <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d102      	bne.n	8003c48 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003c42:	2301      	movs	r3, #1
 8003c44:	623b      	str	r3, [r7, #32]
 8003c46:	e001      	b.n	8003c4c <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	6a3a      	ldr	r2, [r7, #32]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f003 0310 	and.w	r3, r3, #16
 8003c62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c66:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6a:	43db      	mvns	r3, r3
 8003c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c6e:	4013      	ands	r3, r2
 8003c70:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	791b      	ldrb	r3, [r3, #4]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d102      	bne.n	8003c80 <HAL_DAC_ConfigChannel+0x1f8>
 8003c7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c7e:	e000      	b.n	8003c82 <HAL_DAC_ConfigChannel+0x1fa>
 8003c80:	2300      	movs	r3, #0
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f003 0310 	and.w	r3, r3, #16
 8003c8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c92:	fa02 f303 	lsl.w	r3, r2, r3
 8003c96:	43db      	mvns	r3, r3
 8003c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	795b      	ldrb	r3, [r3, #5]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d102      	bne.n	8003cac <HAL_DAC_ConfigChannel+0x224>
 8003ca6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003caa:	e000      	b.n	8003cae <HAL_DAC_ConfigChannel+0x226>
 8003cac:	2300      	movs	r3, #0
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003cba:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d114      	bne.n	8003cee <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003cc4:	f001 fad0 	bl	8005268 <HAL_RCC_GetHCLKFreq>
 8003cc8:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	4a48      	ldr	r2, [pc, #288]	; (8003df0 <HAL_DAC_ConfigChannel+0x368>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d904      	bls.n	8003cdc <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cda:	e00f      	b.n	8003cfc <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	4a45      	ldr	r2, [pc, #276]	; (8003df4 <HAL_DAC_ConfigChannel+0x36c>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d90a      	bls.n	8003cfa <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cea:	627b      	str	r3, [r7, #36]	; 0x24
 8003cec:	e006      	b.n	8003cfc <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8003cf8:	e000      	b.n	8003cfc <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003cfa:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f003 0310 	and.w	r3, r3, #16
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6819      	ldr	r1, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f003 0310 	and.w	r3, r3, #16
 8003d22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d26:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2a:	43da      	mvns	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	400a      	ands	r2, r1
 8003d32:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f003 0310 	and.w	r3, r3, #16
 8003d42:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003d46:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4a:	43db      	mvns	r3, r3
 8003d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d4e:	4013      	ands	r3, r2
 8003d50:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f003 0310 	and.w	r3, r3, #16
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	fa02 f303 	lsl.w	r3, r2, r3
 8003d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d66:	4313      	orrs	r3, r2
 8003d68:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d70:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	6819      	ldr	r1, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f003 0310 	and.w	r3, r3, #16
 8003d7e:	22c0      	movs	r2, #192	; 0xc0
 8003d80:	fa02 f303 	lsl.w	r3, r2, r3
 8003d84:	43da      	mvns	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	400a      	ands	r2, r1
 8003d8c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	089b      	lsrs	r3, r3, #2
 8003d94:	f003 030f 	and.w	r3, r3, #15
 8003d98:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	089b      	lsrs	r3, r3, #2
 8003da0:	021b      	lsls	r3, r3, #8
 8003da2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f003 0310 	and.w	r3, r3, #16
 8003db8:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc0:	43db      	mvns	r3, r3
 8003dc2:	ea02 0103 	and.w	r1, r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f003 0310 	and.w	r3, r3, #16
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	409a      	lsls	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	661a      	str	r2, [r3, #96]	; 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003de4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3728      	adds	r7, #40	; 0x28
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	09896800 	.word	0x09896800
 8003df4:	04c4b400 	.word	0x04c4b400

08003df8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e08d      	b.n	8003f26 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	4b47      	ldr	r3, [pc, #284]	; (8003f30 <HAL_DMA_Init+0x138>)
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d80f      	bhi.n	8003e36 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	4b45      	ldr	r3, [pc, #276]	; (8003f34 <HAL_DMA_Init+0x13c>)
 8003e1e:	4413      	add	r3, r2
 8003e20:	4a45      	ldr	r2, [pc, #276]	; (8003f38 <HAL_DMA_Init+0x140>)
 8003e22:	fba2 2303 	umull	r2, r3, r2, r3
 8003e26:	091b      	lsrs	r3, r3, #4
 8003e28:	009a      	lsls	r2, r3, #2
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a42      	ldr	r2, [pc, #264]	; (8003f3c <HAL_DMA_Init+0x144>)
 8003e32:	641a      	str	r2, [r3, #64]	; 0x40
 8003e34:	e00e      	b.n	8003e54 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	4b40      	ldr	r3, [pc, #256]	; (8003f40 <HAL_DMA_Init+0x148>)
 8003e3e:	4413      	add	r3, r2
 8003e40:	4a3d      	ldr	r2, [pc, #244]	; (8003f38 <HAL_DMA_Init+0x140>)
 8003e42:	fba2 2303 	umull	r2, r3, r2, r3
 8003e46:	091b      	lsrs	r3, r3, #4
 8003e48:	009a      	lsls	r2, r3, #2
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a3c      	ldr	r2, [pc, #240]	; (8003f44 <HAL_DMA_Init+0x14c>)
 8003e52:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2202      	movs	r2, #2
 8003e58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e6e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003e78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 fa76 	bl	8004398 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003eb4:	d102      	bne.n	8003ebc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685a      	ldr	r2, [r3, #4]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ec4:	b2d2      	uxtb	r2, r2
 8003ec6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ed0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d010      	beq.n	8003efc <HAL_DMA_Init+0x104>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	d80c      	bhi.n	8003efc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 fa96 	bl	8004414 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eec:	2200      	movs	r2, #0
 8003eee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ef8:	605a      	str	r2, [r3, #4]
 8003efa:	e008      	b.n	8003f0e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	40020407 	.word	0x40020407
 8003f34:	bffdfff8 	.word	0xbffdfff8
 8003f38:	cccccccd 	.word	0xcccccccd
 8003f3c:	40020000 	.word	0x40020000
 8003f40:	bffdfbf8 	.word	0xbffdfbf8
 8003f44:	40020400 	.word	0x40020400

08003f48 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
 8003f54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f56:	2300      	movs	r3, #0
 8003f58:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d101      	bne.n	8003f68 <HAL_DMA_Start_IT+0x20>
 8003f64:	2302      	movs	r3, #2
 8003f66:	e066      	b.n	8004036 <HAL_DMA_Start_IT+0xee>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d155      	bne.n	8004028 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0201 	bic.w	r2, r2, #1
 8003f98:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	68b9      	ldr	r1, [r7, #8]
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f000 f9bb 	bl	800431c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d008      	beq.n	8003fc0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f042 020e 	orr.w	r2, r2, #14
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	e00f      	b.n	8003fe0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 0204 	bic.w	r2, r2, #4
 8003fce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f042 020a 	orr.w	r2, r2, #10
 8003fde:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d007      	beq.n	8003ffe <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ff8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ffc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004002:	2b00      	cmp	r3, #0
 8004004:	d007      	beq.n	8004016 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004010:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004014:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f042 0201 	orr.w	r2, r2, #1
 8004024:	601a      	str	r2, [r3, #0]
 8004026:	e005      	b.n	8004034 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004030:	2302      	movs	r3, #2
 8004032:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004034:	7dfb      	ldrb	r3, [r7, #23]
}
 8004036:	4618      	mov	r0, r3
 8004038:	3718      	adds	r7, #24
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800403e:	b480      	push	{r7}
 8004040:	b085      	sub	sp, #20
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004046:	2300      	movs	r3, #0
 8004048:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d005      	beq.n	8004062 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2204      	movs	r2, #4
 800405a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	73fb      	strb	r3, [r7, #15]
 8004060:	e037      	b.n	80040d2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 020e 	bic.w	r2, r2, #14
 8004070:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800407c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004080:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 0201 	bic.w	r2, r2, #1
 8004090:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004096:	f003 021f 	and.w	r2, r3, #31
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	2101      	movs	r1, #1
 80040a0:	fa01 f202 	lsl.w	r2, r1, r2
 80040a4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80040ae:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00c      	beq.n	80040d2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040c6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80040d0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80040e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3714      	adds	r7, #20
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040f8:	2300      	movs	r3, #0
 80040fa:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b02      	cmp	r3, #2
 8004106:	d00d      	beq.n	8004124 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2204      	movs	r2, #4
 800410c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	73fb      	strb	r3, [r7, #15]
 8004122:	e047      	b.n	80041b4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 020e 	bic.w	r2, r2, #14
 8004132:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f022 0201 	bic.w	r2, r2, #1
 8004142:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800414e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004152:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004158:	f003 021f 	and.w	r2, r3, #31
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004160:	2101      	movs	r1, #1
 8004162:	fa01 f202 	lsl.w	r2, r1, r2
 8004166:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004170:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00c      	beq.n	8004194 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004184:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004188:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004192:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	4798      	blx	r3
    }
  }
  return status;
 80041b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b084      	sub	sp, #16
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041da:	f003 031f 	and.w	r3, r3, #31
 80041de:	2204      	movs	r2, #4
 80041e0:	409a      	lsls	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	4013      	ands	r3, r2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d026      	beq.n	8004238 <HAL_DMA_IRQHandler+0x7a>
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d021      	beq.n	8004238 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0320 	and.w	r3, r3, #32
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d107      	bne.n	8004212 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0204 	bic.w	r2, r2, #4
 8004210:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004216:	f003 021f 	and.w	r2, r3, #31
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421e:	2104      	movs	r1, #4
 8004220:	fa01 f202 	lsl.w	r2, r1, r2
 8004224:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422a:	2b00      	cmp	r3, #0
 800422c:	d071      	beq.n	8004312 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004236:	e06c      	b.n	8004312 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423c:	f003 031f 	and.w	r3, r3, #31
 8004240:	2202      	movs	r2, #2
 8004242:	409a      	lsls	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	4013      	ands	r3, r2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d02e      	beq.n	80042aa <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d029      	beq.n	80042aa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0320 	and.w	r3, r3, #32
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10b      	bne.n	800427c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 020a 	bic.w	r2, r2, #10
 8004272:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004280:	f003 021f 	and.w	r2, r3, #31
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004288:	2102      	movs	r1, #2
 800428a:	fa01 f202 	lsl.w	r2, r1, r2
 800428e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429c:	2b00      	cmp	r3, #0
 800429e:	d038      	beq.n	8004312 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80042a8:	e033      	b.n	8004312 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ae:	f003 031f 	and.w	r3, r3, #31
 80042b2:	2208      	movs	r2, #8
 80042b4:	409a      	lsls	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	4013      	ands	r3, r2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d02a      	beq.n	8004314 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	f003 0308 	and.w	r3, r3, #8
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d025      	beq.n	8004314 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 020e 	bic.w	r2, r2, #14
 80042d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042dc:	f003 021f 	and.w	r2, r3, #31
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e4:	2101      	movs	r1, #1
 80042e6:	fa01 f202 	lsl.w	r2, r1, r2
 80042ea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004306:	2b00      	cmp	r3, #0
 8004308:	d004      	beq.n	8004314 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004312:	bf00      	nop
 8004314:	bf00      	nop
}
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
 8004328:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004332:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004338:	2b00      	cmp	r3, #0
 800433a:	d004      	beq.n	8004346 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004344:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434a:	f003 021f 	and.w	r2, r3, #31
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004352:	2101      	movs	r1, #1
 8004354:	fa01 f202 	lsl.w	r2, r1, r2
 8004358:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	683a      	ldr	r2, [r7, #0]
 8004360:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	2b10      	cmp	r3, #16
 8004368:	d108      	bne.n	800437c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68ba      	ldr	r2, [r7, #8]
 8004378:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800437a:	e007      	b.n	800438c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	60da      	str	r2, [r3, #12]
}
 800438c:	bf00      	nop
 800438e:	3714      	adds	r7, #20
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004398:	b480      	push	{r7}
 800439a:	b087      	sub	sp, #28
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	461a      	mov	r2, r3
 80043a6:	4b16      	ldr	r3, [pc, #88]	; (8004400 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d802      	bhi.n	80043b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80043ac:	4b15      	ldr	r3, [pc, #84]	; (8004404 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80043ae:	617b      	str	r3, [r7, #20]
 80043b0:	e001      	b.n	80043b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80043b2:	4b15      	ldr	r3, [pc, #84]	; (8004408 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80043b4:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	3b08      	subs	r3, #8
 80043c2:	4a12      	ldr	r2, [pc, #72]	; (800440c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80043c4:	fba2 2303 	umull	r2, r3, r2, r3
 80043c8:	091b      	lsrs	r3, r3, #4
 80043ca:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d0:	089b      	lsrs	r3, r3, #2
 80043d2:	009a      	lsls	r2, r3, #2
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	4413      	add	r3, r2
 80043d8:	461a      	mov	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a0b      	ldr	r2, [pc, #44]	; (8004410 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80043e2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f003 031f 	and.w	r3, r3, #31
 80043ea:	2201      	movs	r2, #1
 80043ec:	409a      	lsls	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80043f2:	bf00      	nop
 80043f4:	371c      	adds	r7, #28
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	40020407 	.word	0x40020407
 8004404:	40020800 	.word	0x40020800
 8004408:	40020820 	.word	0x40020820
 800440c:	cccccccd 	.word	0xcccccccd
 8004410:	40020880 	.word	0x40020880

08004414 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	b2db      	uxtb	r3, r3
 8004422:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004428:	4413      	add	r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	461a      	mov	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a08      	ldr	r2, [pc, #32]	; (8004458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004436:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	3b01      	subs	r3, #1
 800443c:	f003 031f 	and.w	r3, r3, #31
 8004440:	2201      	movs	r2, #1
 8004442:	409a      	lsls	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004448:	bf00      	nop
 800444a:	3714      	adds	r7, #20
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr
 8004454:	1000823f 	.word	0x1000823f
 8004458:	40020940 	.word	0x40020940

0800445c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800445c:	b480      	push	{r7}
 800445e:	b087      	sub	sp, #28
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004466:	2300      	movs	r3, #0
 8004468:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800446a:	e15a      	b.n	8004722 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	2101      	movs	r1, #1
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	fa01 f303 	lsl.w	r3, r1, r3
 8004478:	4013      	ands	r3, r2
 800447a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2b00      	cmp	r3, #0
 8004480:	f000 814c 	beq.w	800471c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f003 0303 	and.w	r3, r3, #3
 800448c:	2b01      	cmp	r3, #1
 800448e:	d005      	beq.n	800449c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004498:	2b02      	cmp	r3, #2
 800449a:	d130      	bne.n	80044fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	2203      	movs	r2, #3
 80044a8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ac:	43db      	mvns	r3, r3
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	4013      	ands	r3, r2
 80044b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	68da      	ldr	r2, [r3, #12]
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	005b      	lsls	r3, r3, #1
 80044bc:	fa02 f303 	lsl.w	r3, r2, r3
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044d2:	2201      	movs	r2, #1
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	fa02 f303 	lsl.w	r3, r2, r3
 80044da:	43db      	mvns	r3, r3
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	4013      	ands	r3, r2
 80044e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	091b      	lsrs	r3, r3, #4
 80044e8:	f003 0201 	and.w	r2, r3, #1
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	fa02 f303 	lsl.w	r3, r2, r3
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f003 0303 	and.w	r3, r3, #3
 8004506:	2b03      	cmp	r3, #3
 8004508:	d017      	beq.n	800453a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	005b      	lsls	r3, r3, #1
 8004514:	2203      	movs	r2, #3
 8004516:	fa02 f303 	lsl.w	r3, r2, r3
 800451a:	43db      	mvns	r3, r3
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	4013      	ands	r3, r2
 8004520:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	689a      	ldr	r2, [r3, #8]
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	fa02 f303 	lsl.w	r3, r2, r3
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	4313      	orrs	r3, r2
 8004532:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f003 0303 	and.w	r3, r3, #3
 8004542:	2b02      	cmp	r3, #2
 8004544:	d123      	bne.n	800458e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	08da      	lsrs	r2, r3, #3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	3208      	adds	r2, #8
 800454e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004552:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	f003 0307 	and.w	r3, r3, #7
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	220f      	movs	r2, #15
 800455e:	fa02 f303 	lsl.w	r3, r2, r3
 8004562:	43db      	mvns	r3, r3
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	4013      	ands	r3, r2
 8004568:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	691a      	ldr	r2, [r3, #16]
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f003 0307 	and.w	r3, r3, #7
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	fa02 f303 	lsl.w	r3, r2, r3
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	4313      	orrs	r3, r2
 800457e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	08da      	lsrs	r2, r3, #3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	3208      	adds	r2, #8
 8004588:	6939      	ldr	r1, [r7, #16]
 800458a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	005b      	lsls	r3, r3, #1
 8004598:	2203      	movs	r2, #3
 800459a:	fa02 f303 	lsl.w	r3, r2, r3
 800459e:	43db      	mvns	r3, r3
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	4013      	ands	r3, r2
 80045a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f003 0203 	and.w	r2, r3, #3
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	005b      	lsls	r3, r3, #1
 80045b2:	fa02 f303 	lsl.w	r3, r2, r3
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 80a6 	beq.w	800471c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045d0:	4b5b      	ldr	r3, [pc, #364]	; (8004740 <HAL_GPIO_Init+0x2e4>)
 80045d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045d4:	4a5a      	ldr	r2, [pc, #360]	; (8004740 <HAL_GPIO_Init+0x2e4>)
 80045d6:	f043 0301 	orr.w	r3, r3, #1
 80045da:	6613      	str	r3, [r2, #96]	; 0x60
 80045dc:	4b58      	ldr	r3, [pc, #352]	; (8004740 <HAL_GPIO_Init+0x2e4>)
 80045de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	60bb      	str	r3, [r7, #8]
 80045e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045e8:	4a56      	ldr	r2, [pc, #344]	; (8004744 <HAL_GPIO_Init+0x2e8>)
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	089b      	lsrs	r3, r3, #2
 80045ee:	3302      	adds	r3, #2
 80045f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	f003 0303 	and.w	r3, r3, #3
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	220f      	movs	r2, #15
 8004600:	fa02 f303 	lsl.w	r3, r2, r3
 8004604:	43db      	mvns	r3, r3
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	4013      	ands	r3, r2
 800460a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004612:	d01f      	beq.n	8004654 <HAL_GPIO_Init+0x1f8>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a4c      	ldr	r2, [pc, #304]	; (8004748 <HAL_GPIO_Init+0x2ec>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d019      	beq.n	8004650 <HAL_GPIO_Init+0x1f4>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a4b      	ldr	r2, [pc, #300]	; (800474c <HAL_GPIO_Init+0x2f0>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d013      	beq.n	800464c <HAL_GPIO_Init+0x1f0>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a4a      	ldr	r2, [pc, #296]	; (8004750 <HAL_GPIO_Init+0x2f4>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d00d      	beq.n	8004648 <HAL_GPIO_Init+0x1ec>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a49      	ldr	r2, [pc, #292]	; (8004754 <HAL_GPIO_Init+0x2f8>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d007      	beq.n	8004644 <HAL_GPIO_Init+0x1e8>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a48      	ldr	r2, [pc, #288]	; (8004758 <HAL_GPIO_Init+0x2fc>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d101      	bne.n	8004640 <HAL_GPIO_Init+0x1e4>
 800463c:	2305      	movs	r3, #5
 800463e:	e00a      	b.n	8004656 <HAL_GPIO_Init+0x1fa>
 8004640:	2306      	movs	r3, #6
 8004642:	e008      	b.n	8004656 <HAL_GPIO_Init+0x1fa>
 8004644:	2304      	movs	r3, #4
 8004646:	e006      	b.n	8004656 <HAL_GPIO_Init+0x1fa>
 8004648:	2303      	movs	r3, #3
 800464a:	e004      	b.n	8004656 <HAL_GPIO_Init+0x1fa>
 800464c:	2302      	movs	r3, #2
 800464e:	e002      	b.n	8004656 <HAL_GPIO_Init+0x1fa>
 8004650:	2301      	movs	r3, #1
 8004652:	e000      	b.n	8004656 <HAL_GPIO_Init+0x1fa>
 8004654:	2300      	movs	r3, #0
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	f002 0203 	and.w	r2, r2, #3
 800465c:	0092      	lsls	r2, r2, #2
 800465e:	4093      	lsls	r3, r2
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	4313      	orrs	r3, r2
 8004664:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004666:	4937      	ldr	r1, [pc, #220]	; (8004744 <HAL_GPIO_Init+0x2e8>)
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	089b      	lsrs	r3, r3, #2
 800466c:	3302      	adds	r3, #2
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004674:	4b39      	ldr	r3, [pc, #228]	; (800475c <HAL_GPIO_Init+0x300>)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	43db      	mvns	r3, r3
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	4013      	ands	r3, r2
 8004682:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d003      	beq.n	8004698 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	4313      	orrs	r3, r2
 8004696:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004698:	4a30      	ldr	r2, [pc, #192]	; (800475c <HAL_GPIO_Init+0x300>)
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800469e:	4b2f      	ldr	r3, [pc, #188]	; (800475c <HAL_GPIO_Init+0x300>)
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	43db      	mvns	r3, r3
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	4013      	ands	r3, r2
 80046ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d003      	beq.n	80046c2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	4313      	orrs	r3, r2
 80046c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80046c2:	4a26      	ldr	r2, [pc, #152]	; (800475c <HAL_GPIO_Init+0x300>)
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80046c8:	4b24      	ldr	r3, [pc, #144]	; (800475c <HAL_GPIO_Init+0x300>)
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	43db      	mvns	r3, r3
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	4013      	ands	r3, r2
 80046d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d003      	beq.n	80046ec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80046ec:	4a1b      	ldr	r2, [pc, #108]	; (800475c <HAL_GPIO_Init+0x300>)
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80046f2:	4b1a      	ldr	r3, [pc, #104]	; (800475c <HAL_GPIO_Init+0x300>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	43db      	mvns	r3, r3
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	4013      	ands	r3, r2
 8004700:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d003      	beq.n	8004716 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	4313      	orrs	r3, r2
 8004714:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004716:	4a11      	ldr	r2, [pc, #68]	; (800475c <HAL_GPIO_Init+0x300>)
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	3301      	adds	r3, #1
 8004720:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	fa22 f303 	lsr.w	r3, r2, r3
 800472c:	2b00      	cmp	r3, #0
 800472e:	f47f ae9d 	bne.w	800446c <HAL_GPIO_Init+0x10>
  }
}
 8004732:	bf00      	nop
 8004734:	bf00      	nop
 8004736:	371c      	adds	r7, #28
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr
 8004740:	40021000 	.word	0x40021000
 8004744:	40010000 	.word	0x40010000
 8004748:	48000400 	.word	0x48000400
 800474c:	48000800 	.word	0x48000800
 8004750:	48000c00 	.word	0x48000c00
 8004754:	48001000 	.word	0x48001000
 8004758:	48001400 	.word	0x48001400
 800475c:	40010400 	.word	0x40010400

08004760 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	460b      	mov	r3, r1
 800476a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	691a      	ldr	r2, [r3, #16]
 8004770:	887b      	ldrh	r3, [r7, #2]
 8004772:	4013      	ands	r3, r2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d002      	beq.n	800477e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004778:	2301      	movs	r3, #1
 800477a:	73fb      	strb	r3, [r7, #15]
 800477c:	e001      	b.n	8004782 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800477e:	2300      	movs	r3, #0
 8004780:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004782:	7bfb      	ldrb	r3, [r7, #15]
}
 8004784:	4618      	mov	r0, r3
 8004786:	3714      	adds	r7, #20
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	460b      	mov	r3, r1
 800479a:	807b      	strh	r3, [r7, #2]
 800479c:	4613      	mov	r3, r2
 800479e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047a0:	787b      	ldrb	r3, [r7, #1]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d003      	beq.n	80047ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80047a6:	887a      	ldrh	r2, [r7, #2]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80047ac:	e002      	b.n	80047b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80047ae:	887a      	ldrh	r2, [r7, #2]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d141      	bne.n	8004852 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80047ce:	4b4b      	ldr	r3, [pc, #300]	; (80048fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80047d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047da:	d131      	bne.n	8004840 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047dc:	4b47      	ldr	r3, [pc, #284]	; (80048fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047e2:	4a46      	ldr	r2, [pc, #280]	; (80048fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047ec:	4b43      	ldr	r3, [pc, #268]	; (80048fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80047f4:	4a41      	ldr	r2, [pc, #260]	; (80048fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80047fc:	4b40      	ldr	r3, [pc, #256]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2232      	movs	r2, #50	; 0x32
 8004802:	fb02 f303 	mul.w	r3, r2, r3
 8004806:	4a3f      	ldr	r2, [pc, #252]	; (8004904 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004808:	fba2 2303 	umull	r2, r3, r2, r3
 800480c:	0c9b      	lsrs	r3, r3, #18
 800480e:	3301      	adds	r3, #1
 8004810:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004812:	e002      	b.n	800481a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	3b01      	subs	r3, #1
 8004818:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800481a:	4b38      	ldr	r3, [pc, #224]	; (80048fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004826:	d102      	bne.n	800482e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1f2      	bne.n	8004814 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800482e:	4b33      	ldr	r3, [pc, #204]	; (80048fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800483a:	d158      	bne.n	80048ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e057      	b.n	80048f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004840:	4b2e      	ldr	r3, [pc, #184]	; (80048fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004842:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004846:	4a2d      	ldr	r2, [pc, #180]	; (80048fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004848:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800484c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004850:	e04d      	b.n	80048ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004858:	d141      	bne.n	80048de <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800485a:	4b28      	ldr	r3, [pc, #160]	; (80048fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004866:	d131      	bne.n	80048cc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004868:	4b24      	ldr	r3, [pc, #144]	; (80048fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800486a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800486e:	4a23      	ldr	r2, [pc, #140]	; (80048fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004874:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004878:	4b20      	ldr	r3, [pc, #128]	; (80048fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004880:	4a1e      	ldr	r2, [pc, #120]	; (80048fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004882:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004886:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004888:	4b1d      	ldr	r3, [pc, #116]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2232      	movs	r2, #50	; 0x32
 800488e:	fb02 f303 	mul.w	r3, r2, r3
 8004892:	4a1c      	ldr	r2, [pc, #112]	; (8004904 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004894:	fba2 2303 	umull	r2, r3, r2, r3
 8004898:	0c9b      	lsrs	r3, r3, #18
 800489a:	3301      	adds	r3, #1
 800489c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800489e:	e002      	b.n	80048a6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	3b01      	subs	r3, #1
 80048a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048a6:	4b15      	ldr	r3, [pc, #84]	; (80048fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048b2:	d102      	bne.n	80048ba <HAL_PWREx_ControlVoltageScaling+0xfa>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1f2      	bne.n	80048a0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048ba:	4b10      	ldr	r3, [pc, #64]	; (80048fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048c6:	d112      	bne.n	80048ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e011      	b.n	80048f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048cc:	4b0b      	ldr	r3, [pc, #44]	; (80048fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048d2:	4a0a      	ldr	r2, [pc, #40]	; (80048fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80048dc:	e007      	b.n	80048ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80048de:	4b07      	ldr	r3, [pc, #28]	; (80048fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80048e6:	4a05      	ldr	r2, [pc, #20]	; (80048fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048ec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3714      	adds	r7, #20
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	40007000 	.word	0x40007000
 8004900:	2000085c 	.word	0x2000085c
 8004904:	431bde83 	.word	0x431bde83

08004908 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b088      	sub	sp, #32
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e2fe      	b.n	8004f18 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b00      	cmp	r3, #0
 8004924:	d075      	beq.n	8004a12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004926:	4b97      	ldr	r3, [pc, #604]	; (8004b84 <HAL_RCC_OscConfig+0x27c>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f003 030c 	and.w	r3, r3, #12
 800492e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004930:	4b94      	ldr	r3, [pc, #592]	; (8004b84 <HAL_RCC_OscConfig+0x27c>)
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	f003 0303 	and.w	r3, r3, #3
 8004938:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	2b0c      	cmp	r3, #12
 800493e:	d102      	bne.n	8004946 <HAL_RCC_OscConfig+0x3e>
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	2b03      	cmp	r3, #3
 8004944:	d002      	beq.n	800494c <HAL_RCC_OscConfig+0x44>
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	2b08      	cmp	r3, #8
 800494a:	d10b      	bne.n	8004964 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800494c:	4b8d      	ldr	r3, [pc, #564]	; (8004b84 <HAL_RCC_OscConfig+0x27c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d05b      	beq.n	8004a10 <HAL_RCC_OscConfig+0x108>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d157      	bne.n	8004a10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e2d9      	b.n	8004f18 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800496c:	d106      	bne.n	800497c <HAL_RCC_OscConfig+0x74>
 800496e:	4b85      	ldr	r3, [pc, #532]	; (8004b84 <HAL_RCC_OscConfig+0x27c>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a84      	ldr	r2, [pc, #528]	; (8004b84 <HAL_RCC_OscConfig+0x27c>)
 8004974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004978:	6013      	str	r3, [r2, #0]
 800497a:	e01d      	b.n	80049b8 <HAL_RCC_OscConfig+0xb0>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004984:	d10c      	bne.n	80049a0 <HAL_RCC_OscConfig+0x98>
 8004986:	4b7f      	ldr	r3, [pc, #508]	; (8004b84 <HAL_RCC_OscConfig+0x27c>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a7e      	ldr	r2, [pc, #504]	; (8004b84 <HAL_RCC_OscConfig+0x27c>)
 800498c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004990:	6013      	str	r3, [r2, #0]
 8004992:	4b7c      	ldr	r3, [pc, #496]	; (8004b84 <HAL_RCC_OscConfig+0x27c>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a7b      	ldr	r2, [pc, #492]	; (8004b84 <HAL_RCC_OscConfig+0x27c>)
 8004998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800499c:	6013      	str	r3, [r2, #0]
 800499e:	e00b      	b.n	80049b8 <HAL_RCC_OscConfig+0xb0>
 80049a0:	4b78      	ldr	r3, [pc, #480]	; (8004b84 <HAL_RCC_OscConfig+0x27c>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a77      	ldr	r2, [pc, #476]	; (8004b84 <HAL_RCC_OscConfig+0x27c>)
 80049a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049aa:	6013      	str	r3, [r2, #0]
 80049ac:	4b75      	ldr	r3, [pc, #468]	; (8004b84 <HAL_RCC_OscConfig+0x27c>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a74      	ldr	r2, [pc, #464]	; (8004b84 <HAL_RCC_OscConfig+0x27c>)
 80049b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d013      	beq.n	80049e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c0:	f7fd fa5e 	bl	8001e80 <HAL_GetTick>
 80049c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049c6:	e008      	b.n	80049da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049c8:	f7fd fa5a 	bl	8001e80 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b64      	cmp	r3, #100	; 0x64
 80049d4:	d901      	bls.n	80049da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e29e      	b.n	8004f18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049da:	4b6a      	ldr	r3, [pc, #424]	; (8004b84 <HAL_RCC_OscConfig+0x27c>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d0f0      	beq.n	80049c8 <HAL_RCC_OscConfig+0xc0>
 80049e6:	e014      	b.n	8004a12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e8:	f7fd fa4a 	bl	8001e80 <HAL_GetTick>
 80049ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049ee:	e008      	b.n	8004a02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049f0:	f7fd fa46 	bl	8001e80 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b64      	cmp	r3, #100	; 0x64
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e28a      	b.n	8004f18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a02:	4b60      	ldr	r3, [pc, #384]	; (8004b84 <HAL_RCC_OscConfig+0x27c>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1f0      	bne.n	80049f0 <HAL_RCC_OscConfig+0xe8>
 8004a0e:	e000      	b.n	8004a12 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d075      	beq.n	8004b0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a1e:	4b59      	ldr	r3, [pc, #356]	; (8004b84 <HAL_RCC_OscConfig+0x27c>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f003 030c 	and.w	r3, r3, #12
 8004a26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a28:	4b56      	ldr	r3, [pc, #344]	; (8004b84 <HAL_RCC_OscConfig+0x27c>)
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	f003 0303 	and.w	r3, r3, #3
 8004a30:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	2b0c      	cmp	r3, #12
 8004a36:	d102      	bne.n	8004a3e <HAL_RCC_OscConfig+0x136>
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d002      	beq.n	8004a44 <HAL_RCC_OscConfig+0x13c>
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	2b04      	cmp	r3, #4
 8004a42:	d11f      	bne.n	8004a84 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a44:	4b4f      	ldr	r3, [pc, #316]	; (8004b84 <HAL_RCC_OscConfig+0x27c>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d005      	beq.n	8004a5c <HAL_RCC_OscConfig+0x154>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d101      	bne.n	8004a5c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e25d      	b.n	8004f18 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a5c:	4b49      	ldr	r3, [pc, #292]	; (8004b84 <HAL_RCC_OscConfig+0x27c>)
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	061b      	lsls	r3, r3, #24
 8004a6a:	4946      	ldr	r1, [pc, #280]	; (8004b84 <HAL_RCC_OscConfig+0x27c>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004a70:	4b45      	ldr	r3, [pc, #276]	; (8004b88 <HAL_RCC_OscConfig+0x280>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7fd f9b7 	bl	8001de8 <HAL_InitTick>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d043      	beq.n	8004b08 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e249      	b.n	8004f18 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d023      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a8c:	4b3d      	ldr	r3, [pc, #244]	; (8004b84 <HAL_RCC_OscConfig+0x27c>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a3c      	ldr	r2, [pc, #240]	; (8004b84 <HAL_RCC_OscConfig+0x27c>)
 8004a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a98:	f7fd f9f2 	bl	8001e80 <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aa0:	f7fd f9ee 	bl	8001e80 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e232      	b.n	8004f18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ab2:	4b34      	ldr	r3, [pc, #208]	; (8004b84 <HAL_RCC_OscConfig+0x27c>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0f0      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004abe:	4b31      	ldr	r3, [pc, #196]	; (8004b84 <HAL_RCC_OscConfig+0x27c>)
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	061b      	lsls	r3, r3, #24
 8004acc:	492d      	ldr	r1, [pc, #180]	; (8004b84 <HAL_RCC_OscConfig+0x27c>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	604b      	str	r3, [r1, #4]
 8004ad2:	e01a      	b.n	8004b0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ad4:	4b2b      	ldr	r3, [pc, #172]	; (8004b84 <HAL_RCC_OscConfig+0x27c>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a2a      	ldr	r2, [pc, #168]	; (8004b84 <HAL_RCC_OscConfig+0x27c>)
 8004ada:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ade:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae0:	f7fd f9ce 	bl	8001e80 <HAL_GetTick>
 8004ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ae6:	e008      	b.n	8004afa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ae8:	f7fd f9ca 	bl	8001e80 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e20e      	b.n	8004f18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004afa:	4b22      	ldr	r3, [pc, #136]	; (8004b84 <HAL_RCC_OscConfig+0x27c>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1f0      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x1e0>
 8004b06:	e000      	b.n	8004b0a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b08:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0308 	and.w	r3, r3, #8
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d041      	beq.n	8004b9a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d01c      	beq.n	8004b58 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b1e:	4b19      	ldr	r3, [pc, #100]	; (8004b84 <HAL_RCC_OscConfig+0x27c>)
 8004b20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b24:	4a17      	ldr	r2, [pc, #92]	; (8004b84 <HAL_RCC_OscConfig+0x27c>)
 8004b26:	f043 0301 	orr.w	r3, r3, #1
 8004b2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b2e:	f7fd f9a7 	bl	8001e80 <HAL_GetTick>
 8004b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b34:	e008      	b.n	8004b48 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b36:	f7fd f9a3 	bl	8001e80 <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d901      	bls.n	8004b48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e1e7      	b.n	8004f18 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b48:	4b0e      	ldr	r3, [pc, #56]	; (8004b84 <HAL_RCC_OscConfig+0x27c>)
 8004b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d0ef      	beq.n	8004b36 <HAL_RCC_OscConfig+0x22e>
 8004b56:	e020      	b.n	8004b9a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b58:	4b0a      	ldr	r3, [pc, #40]	; (8004b84 <HAL_RCC_OscConfig+0x27c>)
 8004b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b5e:	4a09      	ldr	r2, [pc, #36]	; (8004b84 <HAL_RCC_OscConfig+0x27c>)
 8004b60:	f023 0301 	bic.w	r3, r3, #1
 8004b64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b68:	f7fd f98a 	bl	8001e80 <HAL_GetTick>
 8004b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b6e:	e00d      	b.n	8004b8c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b70:	f7fd f986 	bl	8001e80 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d906      	bls.n	8004b8c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e1ca      	b.n	8004f18 <HAL_RCC_OscConfig+0x610>
 8004b82:	bf00      	nop
 8004b84:	40021000 	.word	0x40021000
 8004b88:	20000860 	.word	0x20000860
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b8c:	4b8c      	ldr	r3, [pc, #560]	; (8004dc0 <HAL_RCC_OscConfig+0x4b8>)
 8004b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1ea      	bne.n	8004b70 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0304 	and.w	r3, r3, #4
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	f000 80a6 	beq.w	8004cf4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004bac:	4b84      	ldr	r3, [pc, #528]	; (8004dc0 <HAL_RCC_OscConfig+0x4b8>)
 8004bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <HAL_RCC_OscConfig+0x2b4>
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e000      	b.n	8004bbe <HAL_RCC_OscConfig+0x2b6>
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00d      	beq.n	8004bde <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bc2:	4b7f      	ldr	r3, [pc, #508]	; (8004dc0 <HAL_RCC_OscConfig+0x4b8>)
 8004bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc6:	4a7e      	ldr	r2, [pc, #504]	; (8004dc0 <HAL_RCC_OscConfig+0x4b8>)
 8004bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bcc:	6593      	str	r3, [r2, #88]	; 0x58
 8004bce:	4b7c      	ldr	r3, [pc, #496]	; (8004dc0 <HAL_RCC_OscConfig+0x4b8>)
 8004bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bd6:	60fb      	str	r3, [r7, #12]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bde:	4b79      	ldr	r3, [pc, #484]	; (8004dc4 <HAL_RCC_OscConfig+0x4bc>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d118      	bne.n	8004c1c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bea:	4b76      	ldr	r3, [pc, #472]	; (8004dc4 <HAL_RCC_OscConfig+0x4bc>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a75      	ldr	r2, [pc, #468]	; (8004dc4 <HAL_RCC_OscConfig+0x4bc>)
 8004bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bf6:	f7fd f943 	bl	8001e80 <HAL_GetTick>
 8004bfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bfc:	e008      	b.n	8004c10 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bfe:	f7fd f93f 	bl	8001e80 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d901      	bls.n	8004c10 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e183      	b.n	8004f18 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c10:	4b6c      	ldr	r3, [pc, #432]	; (8004dc4 <HAL_RCC_OscConfig+0x4bc>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d0f0      	beq.n	8004bfe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d108      	bne.n	8004c36 <HAL_RCC_OscConfig+0x32e>
 8004c24:	4b66      	ldr	r3, [pc, #408]	; (8004dc0 <HAL_RCC_OscConfig+0x4b8>)
 8004c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c2a:	4a65      	ldr	r2, [pc, #404]	; (8004dc0 <HAL_RCC_OscConfig+0x4b8>)
 8004c2c:	f043 0301 	orr.w	r3, r3, #1
 8004c30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c34:	e024      	b.n	8004c80 <HAL_RCC_OscConfig+0x378>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	2b05      	cmp	r3, #5
 8004c3c:	d110      	bne.n	8004c60 <HAL_RCC_OscConfig+0x358>
 8004c3e:	4b60      	ldr	r3, [pc, #384]	; (8004dc0 <HAL_RCC_OscConfig+0x4b8>)
 8004c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c44:	4a5e      	ldr	r2, [pc, #376]	; (8004dc0 <HAL_RCC_OscConfig+0x4b8>)
 8004c46:	f043 0304 	orr.w	r3, r3, #4
 8004c4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c4e:	4b5c      	ldr	r3, [pc, #368]	; (8004dc0 <HAL_RCC_OscConfig+0x4b8>)
 8004c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c54:	4a5a      	ldr	r2, [pc, #360]	; (8004dc0 <HAL_RCC_OscConfig+0x4b8>)
 8004c56:	f043 0301 	orr.w	r3, r3, #1
 8004c5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c5e:	e00f      	b.n	8004c80 <HAL_RCC_OscConfig+0x378>
 8004c60:	4b57      	ldr	r3, [pc, #348]	; (8004dc0 <HAL_RCC_OscConfig+0x4b8>)
 8004c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c66:	4a56      	ldr	r2, [pc, #344]	; (8004dc0 <HAL_RCC_OscConfig+0x4b8>)
 8004c68:	f023 0301 	bic.w	r3, r3, #1
 8004c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c70:	4b53      	ldr	r3, [pc, #332]	; (8004dc0 <HAL_RCC_OscConfig+0x4b8>)
 8004c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c76:	4a52      	ldr	r2, [pc, #328]	; (8004dc0 <HAL_RCC_OscConfig+0x4b8>)
 8004c78:	f023 0304 	bic.w	r3, r3, #4
 8004c7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d016      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c88:	f7fd f8fa 	bl	8001e80 <HAL_GetTick>
 8004c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c8e:	e00a      	b.n	8004ca6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c90:	f7fd f8f6 	bl	8001e80 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e138      	b.n	8004f18 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ca6:	4b46      	ldr	r3, [pc, #280]	; (8004dc0 <HAL_RCC_OscConfig+0x4b8>)
 8004ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cac:	f003 0302 	and.w	r3, r3, #2
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d0ed      	beq.n	8004c90 <HAL_RCC_OscConfig+0x388>
 8004cb4:	e015      	b.n	8004ce2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb6:	f7fd f8e3 	bl	8001e80 <HAL_GetTick>
 8004cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cbc:	e00a      	b.n	8004cd4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cbe:	f7fd f8df 	bl	8001e80 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d901      	bls.n	8004cd4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e121      	b.n	8004f18 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cd4:	4b3a      	ldr	r3, [pc, #232]	; (8004dc0 <HAL_RCC_OscConfig+0x4b8>)
 8004cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1ed      	bne.n	8004cbe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ce2:	7ffb      	ldrb	r3, [r7, #31]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d105      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ce8:	4b35      	ldr	r3, [pc, #212]	; (8004dc0 <HAL_RCC_OscConfig+0x4b8>)
 8004cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cec:	4a34      	ldr	r2, [pc, #208]	; (8004dc0 <HAL_RCC_OscConfig+0x4b8>)
 8004cee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cf2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0320 	and.w	r3, r3, #32
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d03c      	beq.n	8004d7a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d01c      	beq.n	8004d42 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d08:	4b2d      	ldr	r3, [pc, #180]	; (8004dc0 <HAL_RCC_OscConfig+0x4b8>)
 8004d0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d0e:	4a2c      	ldr	r2, [pc, #176]	; (8004dc0 <HAL_RCC_OscConfig+0x4b8>)
 8004d10:	f043 0301 	orr.w	r3, r3, #1
 8004d14:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d18:	f7fd f8b2 	bl	8001e80 <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d1e:	e008      	b.n	8004d32 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d20:	f7fd f8ae 	bl	8001e80 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e0f2      	b.n	8004f18 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d32:	4b23      	ldr	r3, [pc, #140]	; (8004dc0 <HAL_RCC_OscConfig+0x4b8>)
 8004d34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d38:	f003 0302 	and.w	r3, r3, #2
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d0ef      	beq.n	8004d20 <HAL_RCC_OscConfig+0x418>
 8004d40:	e01b      	b.n	8004d7a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d42:	4b1f      	ldr	r3, [pc, #124]	; (8004dc0 <HAL_RCC_OscConfig+0x4b8>)
 8004d44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d48:	4a1d      	ldr	r2, [pc, #116]	; (8004dc0 <HAL_RCC_OscConfig+0x4b8>)
 8004d4a:	f023 0301 	bic.w	r3, r3, #1
 8004d4e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d52:	f7fd f895 	bl	8001e80 <HAL_GetTick>
 8004d56:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d58:	e008      	b.n	8004d6c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d5a:	f7fd f891 	bl	8001e80 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d901      	bls.n	8004d6c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e0d5      	b.n	8004f18 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d6c:	4b14      	ldr	r3, [pc, #80]	; (8004dc0 <HAL_RCC_OscConfig+0x4b8>)
 8004d6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1ef      	bne.n	8004d5a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	69db      	ldr	r3, [r3, #28]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	f000 80c9 	beq.w	8004f16 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d84:	4b0e      	ldr	r3, [pc, #56]	; (8004dc0 <HAL_RCC_OscConfig+0x4b8>)
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f003 030c 	and.w	r3, r3, #12
 8004d8c:	2b0c      	cmp	r3, #12
 8004d8e:	f000 8083 	beq.w	8004e98 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	69db      	ldr	r3, [r3, #28]
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d15e      	bne.n	8004e58 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d9a:	4b09      	ldr	r3, [pc, #36]	; (8004dc0 <HAL_RCC_OscConfig+0x4b8>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a08      	ldr	r2, [pc, #32]	; (8004dc0 <HAL_RCC_OscConfig+0x4b8>)
 8004da0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004da4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da6:	f7fd f86b 	bl	8001e80 <HAL_GetTick>
 8004daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dac:	e00c      	b.n	8004dc8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dae:	f7fd f867 	bl	8001e80 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d905      	bls.n	8004dc8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e0ab      	b.n	8004f18 <HAL_RCC_OscConfig+0x610>
 8004dc0:	40021000 	.word	0x40021000
 8004dc4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dc8:	4b55      	ldr	r3, [pc, #340]	; (8004f20 <HAL_RCC_OscConfig+0x618>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1ec      	bne.n	8004dae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dd4:	4b52      	ldr	r3, [pc, #328]	; (8004f20 <HAL_RCC_OscConfig+0x618>)
 8004dd6:	68da      	ldr	r2, [r3, #12]
 8004dd8:	4b52      	ldr	r3, [pc, #328]	; (8004f24 <HAL_RCC_OscConfig+0x61c>)
 8004dda:	4013      	ands	r3, r2
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	6a11      	ldr	r1, [r2, #32]
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004de4:	3a01      	subs	r2, #1
 8004de6:	0112      	lsls	r2, r2, #4
 8004de8:	4311      	orrs	r1, r2
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004dee:	0212      	lsls	r2, r2, #8
 8004df0:	4311      	orrs	r1, r2
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004df6:	0852      	lsrs	r2, r2, #1
 8004df8:	3a01      	subs	r2, #1
 8004dfa:	0552      	lsls	r2, r2, #21
 8004dfc:	4311      	orrs	r1, r2
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e02:	0852      	lsrs	r2, r2, #1
 8004e04:	3a01      	subs	r2, #1
 8004e06:	0652      	lsls	r2, r2, #25
 8004e08:	4311      	orrs	r1, r2
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004e0e:	06d2      	lsls	r2, r2, #27
 8004e10:	430a      	orrs	r2, r1
 8004e12:	4943      	ldr	r1, [pc, #268]	; (8004f20 <HAL_RCC_OscConfig+0x618>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e18:	4b41      	ldr	r3, [pc, #260]	; (8004f20 <HAL_RCC_OscConfig+0x618>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a40      	ldr	r2, [pc, #256]	; (8004f20 <HAL_RCC_OscConfig+0x618>)
 8004e1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e22:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e24:	4b3e      	ldr	r3, [pc, #248]	; (8004f20 <HAL_RCC_OscConfig+0x618>)
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	4a3d      	ldr	r2, [pc, #244]	; (8004f20 <HAL_RCC_OscConfig+0x618>)
 8004e2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e2e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e30:	f7fd f826 	bl	8001e80 <HAL_GetTick>
 8004e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e36:	e008      	b.n	8004e4a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e38:	f7fd f822 	bl	8001e80 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e066      	b.n	8004f18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e4a:	4b35      	ldr	r3, [pc, #212]	; (8004f20 <HAL_RCC_OscConfig+0x618>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d0f0      	beq.n	8004e38 <HAL_RCC_OscConfig+0x530>
 8004e56:	e05e      	b.n	8004f16 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e58:	4b31      	ldr	r3, [pc, #196]	; (8004f20 <HAL_RCC_OscConfig+0x618>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a30      	ldr	r2, [pc, #192]	; (8004f20 <HAL_RCC_OscConfig+0x618>)
 8004e5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e64:	f7fd f80c 	bl	8001e80 <HAL_GetTick>
 8004e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e6a:	e008      	b.n	8004e7e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e6c:	f7fd f808 	bl	8001e80 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e04c      	b.n	8004f18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e7e:	4b28      	ldr	r3, [pc, #160]	; (8004f20 <HAL_RCC_OscConfig+0x618>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1f0      	bne.n	8004e6c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004e8a:	4b25      	ldr	r3, [pc, #148]	; (8004f20 <HAL_RCC_OscConfig+0x618>)
 8004e8c:	68da      	ldr	r2, [r3, #12]
 8004e8e:	4924      	ldr	r1, [pc, #144]	; (8004f20 <HAL_RCC_OscConfig+0x618>)
 8004e90:	4b25      	ldr	r3, [pc, #148]	; (8004f28 <HAL_RCC_OscConfig+0x620>)
 8004e92:	4013      	ands	r3, r2
 8004e94:	60cb      	str	r3, [r1, #12]
 8004e96:	e03e      	b.n	8004f16 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	69db      	ldr	r3, [r3, #28]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d101      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e039      	b.n	8004f18 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004ea4:	4b1e      	ldr	r3, [pc, #120]	; (8004f20 <HAL_RCC_OscConfig+0x618>)
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	f003 0203 	and.w	r2, r3, #3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a1b      	ldr	r3, [r3, #32]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d12c      	bne.n	8004f12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d123      	bne.n	8004f12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d11b      	bne.n	8004f12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d113      	bne.n	8004f12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef4:	085b      	lsrs	r3, r3, #1
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d109      	bne.n	8004f12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f08:	085b      	lsrs	r3, r3, #1
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d001      	beq.n	8004f16 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e000      	b.n	8004f18 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3720      	adds	r7, #32
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	40021000 	.word	0x40021000
 8004f24:	019f800c 	.word	0x019f800c
 8004f28:	feeefffc 	.word	0xfeeefffc

08004f2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b086      	sub	sp, #24
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004f36:	2300      	movs	r3, #0
 8004f38:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e11e      	b.n	8005182 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f44:	4b91      	ldr	r3, [pc, #580]	; (800518c <HAL_RCC_ClockConfig+0x260>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 030f 	and.w	r3, r3, #15
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d910      	bls.n	8004f74 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f52:	4b8e      	ldr	r3, [pc, #568]	; (800518c <HAL_RCC_ClockConfig+0x260>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f023 020f 	bic.w	r2, r3, #15
 8004f5a:	498c      	ldr	r1, [pc, #560]	; (800518c <HAL_RCC_ClockConfig+0x260>)
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f62:	4b8a      	ldr	r3, [pc, #552]	; (800518c <HAL_RCC_ClockConfig+0x260>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 030f 	and.w	r3, r3, #15
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d001      	beq.n	8004f74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e106      	b.n	8005182 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0301 	and.w	r3, r3, #1
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d073      	beq.n	8005068 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	2b03      	cmp	r3, #3
 8004f86:	d129      	bne.n	8004fdc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f88:	4b81      	ldr	r3, [pc, #516]	; (8005190 <HAL_RCC_ClockConfig+0x264>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d101      	bne.n	8004f98 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e0f4      	b.n	8005182 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004f98:	f000 f99e 	bl	80052d8 <RCC_GetSysClockFreqFromPLLSource>
 8004f9c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	4a7c      	ldr	r2, [pc, #496]	; (8005194 <HAL_RCC_ClockConfig+0x268>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d93f      	bls.n	8005026 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004fa6:	4b7a      	ldr	r3, [pc, #488]	; (8005190 <HAL_RCC_ClockConfig+0x264>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d009      	beq.n	8004fc6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d033      	beq.n	8005026 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d12f      	bne.n	8005026 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004fc6:	4b72      	ldr	r3, [pc, #456]	; (8005190 <HAL_RCC_ClockConfig+0x264>)
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fce:	4a70      	ldr	r2, [pc, #448]	; (8005190 <HAL_RCC_ClockConfig+0x264>)
 8004fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fd4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004fd6:	2380      	movs	r3, #128	; 0x80
 8004fd8:	617b      	str	r3, [r7, #20]
 8004fda:	e024      	b.n	8005026 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d107      	bne.n	8004ff4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fe4:	4b6a      	ldr	r3, [pc, #424]	; (8005190 <HAL_RCC_ClockConfig+0x264>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d109      	bne.n	8005004 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e0c6      	b.n	8005182 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ff4:	4b66      	ldr	r3, [pc, #408]	; (8005190 <HAL_RCC_ClockConfig+0x264>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d101      	bne.n	8005004 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e0be      	b.n	8005182 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005004:	f000 f8ce 	bl	80051a4 <HAL_RCC_GetSysClockFreq>
 8005008:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	4a61      	ldr	r2, [pc, #388]	; (8005194 <HAL_RCC_ClockConfig+0x268>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d909      	bls.n	8005026 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005012:	4b5f      	ldr	r3, [pc, #380]	; (8005190 <HAL_RCC_ClockConfig+0x264>)
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800501a:	4a5d      	ldr	r2, [pc, #372]	; (8005190 <HAL_RCC_ClockConfig+0x264>)
 800501c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005020:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005022:	2380      	movs	r3, #128	; 0x80
 8005024:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005026:	4b5a      	ldr	r3, [pc, #360]	; (8005190 <HAL_RCC_ClockConfig+0x264>)
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f023 0203 	bic.w	r2, r3, #3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	4957      	ldr	r1, [pc, #348]	; (8005190 <HAL_RCC_ClockConfig+0x264>)
 8005034:	4313      	orrs	r3, r2
 8005036:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005038:	f7fc ff22 	bl	8001e80 <HAL_GetTick>
 800503c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800503e:	e00a      	b.n	8005056 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005040:	f7fc ff1e 	bl	8001e80 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	f241 3288 	movw	r2, #5000	; 0x1388
 800504e:	4293      	cmp	r3, r2
 8005050:	d901      	bls.n	8005056 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e095      	b.n	8005182 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005056:	4b4e      	ldr	r3, [pc, #312]	; (8005190 <HAL_RCC_ClockConfig+0x264>)
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f003 020c 	and.w	r2, r3, #12
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	429a      	cmp	r2, r3
 8005066:	d1eb      	bne.n	8005040 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0302 	and.w	r3, r3, #2
 8005070:	2b00      	cmp	r3, #0
 8005072:	d023      	beq.n	80050bc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0304 	and.w	r3, r3, #4
 800507c:	2b00      	cmp	r3, #0
 800507e:	d005      	beq.n	800508c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005080:	4b43      	ldr	r3, [pc, #268]	; (8005190 <HAL_RCC_ClockConfig+0x264>)
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	4a42      	ldr	r2, [pc, #264]	; (8005190 <HAL_RCC_ClockConfig+0x264>)
 8005086:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800508a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0308 	and.w	r3, r3, #8
 8005094:	2b00      	cmp	r3, #0
 8005096:	d007      	beq.n	80050a8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005098:	4b3d      	ldr	r3, [pc, #244]	; (8005190 <HAL_RCC_ClockConfig+0x264>)
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80050a0:	4a3b      	ldr	r2, [pc, #236]	; (8005190 <HAL_RCC_ClockConfig+0x264>)
 80050a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80050a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050a8:	4b39      	ldr	r3, [pc, #228]	; (8005190 <HAL_RCC_ClockConfig+0x264>)
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	4936      	ldr	r1, [pc, #216]	; (8005190 <HAL_RCC_ClockConfig+0x264>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	608b      	str	r3, [r1, #8]
 80050ba:	e008      	b.n	80050ce <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	2b80      	cmp	r3, #128	; 0x80
 80050c0:	d105      	bne.n	80050ce <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80050c2:	4b33      	ldr	r3, [pc, #204]	; (8005190 <HAL_RCC_ClockConfig+0x264>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	4a32      	ldr	r2, [pc, #200]	; (8005190 <HAL_RCC_ClockConfig+0x264>)
 80050c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050cc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050ce:	4b2f      	ldr	r3, [pc, #188]	; (800518c <HAL_RCC_ClockConfig+0x260>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 030f 	and.w	r3, r3, #15
 80050d6:	683a      	ldr	r2, [r7, #0]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d21d      	bcs.n	8005118 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050dc:	4b2b      	ldr	r3, [pc, #172]	; (800518c <HAL_RCC_ClockConfig+0x260>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f023 020f 	bic.w	r2, r3, #15
 80050e4:	4929      	ldr	r1, [pc, #164]	; (800518c <HAL_RCC_ClockConfig+0x260>)
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80050ec:	f7fc fec8 	bl	8001e80 <HAL_GetTick>
 80050f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050f2:	e00a      	b.n	800510a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050f4:	f7fc fec4 	bl	8001e80 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005102:	4293      	cmp	r3, r2
 8005104:	d901      	bls.n	800510a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e03b      	b.n	8005182 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800510a:	4b20      	ldr	r3, [pc, #128]	; (800518c <HAL_RCC_ClockConfig+0x260>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 030f 	and.w	r3, r3, #15
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	429a      	cmp	r2, r3
 8005116:	d1ed      	bne.n	80050f4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0304 	and.w	r3, r3, #4
 8005120:	2b00      	cmp	r3, #0
 8005122:	d008      	beq.n	8005136 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005124:	4b1a      	ldr	r3, [pc, #104]	; (8005190 <HAL_RCC_ClockConfig+0x264>)
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	4917      	ldr	r1, [pc, #92]	; (8005190 <HAL_RCC_ClockConfig+0x264>)
 8005132:	4313      	orrs	r3, r2
 8005134:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0308 	and.w	r3, r3, #8
 800513e:	2b00      	cmp	r3, #0
 8005140:	d009      	beq.n	8005156 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005142:	4b13      	ldr	r3, [pc, #76]	; (8005190 <HAL_RCC_ClockConfig+0x264>)
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	00db      	lsls	r3, r3, #3
 8005150:	490f      	ldr	r1, [pc, #60]	; (8005190 <HAL_RCC_ClockConfig+0x264>)
 8005152:	4313      	orrs	r3, r2
 8005154:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005156:	f000 f825 	bl	80051a4 <HAL_RCC_GetSysClockFreq>
 800515a:	4602      	mov	r2, r0
 800515c:	4b0c      	ldr	r3, [pc, #48]	; (8005190 <HAL_RCC_ClockConfig+0x264>)
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	091b      	lsrs	r3, r3, #4
 8005162:	f003 030f 	and.w	r3, r3, #15
 8005166:	490c      	ldr	r1, [pc, #48]	; (8005198 <HAL_RCC_ClockConfig+0x26c>)
 8005168:	5ccb      	ldrb	r3, [r1, r3]
 800516a:	f003 031f 	and.w	r3, r3, #31
 800516e:	fa22 f303 	lsr.w	r3, r2, r3
 8005172:	4a0a      	ldr	r2, [pc, #40]	; (800519c <HAL_RCC_ClockConfig+0x270>)
 8005174:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005176:	4b0a      	ldr	r3, [pc, #40]	; (80051a0 <HAL_RCC_ClockConfig+0x274>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4618      	mov	r0, r3
 800517c:	f7fc fe34 	bl	8001de8 <HAL_InitTick>
 8005180:	4603      	mov	r3, r0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3718      	adds	r7, #24
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	40022000 	.word	0x40022000
 8005190:	40021000 	.word	0x40021000
 8005194:	04c4b400 	.word	0x04c4b400
 8005198:	08008a48 	.word	0x08008a48
 800519c:	2000085c 	.word	0x2000085c
 80051a0:	20000860 	.word	0x20000860

080051a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b087      	sub	sp, #28
 80051a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80051aa:	4b2c      	ldr	r3, [pc, #176]	; (800525c <HAL_RCC_GetSysClockFreq+0xb8>)
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f003 030c 	and.w	r3, r3, #12
 80051b2:	2b04      	cmp	r3, #4
 80051b4:	d102      	bne.n	80051bc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80051b6:	4b2a      	ldr	r3, [pc, #168]	; (8005260 <HAL_RCC_GetSysClockFreq+0xbc>)
 80051b8:	613b      	str	r3, [r7, #16]
 80051ba:	e047      	b.n	800524c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80051bc:	4b27      	ldr	r3, [pc, #156]	; (800525c <HAL_RCC_GetSysClockFreq+0xb8>)
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f003 030c 	and.w	r3, r3, #12
 80051c4:	2b08      	cmp	r3, #8
 80051c6:	d102      	bne.n	80051ce <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80051c8:	4b26      	ldr	r3, [pc, #152]	; (8005264 <HAL_RCC_GetSysClockFreq+0xc0>)
 80051ca:	613b      	str	r3, [r7, #16]
 80051cc:	e03e      	b.n	800524c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80051ce:	4b23      	ldr	r3, [pc, #140]	; (800525c <HAL_RCC_GetSysClockFreq+0xb8>)
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f003 030c 	and.w	r3, r3, #12
 80051d6:	2b0c      	cmp	r3, #12
 80051d8:	d136      	bne.n	8005248 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80051da:	4b20      	ldr	r3, [pc, #128]	; (800525c <HAL_RCC_GetSysClockFreq+0xb8>)
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	f003 0303 	and.w	r3, r3, #3
 80051e2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051e4:	4b1d      	ldr	r3, [pc, #116]	; (800525c <HAL_RCC_GetSysClockFreq+0xb8>)
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	091b      	lsrs	r3, r3, #4
 80051ea:	f003 030f 	and.w	r3, r3, #15
 80051ee:	3301      	adds	r3, #1
 80051f0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2b03      	cmp	r3, #3
 80051f6:	d10c      	bne.n	8005212 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051f8:	4a1a      	ldr	r2, [pc, #104]	; (8005264 <HAL_RCC_GetSysClockFreq+0xc0>)
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005200:	4a16      	ldr	r2, [pc, #88]	; (800525c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005202:	68d2      	ldr	r2, [r2, #12]
 8005204:	0a12      	lsrs	r2, r2, #8
 8005206:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800520a:	fb02 f303 	mul.w	r3, r2, r3
 800520e:	617b      	str	r3, [r7, #20]
      break;
 8005210:	e00c      	b.n	800522c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005212:	4a13      	ldr	r2, [pc, #76]	; (8005260 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	fbb2 f3f3 	udiv	r3, r2, r3
 800521a:	4a10      	ldr	r2, [pc, #64]	; (800525c <HAL_RCC_GetSysClockFreq+0xb8>)
 800521c:	68d2      	ldr	r2, [r2, #12]
 800521e:	0a12      	lsrs	r2, r2, #8
 8005220:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005224:	fb02 f303 	mul.w	r3, r2, r3
 8005228:	617b      	str	r3, [r7, #20]
      break;
 800522a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800522c:	4b0b      	ldr	r3, [pc, #44]	; (800525c <HAL_RCC_GetSysClockFreq+0xb8>)
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	0e5b      	lsrs	r3, r3, #25
 8005232:	f003 0303 	and.w	r3, r3, #3
 8005236:	3301      	adds	r3, #1
 8005238:	005b      	lsls	r3, r3, #1
 800523a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	fbb2 f3f3 	udiv	r3, r2, r3
 8005244:	613b      	str	r3, [r7, #16]
 8005246:	e001      	b.n	800524c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005248:	2300      	movs	r3, #0
 800524a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800524c:	693b      	ldr	r3, [r7, #16]
}
 800524e:	4618      	mov	r0, r3
 8005250:	371c      	adds	r7, #28
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	40021000 	.word	0x40021000
 8005260:	00f42400 	.word	0x00f42400
 8005264:	007a1200 	.word	0x007a1200

08005268 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005268:	b480      	push	{r7}
 800526a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800526c:	4b03      	ldr	r3, [pc, #12]	; (800527c <HAL_RCC_GetHCLKFreq+0x14>)
 800526e:	681b      	ldr	r3, [r3, #0]
}
 8005270:	4618      	mov	r0, r3
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	2000085c 	.word	0x2000085c

08005280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005284:	f7ff fff0 	bl	8005268 <HAL_RCC_GetHCLKFreq>
 8005288:	4602      	mov	r2, r0
 800528a:	4b06      	ldr	r3, [pc, #24]	; (80052a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	0a1b      	lsrs	r3, r3, #8
 8005290:	f003 0307 	and.w	r3, r3, #7
 8005294:	4904      	ldr	r1, [pc, #16]	; (80052a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005296:	5ccb      	ldrb	r3, [r1, r3]
 8005298:	f003 031f 	and.w	r3, r3, #31
 800529c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	40021000 	.word	0x40021000
 80052a8:	08008a58 	.word	0x08008a58

080052ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80052b0:	f7ff ffda 	bl	8005268 <HAL_RCC_GetHCLKFreq>
 80052b4:	4602      	mov	r2, r0
 80052b6:	4b06      	ldr	r3, [pc, #24]	; (80052d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	0adb      	lsrs	r3, r3, #11
 80052bc:	f003 0307 	and.w	r3, r3, #7
 80052c0:	4904      	ldr	r1, [pc, #16]	; (80052d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80052c2:	5ccb      	ldrb	r3, [r1, r3]
 80052c4:	f003 031f 	and.w	r3, r3, #31
 80052c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	40021000 	.word	0x40021000
 80052d4:	08008a58 	.word	0x08008a58

080052d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80052d8:	b480      	push	{r7}
 80052da:	b087      	sub	sp, #28
 80052dc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052de:	4b1e      	ldr	r3, [pc, #120]	; (8005358 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	f003 0303 	and.w	r3, r3, #3
 80052e6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052e8:	4b1b      	ldr	r3, [pc, #108]	; (8005358 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	091b      	lsrs	r3, r3, #4
 80052ee:	f003 030f 	and.w	r3, r3, #15
 80052f2:	3301      	adds	r3, #1
 80052f4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	2b03      	cmp	r3, #3
 80052fa:	d10c      	bne.n	8005316 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052fc:	4a17      	ldr	r2, [pc, #92]	; (800535c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	fbb2 f3f3 	udiv	r3, r2, r3
 8005304:	4a14      	ldr	r2, [pc, #80]	; (8005358 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005306:	68d2      	ldr	r2, [r2, #12]
 8005308:	0a12      	lsrs	r2, r2, #8
 800530a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800530e:	fb02 f303 	mul.w	r3, r2, r3
 8005312:	617b      	str	r3, [r7, #20]
    break;
 8005314:	e00c      	b.n	8005330 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005316:	4a12      	ldr	r2, [pc, #72]	; (8005360 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	fbb2 f3f3 	udiv	r3, r2, r3
 800531e:	4a0e      	ldr	r2, [pc, #56]	; (8005358 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005320:	68d2      	ldr	r2, [r2, #12]
 8005322:	0a12      	lsrs	r2, r2, #8
 8005324:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005328:	fb02 f303 	mul.w	r3, r2, r3
 800532c:	617b      	str	r3, [r7, #20]
    break;
 800532e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005330:	4b09      	ldr	r3, [pc, #36]	; (8005358 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	0e5b      	lsrs	r3, r3, #25
 8005336:	f003 0303 	and.w	r3, r3, #3
 800533a:	3301      	adds	r3, #1
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	fbb2 f3f3 	udiv	r3, r2, r3
 8005348:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800534a:	687b      	ldr	r3, [r7, #4]
}
 800534c:	4618      	mov	r0, r3
 800534e:	371c      	adds	r7, #28
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr
 8005358:	40021000 	.word	0x40021000
 800535c:	007a1200 	.word	0x007a1200
 8005360:	00f42400 	.word	0x00f42400

08005364 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b086      	sub	sp, #24
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800536c:	2300      	movs	r3, #0
 800536e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005370:	2300      	movs	r3, #0
 8005372:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800537c:	2b00      	cmp	r3, #0
 800537e:	f000 8098 	beq.w	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005382:	2300      	movs	r3, #0
 8005384:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005386:	4b43      	ldr	r3, [pc, #268]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800538a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d10d      	bne.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005392:	4b40      	ldr	r3, [pc, #256]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005396:	4a3f      	ldr	r2, [pc, #252]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800539c:	6593      	str	r3, [r2, #88]	; 0x58
 800539e:	4b3d      	ldr	r3, [pc, #244]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053a6:	60bb      	str	r3, [r7, #8]
 80053a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053aa:	2301      	movs	r3, #1
 80053ac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053ae:	4b3a      	ldr	r3, [pc, #232]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a39      	ldr	r2, [pc, #228]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80053b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053ba:	f7fc fd61 	bl	8001e80 <HAL_GetTick>
 80053be:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053c0:	e009      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053c2:	f7fc fd5d 	bl	8001e80 <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d902      	bls.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	74fb      	strb	r3, [r7, #19]
        break;
 80053d4:	e005      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053d6:	4b30      	ldr	r3, [pc, #192]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d0ef      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80053e2:	7cfb      	ldrb	r3, [r7, #19]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d159      	bne.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80053e8:	4b2a      	ldr	r3, [pc, #168]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053f2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d01e      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	429a      	cmp	r2, r3
 8005402:	d019      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005404:	4b23      	ldr	r3, [pc, #140]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800540a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800540e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005410:	4b20      	ldr	r3, [pc, #128]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005416:	4a1f      	ldr	r2, [pc, #124]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800541c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005420:	4b1c      	ldr	r3, [pc, #112]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005426:	4a1b      	ldr	r2, [pc, #108]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005428:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800542c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005430:	4a18      	ldr	r2, [pc, #96]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b00      	cmp	r3, #0
 8005440:	d016      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005442:	f7fc fd1d 	bl	8001e80 <HAL_GetTick>
 8005446:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005448:	e00b      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800544a:	f7fc fd19 	bl	8001e80 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	f241 3288 	movw	r2, #5000	; 0x1388
 8005458:	4293      	cmp	r3, r2
 800545a:	d902      	bls.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	74fb      	strb	r3, [r7, #19]
            break;
 8005460:	e006      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005462:	4b0c      	ldr	r3, [pc, #48]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005468:	f003 0302 	and.w	r3, r3, #2
 800546c:	2b00      	cmp	r3, #0
 800546e:	d0ec      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005470:	7cfb      	ldrb	r3, [r7, #19]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10b      	bne.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005476:	4b07      	ldr	r3, [pc, #28]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800547c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005484:	4903      	ldr	r1, [pc, #12]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005486:	4313      	orrs	r3, r2
 8005488:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800548c:	e008      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800548e:	7cfb      	ldrb	r3, [r7, #19]
 8005490:	74bb      	strb	r3, [r7, #18]
 8005492:	e005      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005494:	40021000 	.word	0x40021000
 8005498:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800549c:	7cfb      	ldrb	r3, [r7, #19]
 800549e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054a0:	7c7b      	ldrb	r3, [r7, #17]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d105      	bne.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054a6:	4ba6      	ldr	r3, [pc, #664]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054aa:	4aa5      	ldr	r2, [pc, #660]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00a      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80054be:	4ba0      	ldr	r3, [pc, #640]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c4:	f023 0203 	bic.w	r2, r3, #3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	499c      	ldr	r1, [pc, #624]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0302 	and.w	r3, r3, #2
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00a      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80054e0:	4b97      	ldr	r3, [pc, #604]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054e6:	f023 020c 	bic.w	r2, r3, #12
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	4994      	ldr	r1, [pc, #592]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0304 	and.w	r3, r3, #4
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00a      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005502:	4b8f      	ldr	r3, [pc, #572]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005508:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	498b      	ldr	r1, [pc, #556]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005512:	4313      	orrs	r3, r2
 8005514:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0308 	and.w	r3, r3, #8
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00a      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005524:	4b86      	ldr	r3, [pc, #536]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800552a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	4983      	ldr	r1, [pc, #524]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005534:	4313      	orrs	r3, r2
 8005536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0320 	and.w	r3, r3, #32
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00a      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005546:	4b7e      	ldr	r3, [pc, #504]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800554c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	695b      	ldr	r3, [r3, #20]
 8005554:	497a      	ldr	r1, [pc, #488]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005556:	4313      	orrs	r3, r2
 8005558:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00a      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005568:	4b75      	ldr	r3, [pc, #468]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800556a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800556e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	4972      	ldr	r1, [pc, #456]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005578:	4313      	orrs	r3, r2
 800557a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00a      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800558a:	4b6d      	ldr	r3, [pc, #436]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800558c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005590:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	69db      	ldr	r3, [r3, #28]
 8005598:	4969      	ldr	r1, [pc, #420]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800559a:	4313      	orrs	r3, r2
 800559c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00a      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80055ac:	4b64      	ldr	r3, [pc, #400]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	4961      	ldr	r1, [pc, #388]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00a      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055ce:	4b5c      	ldr	r3, [pc, #368]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055dc:	4958      	ldr	r1, [pc, #352]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d015      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055f0:	4b53      	ldr	r3, [pc, #332]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fe:	4950      	ldr	r1, [pc, #320]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005600:	4313      	orrs	r3, r2
 8005602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800560e:	d105      	bne.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005610:	4b4b      	ldr	r3, [pc, #300]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	4a4a      	ldr	r2, [pc, #296]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005616:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800561a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005624:	2b00      	cmp	r3, #0
 8005626:	d015      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005628:	4b45      	ldr	r3, [pc, #276]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800562a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800562e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005636:	4942      	ldr	r1, [pc, #264]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005638:	4313      	orrs	r3, r2
 800563a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005642:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005646:	d105      	bne.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005648:	4b3d      	ldr	r3, [pc, #244]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	4a3c      	ldr	r2, [pc, #240]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800564e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005652:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d015      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005660:	4b37      	ldr	r3, [pc, #220]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005666:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566e:	4934      	ldr	r1, [pc, #208]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005670:	4313      	orrs	r3, r2
 8005672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800567e:	d105      	bne.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005680:	4b2f      	ldr	r3, [pc, #188]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	4a2e      	ldr	r2, [pc, #184]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005686:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800568a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d015      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005698:	4b29      	ldr	r3, [pc, #164]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800569a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800569e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056a6:	4926      	ldr	r1, [pc, #152]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056b6:	d105      	bne.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056b8:	4b21      	ldr	r3, [pc, #132]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	4a20      	ldr	r2, [pc, #128]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056c2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d015      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80056d0:	4b1b      	ldr	r3, [pc, #108]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056de:	4918      	ldr	r1, [pc, #96]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056ee:	d105      	bne.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056f0:	4b13      	ldr	r3, [pc, #76]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	4a12      	ldr	r2, [pc, #72]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056fa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d015      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005708:	4b0d      	ldr	r3, [pc, #52]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800570a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800570e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005716:	490a      	ldr	r1, [pc, #40]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005718:	4313      	orrs	r3, r2
 800571a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005722:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005726:	d105      	bne.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005728:	4b05      	ldr	r3, [pc, #20]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	4a04      	ldr	r2, [pc, #16]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800572e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005732:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005734:	7cbb      	ldrb	r3, [r7, #18]
}
 8005736:	4618      	mov	r0, r3
 8005738:	3718      	adds	r7, #24
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	40021000 	.word	0x40021000

08005744 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d101      	bne.n	8005756 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e049      	b.n	80057ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d106      	bne.n	8005770 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f7fc f9aa 	bl	8001ac4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2202      	movs	r2, #2
 8005774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	3304      	adds	r3, #4
 8005780:	4619      	mov	r1, r3
 8005782:	4610      	mov	r0, r2
 8005784:	f000 fb74 	bl	8005e70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3708      	adds	r7, #8
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
	...

080057f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005802:	b2db      	uxtb	r3, r3
 8005804:	2b01      	cmp	r3, #1
 8005806:	d001      	beq.n	800580c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e042      	b.n	8005892 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2202      	movs	r2, #2
 8005810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a21      	ldr	r2, [pc, #132]	; (80058a0 <HAL_TIM_Base_Start+0xac>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d018      	beq.n	8005850 <HAL_TIM_Base_Start+0x5c>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005826:	d013      	beq.n	8005850 <HAL_TIM_Base_Start+0x5c>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a1d      	ldr	r2, [pc, #116]	; (80058a4 <HAL_TIM_Base_Start+0xb0>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d00e      	beq.n	8005850 <HAL_TIM_Base_Start+0x5c>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a1c      	ldr	r2, [pc, #112]	; (80058a8 <HAL_TIM_Base_Start+0xb4>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d009      	beq.n	8005850 <HAL_TIM_Base_Start+0x5c>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a1a      	ldr	r2, [pc, #104]	; (80058ac <HAL_TIM_Base_Start+0xb8>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d004      	beq.n	8005850 <HAL_TIM_Base_Start+0x5c>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a19      	ldr	r2, [pc, #100]	; (80058b0 <HAL_TIM_Base_Start+0xbc>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d115      	bne.n	800587c <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	689a      	ldr	r2, [r3, #8]
 8005856:	4b17      	ldr	r3, [pc, #92]	; (80058b4 <HAL_TIM_Base_Start+0xc0>)
 8005858:	4013      	ands	r3, r2
 800585a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2b06      	cmp	r3, #6
 8005860:	d015      	beq.n	800588e <HAL_TIM_Base_Start+0x9a>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005868:	d011      	beq.n	800588e <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f042 0201 	orr.w	r2, r2, #1
 8005878:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800587a:	e008      	b.n	800588e <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f042 0201 	orr.w	r2, r2, #1
 800588a:	601a      	str	r2, [r3, #0]
 800588c:	e000      	b.n	8005890 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800588e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3714      	adds	r7, #20
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	40012c00 	.word	0x40012c00
 80058a4:	40000400 	.word	0x40000400
 80058a8:	40000800 	.word	0x40000800
 80058ac:	40013400 	.word	0x40013400
 80058b0:	40014000 	.word	0x40014000
 80058b4:	00010007 	.word	0x00010007

080058b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d001      	beq.n	80058d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e04a      	b.n	8005966 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2202      	movs	r2, #2
 80058d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68da      	ldr	r2, [r3, #12]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f042 0201 	orr.w	r2, r2, #1
 80058e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a21      	ldr	r2, [pc, #132]	; (8005974 <HAL_TIM_Base_Start_IT+0xbc>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d018      	beq.n	8005924 <HAL_TIM_Base_Start_IT+0x6c>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058fa:	d013      	beq.n	8005924 <HAL_TIM_Base_Start_IT+0x6c>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a1d      	ldr	r2, [pc, #116]	; (8005978 <HAL_TIM_Base_Start_IT+0xc0>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d00e      	beq.n	8005924 <HAL_TIM_Base_Start_IT+0x6c>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a1c      	ldr	r2, [pc, #112]	; (800597c <HAL_TIM_Base_Start_IT+0xc4>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d009      	beq.n	8005924 <HAL_TIM_Base_Start_IT+0x6c>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a1a      	ldr	r2, [pc, #104]	; (8005980 <HAL_TIM_Base_Start_IT+0xc8>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d004      	beq.n	8005924 <HAL_TIM_Base_Start_IT+0x6c>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a19      	ldr	r2, [pc, #100]	; (8005984 <HAL_TIM_Base_Start_IT+0xcc>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d115      	bne.n	8005950 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689a      	ldr	r2, [r3, #8]
 800592a:	4b17      	ldr	r3, [pc, #92]	; (8005988 <HAL_TIM_Base_Start_IT+0xd0>)
 800592c:	4013      	ands	r3, r2
 800592e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2b06      	cmp	r3, #6
 8005934:	d015      	beq.n	8005962 <HAL_TIM_Base_Start_IT+0xaa>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800593c:	d011      	beq.n	8005962 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f042 0201 	orr.w	r2, r2, #1
 800594c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800594e:	e008      	b.n	8005962 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f042 0201 	orr.w	r2, r2, #1
 800595e:	601a      	str	r2, [r3, #0]
 8005960:	e000      	b.n	8005964 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005962:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3714      	adds	r7, #20
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	40012c00 	.word	0x40012c00
 8005978:	40000400 	.word	0x40000400
 800597c:	40000800 	.word	0x40000800
 8005980:	40013400 	.word	0x40013400
 8005984:	40014000 	.word	0x40014000
 8005988:	00010007 	.word	0x00010007

0800598c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d020      	beq.n	80059f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f003 0302 	and.w	r3, r3, #2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d01b      	beq.n	80059f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f06f 0202 	mvn.w	r2, #2
 80059c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2201      	movs	r2, #1
 80059c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	f003 0303 	and.w	r3, r3, #3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d003      	beq.n	80059de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 fa2c 	bl	8005e34 <HAL_TIM_IC_CaptureCallback>
 80059dc:	e005      	b.n	80059ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 fa1e 	bl	8005e20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 fa2f 	bl	8005e48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	f003 0304 	and.w	r3, r3, #4
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d020      	beq.n	8005a3c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f003 0304 	and.w	r3, r3, #4
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d01b      	beq.n	8005a3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f06f 0204 	mvn.w	r2, #4
 8005a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2202      	movs	r2, #2
 8005a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d003      	beq.n	8005a2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 fa06 	bl	8005e34 <HAL_TIM_IC_CaptureCallback>
 8005a28:	e005      	b.n	8005a36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f9f8 	bl	8005e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 fa09 	bl	8005e48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	f003 0308 	and.w	r3, r3, #8
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d020      	beq.n	8005a88 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f003 0308 	and.w	r3, r3, #8
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d01b      	beq.n	8005a88 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f06f 0208 	mvn.w	r2, #8
 8005a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2204      	movs	r2, #4
 8005a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	69db      	ldr	r3, [r3, #28]
 8005a66:	f003 0303 	and.w	r3, r3, #3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d003      	beq.n	8005a76 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f9e0 	bl	8005e34 <HAL_TIM_IC_CaptureCallback>
 8005a74:	e005      	b.n	8005a82 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f9d2 	bl	8005e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 f9e3 	bl	8005e48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	f003 0310 	and.w	r3, r3, #16
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d020      	beq.n	8005ad4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f003 0310 	and.w	r3, r3, #16
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d01b      	beq.n	8005ad4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f06f 0210 	mvn.w	r2, #16
 8005aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2208      	movs	r2, #8
 8005aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	69db      	ldr	r3, [r3, #28]
 8005ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d003      	beq.n	8005ac2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 f9ba 	bl	8005e34 <HAL_TIM_IC_CaptureCallback>
 8005ac0:	e005      	b.n	8005ace <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f9ac 	bl	8005e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 f9bd 	bl	8005e48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00c      	beq.n	8005af8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f003 0301 	and.w	r3, r3, #1
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d007      	beq.n	8005af8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f06f 0201 	mvn.w	r2, #1
 8005af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f7fb fa42 	bl	8000f7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d104      	bne.n	8005b0c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00c      	beq.n	8005b26 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d007      	beq.n	8005b26 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8005b1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 fb69 	bl	80061f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d00c      	beq.n	8005b4a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d007      	beq.n	8005b4a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 fb61 	bl	800620c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00c      	beq.n	8005b6e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d007      	beq.n	8005b6e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 f977 	bl	8005e5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	f003 0320 	and.w	r3, r3, #32
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00c      	beq.n	8005b92 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f003 0320 	and.w	r3, r3, #32
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d007      	beq.n	8005b92 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f06f 0220 	mvn.w	r2, #32
 8005b8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 fb29 	bl	80061e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00c      	beq.n	8005bb6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d007      	beq.n	8005bb6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 fb35 	bl	8006220 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00c      	beq.n	8005bda <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d007      	beq.n	8005bda <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 fb2d 	bl	8006234 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00c      	beq.n	8005bfe <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d007      	beq.n	8005bfe <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005bf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 fb25 	bl	8006248 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00c      	beq.n	8005c22 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d007      	beq.n	8005c22 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005c1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 fb1d 	bl	800625c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c22:	bf00      	nop
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
	...

08005c2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c36:	2300      	movs	r3, #0
 8005c38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d101      	bne.n	8005c48 <HAL_TIM_ConfigClockSource+0x1c>
 8005c44:	2302      	movs	r3, #2
 8005c46:	e0de      	b.n	8005e06 <HAL_TIM_ConfigClockSource+0x1da>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2202      	movs	r2, #2
 8005c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005c66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68ba      	ldr	r2, [r7, #8]
 8005c7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a63      	ldr	r2, [pc, #396]	; (8005e10 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	f000 80a9 	beq.w	8005dda <HAL_TIM_ConfigClockSource+0x1ae>
 8005c88:	4a61      	ldr	r2, [pc, #388]	; (8005e10 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	f200 80ae 	bhi.w	8005dec <HAL_TIM_ConfigClockSource+0x1c0>
 8005c90:	4a60      	ldr	r2, [pc, #384]	; (8005e14 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	f000 80a1 	beq.w	8005dda <HAL_TIM_ConfigClockSource+0x1ae>
 8005c98:	4a5e      	ldr	r2, [pc, #376]	; (8005e14 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	f200 80a6 	bhi.w	8005dec <HAL_TIM_ConfigClockSource+0x1c0>
 8005ca0:	4a5d      	ldr	r2, [pc, #372]	; (8005e18 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	f000 8099 	beq.w	8005dda <HAL_TIM_ConfigClockSource+0x1ae>
 8005ca8:	4a5b      	ldr	r2, [pc, #364]	; (8005e18 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	f200 809e 	bhi.w	8005dec <HAL_TIM_ConfigClockSource+0x1c0>
 8005cb0:	4a5a      	ldr	r2, [pc, #360]	; (8005e1c <HAL_TIM_ConfigClockSource+0x1f0>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	f000 8091 	beq.w	8005dda <HAL_TIM_ConfigClockSource+0x1ae>
 8005cb8:	4a58      	ldr	r2, [pc, #352]	; (8005e1c <HAL_TIM_ConfigClockSource+0x1f0>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	f200 8096 	bhi.w	8005dec <HAL_TIM_ConfigClockSource+0x1c0>
 8005cc0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005cc4:	f000 8089 	beq.w	8005dda <HAL_TIM_ConfigClockSource+0x1ae>
 8005cc8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005ccc:	f200 808e 	bhi.w	8005dec <HAL_TIM_ConfigClockSource+0x1c0>
 8005cd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cd4:	d03e      	beq.n	8005d54 <HAL_TIM_ConfigClockSource+0x128>
 8005cd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cda:	f200 8087 	bhi.w	8005dec <HAL_TIM_ConfigClockSource+0x1c0>
 8005cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ce2:	f000 8086 	beq.w	8005df2 <HAL_TIM_ConfigClockSource+0x1c6>
 8005ce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cea:	d87f      	bhi.n	8005dec <HAL_TIM_ConfigClockSource+0x1c0>
 8005cec:	2b70      	cmp	r3, #112	; 0x70
 8005cee:	d01a      	beq.n	8005d26 <HAL_TIM_ConfigClockSource+0xfa>
 8005cf0:	2b70      	cmp	r3, #112	; 0x70
 8005cf2:	d87b      	bhi.n	8005dec <HAL_TIM_ConfigClockSource+0x1c0>
 8005cf4:	2b60      	cmp	r3, #96	; 0x60
 8005cf6:	d050      	beq.n	8005d9a <HAL_TIM_ConfigClockSource+0x16e>
 8005cf8:	2b60      	cmp	r3, #96	; 0x60
 8005cfa:	d877      	bhi.n	8005dec <HAL_TIM_ConfigClockSource+0x1c0>
 8005cfc:	2b50      	cmp	r3, #80	; 0x50
 8005cfe:	d03c      	beq.n	8005d7a <HAL_TIM_ConfigClockSource+0x14e>
 8005d00:	2b50      	cmp	r3, #80	; 0x50
 8005d02:	d873      	bhi.n	8005dec <HAL_TIM_ConfigClockSource+0x1c0>
 8005d04:	2b40      	cmp	r3, #64	; 0x40
 8005d06:	d058      	beq.n	8005dba <HAL_TIM_ConfigClockSource+0x18e>
 8005d08:	2b40      	cmp	r3, #64	; 0x40
 8005d0a:	d86f      	bhi.n	8005dec <HAL_TIM_ConfigClockSource+0x1c0>
 8005d0c:	2b30      	cmp	r3, #48	; 0x30
 8005d0e:	d064      	beq.n	8005dda <HAL_TIM_ConfigClockSource+0x1ae>
 8005d10:	2b30      	cmp	r3, #48	; 0x30
 8005d12:	d86b      	bhi.n	8005dec <HAL_TIM_ConfigClockSource+0x1c0>
 8005d14:	2b20      	cmp	r3, #32
 8005d16:	d060      	beq.n	8005dda <HAL_TIM_ConfigClockSource+0x1ae>
 8005d18:	2b20      	cmp	r3, #32
 8005d1a:	d867      	bhi.n	8005dec <HAL_TIM_ConfigClockSource+0x1c0>
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d05c      	beq.n	8005dda <HAL_TIM_ConfigClockSource+0x1ae>
 8005d20:	2b10      	cmp	r3, #16
 8005d22:	d05a      	beq.n	8005dda <HAL_TIM_ConfigClockSource+0x1ae>
 8005d24:	e062      	b.n	8005dec <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6818      	ldr	r0, [r3, #0]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	6899      	ldr	r1, [r3, #8]
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	685a      	ldr	r2, [r3, #4]
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	f000 f9b3 	bl	80060a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68ba      	ldr	r2, [r7, #8]
 8005d50:	609a      	str	r2, [r3, #8]
      break;
 8005d52:	e04f      	b.n	8005df4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6818      	ldr	r0, [r3, #0]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	6899      	ldr	r1, [r3, #8]
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	f000 f99c 	bl	80060a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	689a      	ldr	r2, [r3, #8]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d76:	609a      	str	r2, [r3, #8]
      break;
 8005d78:	e03c      	b.n	8005df4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6818      	ldr	r0, [r3, #0]
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	6859      	ldr	r1, [r3, #4]
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	461a      	mov	r2, r3
 8005d88:	f000 f90e 	bl	8005fa8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2150      	movs	r1, #80	; 0x50
 8005d92:	4618      	mov	r0, r3
 8005d94:	f000 f967 	bl	8006066 <TIM_ITRx_SetConfig>
      break;
 8005d98:	e02c      	b.n	8005df4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6818      	ldr	r0, [r3, #0]
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	6859      	ldr	r1, [r3, #4]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	461a      	mov	r2, r3
 8005da8:	f000 f92d 	bl	8006006 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2160      	movs	r1, #96	; 0x60
 8005db2:	4618      	mov	r0, r3
 8005db4:	f000 f957 	bl	8006066 <TIM_ITRx_SetConfig>
      break;
 8005db8:	e01c      	b.n	8005df4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6818      	ldr	r0, [r3, #0]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	6859      	ldr	r1, [r3, #4]
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	f000 f8ee 	bl	8005fa8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2140      	movs	r1, #64	; 0x40
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f000 f947 	bl	8006066 <TIM_ITRx_SetConfig>
      break;
 8005dd8:	e00c      	b.n	8005df4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4619      	mov	r1, r3
 8005de4:	4610      	mov	r0, r2
 8005de6:	f000 f93e 	bl	8006066 <TIM_ITRx_SetConfig>
      break;
 8005dea:	e003      	b.n	8005df4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	73fb      	strb	r3, [r7, #15]
      break;
 8005df0:	e000      	b.n	8005df4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8005df2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	00100070 	.word	0x00100070
 8005e14:	00100040 	.word	0x00100040
 8005e18:	00100030 	.word	0x00100030
 8005e1c:	00100020 	.word	0x00100020

08005e20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e64:	bf00      	nop
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a42      	ldr	r2, [pc, #264]	; (8005f8c <TIM_Base_SetConfig+0x11c>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d00f      	beq.n	8005ea8 <TIM_Base_SetConfig+0x38>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e8e:	d00b      	beq.n	8005ea8 <TIM_Base_SetConfig+0x38>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a3f      	ldr	r2, [pc, #252]	; (8005f90 <TIM_Base_SetConfig+0x120>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d007      	beq.n	8005ea8 <TIM_Base_SetConfig+0x38>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a3e      	ldr	r2, [pc, #248]	; (8005f94 <TIM_Base_SetConfig+0x124>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d003      	beq.n	8005ea8 <TIM_Base_SetConfig+0x38>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a3d      	ldr	r2, [pc, #244]	; (8005f98 <TIM_Base_SetConfig+0x128>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d108      	bne.n	8005eba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a33      	ldr	r2, [pc, #204]	; (8005f8c <TIM_Base_SetConfig+0x11c>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d01b      	beq.n	8005efa <TIM_Base_SetConfig+0x8a>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ec8:	d017      	beq.n	8005efa <TIM_Base_SetConfig+0x8a>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a30      	ldr	r2, [pc, #192]	; (8005f90 <TIM_Base_SetConfig+0x120>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d013      	beq.n	8005efa <TIM_Base_SetConfig+0x8a>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a2f      	ldr	r2, [pc, #188]	; (8005f94 <TIM_Base_SetConfig+0x124>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d00f      	beq.n	8005efa <TIM_Base_SetConfig+0x8a>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a2e      	ldr	r2, [pc, #184]	; (8005f98 <TIM_Base_SetConfig+0x128>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d00b      	beq.n	8005efa <TIM_Base_SetConfig+0x8a>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a2d      	ldr	r2, [pc, #180]	; (8005f9c <TIM_Base_SetConfig+0x12c>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d007      	beq.n	8005efa <TIM_Base_SetConfig+0x8a>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a2c      	ldr	r2, [pc, #176]	; (8005fa0 <TIM_Base_SetConfig+0x130>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d003      	beq.n	8005efa <TIM_Base_SetConfig+0x8a>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a2b      	ldr	r2, [pc, #172]	; (8005fa4 <TIM_Base_SetConfig+0x134>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d108      	bne.n	8005f0c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	689a      	ldr	r2, [r3, #8]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a16      	ldr	r2, [pc, #88]	; (8005f8c <TIM_Base_SetConfig+0x11c>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d00f      	beq.n	8005f58 <TIM_Base_SetConfig+0xe8>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a17      	ldr	r2, [pc, #92]	; (8005f98 <TIM_Base_SetConfig+0x128>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d00b      	beq.n	8005f58 <TIM_Base_SetConfig+0xe8>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a16      	ldr	r2, [pc, #88]	; (8005f9c <TIM_Base_SetConfig+0x12c>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d007      	beq.n	8005f58 <TIM_Base_SetConfig+0xe8>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a15      	ldr	r2, [pc, #84]	; (8005fa0 <TIM_Base_SetConfig+0x130>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d003      	beq.n	8005f58 <TIM_Base_SetConfig+0xe8>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a14      	ldr	r2, [pc, #80]	; (8005fa4 <TIM_Base_SetConfig+0x134>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d103      	bne.n	8005f60 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	691a      	ldr	r2, [r3, #16]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	f003 0301 	and.w	r3, r3, #1
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d105      	bne.n	8005f7e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	f023 0201 	bic.w	r2, r3, #1
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	611a      	str	r2, [r3, #16]
  }
}
 8005f7e:	bf00      	nop
 8005f80:	3714      	adds	r7, #20
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	40012c00 	.word	0x40012c00
 8005f90:	40000400 	.word	0x40000400
 8005f94:	40000800 	.word	0x40000800
 8005f98:	40013400 	.word	0x40013400
 8005f9c:	40014000 	.word	0x40014000
 8005fa0:	40014400 	.word	0x40014400
 8005fa4:	40014800 	.word	0x40014800

08005fa8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b087      	sub	sp, #28
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6a1b      	ldr	r3, [r3, #32]
 8005fb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6a1b      	ldr	r3, [r3, #32]
 8005fbe:	f023 0201 	bic.w	r2, r3, #1
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	011b      	lsls	r3, r3, #4
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	f023 030a 	bic.w	r3, r3, #10
 8005fe4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fe6:	697a      	ldr	r2, [r7, #20]
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	621a      	str	r2, [r3, #32]
}
 8005ffa:	bf00      	nop
 8005ffc:	371c      	adds	r7, #28
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr

08006006 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006006:	b480      	push	{r7}
 8006008:	b087      	sub	sp, #28
 800600a:	af00      	add	r7, sp, #0
 800600c:	60f8      	str	r0, [r7, #12]
 800600e:	60b9      	str	r1, [r7, #8]
 8006010:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6a1b      	ldr	r3, [r3, #32]
 8006016:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6a1b      	ldr	r3, [r3, #32]
 800601c:	f023 0210 	bic.w	r2, r3, #16
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	699b      	ldr	r3, [r3, #24]
 8006028:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006030:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	031b      	lsls	r3, r3, #12
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	4313      	orrs	r3, r2
 800603a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006042:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	011b      	lsls	r3, r3, #4
 8006048:	697a      	ldr	r2, [r7, #20]
 800604a:	4313      	orrs	r3, r2
 800604c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	697a      	ldr	r2, [r7, #20]
 8006058:	621a      	str	r2, [r3, #32]
}
 800605a:	bf00      	nop
 800605c:	371c      	adds	r7, #28
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr

08006066 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006066:	b480      	push	{r7}
 8006068:	b085      	sub	sp, #20
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
 800606e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800607c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006080:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006082:	683a      	ldr	r2, [r7, #0]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	4313      	orrs	r3, r2
 8006088:	f043 0307 	orr.w	r3, r3, #7
 800608c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	609a      	str	r2, [r3, #8]
}
 8006094:	bf00      	nop
 8006096:	3714      	adds	r7, #20
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b087      	sub	sp, #28
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	607a      	str	r2, [r7, #4]
 80060ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	021a      	lsls	r2, r3, #8
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	431a      	orrs	r2, r3
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	697a      	ldr	r2, [r7, #20]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	609a      	str	r2, [r3, #8]
}
 80060d4:	bf00      	nop
 80060d6:	371c      	adds	r7, #28
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d101      	bne.n	80060f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060f4:	2302      	movs	r3, #2
 80060f6:	e065      	b.n	80061c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2202      	movs	r2, #2
 8006104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a2c      	ldr	r2, [pc, #176]	; (80061d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d004      	beq.n	800612c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a2b      	ldr	r2, [pc, #172]	; (80061d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d108      	bne.n	800613e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006132:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	4313      	orrs	r3, r2
 800613c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006148:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	4313      	orrs	r3, r2
 8006152:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a1b      	ldr	r2, [pc, #108]	; (80061d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d018      	beq.n	8006198 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800616e:	d013      	beq.n	8006198 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a18      	ldr	r2, [pc, #96]	; (80061d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d00e      	beq.n	8006198 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a17      	ldr	r2, [pc, #92]	; (80061dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d009      	beq.n	8006198 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a12      	ldr	r2, [pc, #72]	; (80061d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d004      	beq.n	8006198 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a13      	ldr	r2, [pc, #76]	; (80061e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d10c      	bne.n	80061b2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800619e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	68ba      	ldr	r2, [r7, #8]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68ba      	ldr	r2, [r7, #8]
 80061b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3714      	adds	r7, #20
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr
 80061d0:	40012c00 	.word	0x40012c00
 80061d4:	40013400 	.word	0x40013400
 80061d8:	40000400 	.word	0x40000400
 80061dc:	40000800 	.word	0x40000800
 80061e0:	40014000 	.word	0x40014000

080061e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061ec:	bf00      	nop
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006200:	bf00      	nop
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006214:	bf00      	nop
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d101      	bne.n	8006282 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e042      	b.n	8006308 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006288:	2b00      	cmp	r3, #0
 800628a:	d106      	bne.n	800629a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f7fb fc69 	bl	8001b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2224      	movs	r2, #36	; 0x24
 800629e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f022 0201 	bic.w	r2, r2, #1
 80062b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d002      	beq.n	80062c0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 ff4c 	bl	8007158 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 fc7d 	bl	8006bc0 <UART_SetConfig>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d101      	bne.n	80062d0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e01b      	b.n	8006308 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	685a      	ldr	r2, [r3, #4]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	689a      	ldr	r2, [r3, #8]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f042 0201 	orr.w	r2, r2, #1
 80062fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 ffcb 	bl	800729c <UART_CheckIdleState>
 8006306:	4603      	mov	r3, r0
}
 8006308:	4618      	mov	r0, r3
 800630a:	3708      	adds	r7, #8
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006310:	b480      	push	{r7}
 8006312:	b091      	sub	sp, #68	; 0x44
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	4613      	mov	r3, r2
 800631c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006324:	2b20      	cmp	r3, #32
 8006326:	d178      	bne.n	800641a <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d002      	beq.n	8006334 <HAL_UART_Transmit_IT+0x24>
 800632e:	88fb      	ldrh	r3, [r7, #6]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d101      	bne.n	8006338 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e071      	b.n	800641c <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	88fa      	ldrh	r2, [r7, #6]
 8006342:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	88fa      	ldrh	r2, [r7, #6]
 800634a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2200      	movs	r2, #0
 8006352:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2200      	movs	r2, #0
 8006358:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2221      	movs	r2, #33	; 0x21
 8006360:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006368:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800636c:	d12a      	bne.n	80063c4 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006376:	d107      	bne.n	8006388 <HAL_UART_Transmit_IT+0x78>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d103      	bne.n	8006388 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	4a29      	ldr	r2, [pc, #164]	; (8006428 <HAL_UART_Transmit_IT+0x118>)
 8006384:	679a      	str	r2, [r3, #120]	; 0x78
 8006386:	e002      	b.n	800638e <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	4a28      	ldr	r2, [pc, #160]	; (800642c <HAL_UART_Transmit_IT+0x11c>)
 800638c:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	3308      	adds	r3, #8
 8006394:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006398:	e853 3f00 	ldrex	r3, [r3]
 800639c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800639e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80063a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	3308      	adds	r3, #8
 80063ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063ae:	637a      	str	r2, [r7, #52]	; 0x34
 80063b0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063b6:	e841 2300 	strex	r3, r2, [r1]
 80063ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80063bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1e5      	bne.n	800638e <HAL_UART_Transmit_IT+0x7e>
 80063c2:	e028      	b.n	8006416 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063cc:	d107      	bne.n	80063de <HAL_UART_Transmit_IT+0xce>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d103      	bne.n	80063de <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	4a15      	ldr	r2, [pc, #84]	; (8006430 <HAL_UART_Transmit_IT+0x120>)
 80063da:	679a      	str	r2, [r3, #120]	; 0x78
 80063dc:	e002      	b.n	80063e4 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	4a14      	ldr	r2, [pc, #80]	; (8006434 <HAL_UART_Transmit_IT+0x124>)
 80063e2:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	e853 3f00 	ldrex	r3, [r3]
 80063f0:	613b      	str	r3, [r7, #16]
   return(result);
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	461a      	mov	r2, r3
 8006400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006402:	623b      	str	r3, [r7, #32]
 8006404:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006406:	69f9      	ldr	r1, [r7, #28]
 8006408:	6a3a      	ldr	r2, [r7, #32]
 800640a:	e841 2300 	strex	r3, r2, [r1]
 800640e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d1e6      	bne.n	80063e4 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8006416:	2300      	movs	r3, #0
 8006418:	e000      	b.n	800641c <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800641a:	2302      	movs	r3, #2
  }
}
 800641c:	4618      	mov	r0, r3
 800641e:	3744      	adds	r7, #68	; 0x44
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr
 8006428:	08007c1b 	.word	0x08007c1b
 800642c:	08007b3b 	.word	0x08007b3b
 8006430:	08007a79 	.word	0x08007a79
 8006434:	080079c1 	.word	0x080079c1

08006438 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b08a      	sub	sp, #40	; 0x28
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	4613      	mov	r3, r2
 8006444:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800644c:	2b20      	cmp	r3, #32
 800644e:	d167      	bne.n	8006520 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d002      	beq.n	800645c <HAL_UART_Transmit_DMA+0x24>
 8006456:	88fb      	ldrh	r3, [r7, #6]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d101      	bne.n	8006460 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	e060      	b.n	8006522 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	68ba      	ldr	r2, [r7, #8]
 8006464:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	88fa      	ldrh	r2, [r7, #6]
 800646a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	88fa      	ldrh	r2, [r7, #6]
 8006472:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2221      	movs	r2, #33	; 0x21
 8006482:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800648a:	2b00      	cmp	r3, #0
 800648c:	d028      	beq.n	80064e0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006492:	4a26      	ldr	r2, [pc, #152]	; (800652c <HAL_UART_Transmit_DMA+0xf4>)
 8006494:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800649a:	4a25      	ldr	r2, [pc, #148]	; (8006530 <HAL_UART_Transmit_DMA+0xf8>)
 800649c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064a2:	4a24      	ldr	r2, [pc, #144]	; (8006534 <HAL_UART_Transmit_DMA+0xfc>)
 80064a4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064aa:	2200      	movs	r2, #0
 80064ac:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064b6:	4619      	mov	r1, r3
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	3328      	adds	r3, #40	; 0x28
 80064be:	461a      	mov	r2, r3
 80064c0:	88fb      	ldrh	r3, [r7, #6]
 80064c2:	f7fd fd41 	bl	8003f48 <HAL_DMA_Start_IT>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d009      	beq.n	80064e0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2210      	movs	r2, #16
 80064d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2220      	movs	r2, #32
 80064d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	e020      	b.n	8006522 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2240      	movs	r2, #64	; 0x40
 80064e6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	3308      	adds	r3, #8
 80064ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	e853 3f00 	ldrex	r3, [r3]
 80064f6:	613b      	str	r3, [r7, #16]
   return(result);
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	3308      	adds	r3, #8
 8006506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006508:	623a      	str	r2, [r7, #32]
 800650a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650c:	69f9      	ldr	r1, [r7, #28]
 800650e:	6a3a      	ldr	r2, [r7, #32]
 8006510:	e841 2300 	strex	r3, r2, [r1]
 8006514:	61bb      	str	r3, [r7, #24]
   return(result);
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d1e5      	bne.n	80064e8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800651c:	2300      	movs	r3, #0
 800651e:	e000      	b.n	8006522 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006520:	2302      	movs	r3, #2
  }
}
 8006522:	4618      	mov	r0, r3
 8006524:	3728      	adds	r7, #40	; 0x28
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	0800785f 	.word	0x0800785f
 8006530:	080078f9 	.word	0x080078f9
 8006534:	08007915 	.word	0x08007915

08006538 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b0ba      	sub	sp, #232	; 0xe8
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	69db      	ldr	r3, [r3, #28]
 8006546:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800655e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006562:	f640 030f 	movw	r3, #2063	; 0x80f
 8006566:	4013      	ands	r3, r2
 8006568:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800656c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006570:	2b00      	cmp	r3, #0
 8006572:	d11b      	bne.n	80065ac <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006578:	f003 0320 	and.w	r3, r3, #32
 800657c:	2b00      	cmp	r3, #0
 800657e:	d015      	beq.n	80065ac <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006584:	f003 0320 	and.w	r3, r3, #32
 8006588:	2b00      	cmp	r3, #0
 800658a:	d105      	bne.n	8006598 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800658c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006594:	2b00      	cmp	r3, #0
 8006596:	d009      	beq.n	80065ac <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800659c:	2b00      	cmp	r3, #0
 800659e:	f000 82e3 	beq.w	8006b68 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	4798      	blx	r3
      }
      return;
 80065aa:	e2dd      	b.n	8006b68 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80065ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f000 8123 	beq.w	80067fc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80065b6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80065ba:	4b8d      	ldr	r3, [pc, #564]	; (80067f0 <HAL_UART_IRQHandler+0x2b8>)
 80065bc:	4013      	ands	r3, r2
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d106      	bne.n	80065d0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80065c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80065c6:	4b8b      	ldr	r3, [pc, #556]	; (80067f4 <HAL_UART_IRQHandler+0x2bc>)
 80065c8:	4013      	ands	r3, r2
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	f000 8116 	beq.w	80067fc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80065d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065d4:	f003 0301 	and.w	r3, r3, #1
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d011      	beq.n	8006600 <HAL_UART_IRQHandler+0xc8>
 80065dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d00b      	beq.n	8006600 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2201      	movs	r2, #1
 80065ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065f6:	f043 0201 	orr.w	r2, r3, #1
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006604:	f003 0302 	and.w	r3, r3, #2
 8006608:	2b00      	cmp	r3, #0
 800660a:	d011      	beq.n	8006630 <HAL_UART_IRQHandler+0xf8>
 800660c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006610:	f003 0301 	and.w	r3, r3, #1
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00b      	beq.n	8006630 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2202      	movs	r2, #2
 800661e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006626:	f043 0204 	orr.w	r2, r3, #4
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006634:	f003 0304 	and.w	r3, r3, #4
 8006638:	2b00      	cmp	r3, #0
 800663a:	d011      	beq.n	8006660 <HAL_UART_IRQHandler+0x128>
 800663c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006640:	f003 0301 	and.w	r3, r3, #1
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00b      	beq.n	8006660 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2204      	movs	r2, #4
 800664e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006656:	f043 0202 	orr.w	r2, r3, #2
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006664:	f003 0308 	and.w	r3, r3, #8
 8006668:	2b00      	cmp	r3, #0
 800666a:	d017      	beq.n	800669c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800666c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006670:	f003 0320 	and.w	r3, r3, #32
 8006674:	2b00      	cmp	r3, #0
 8006676:	d105      	bne.n	8006684 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006678:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800667c:	4b5c      	ldr	r3, [pc, #368]	; (80067f0 <HAL_UART_IRQHandler+0x2b8>)
 800667e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00b      	beq.n	800669c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2208      	movs	r2, #8
 800668a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006692:	f043 0208 	orr.w	r2, r3, #8
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800669c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d012      	beq.n	80066ce <HAL_UART_IRQHandler+0x196>
 80066a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00c      	beq.n	80066ce <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066c4:	f043 0220 	orr.w	r2, r3, #32
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	f000 8249 	beq.w	8006b6c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80066da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066de:	f003 0320 	and.w	r3, r3, #32
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d013      	beq.n	800670e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80066e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066ea:	f003 0320 	and.w	r3, r3, #32
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d105      	bne.n	80066fe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80066f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d007      	beq.n	800670e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006702:	2b00      	cmp	r3, #0
 8006704:	d003      	beq.n	800670e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006714:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006722:	2b40      	cmp	r3, #64	; 0x40
 8006724:	d005      	beq.n	8006732 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006726:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800672a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800672e:	2b00      	cmp	r3, #0
 8006730:	d054      	beq.n	80067dc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f001 f82d 	bl	8007792 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006742:	2b40      	cmp	r3, #64	; 0x40
 8006744:	d146      	bne.n	80067d4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	3308      	adds	r3, #8
 800674c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006750:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006754:	e853 3f00 	ldrex	r3, [r3]
 8006758:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800675c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006760:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006764:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	3308      	adds	r3, #8
 800676e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006772:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006776:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800677e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006782:	e841 2300 	strex	r3, r2, [r1]
 8006786:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800678a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1d9      	bne.n	8006746 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006798:	2b00      	cmp	r3, #0
 800679a:	d017      	beq.n	80067cc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067a2:	4a15      	ldr	r2, [pc, #84]	; (80067f8 <HAL_UART_IRQHandler+0x2c0>)
 80067a4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067ac:	4618      	mov	r0, r3
 80067ae:	f7fd fc9f 	bl	80040f0 <HAL_DMA_Abort_IT>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d019      	beq.n	80067ec <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80067c6:	4610      	mov	r0, r2
 80067c8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067ca:	e00f      	b.n	80067ec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 f9e1 	bl	8006b94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067d2:	e00b      	b.n	80067ec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 f9dd 	bl	8006b94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067da:	e007      	b.n	80067ec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f000 f9d9 	bl	8006b94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80067ea:	e1bf      	b.n	8006b6c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067ec:	bf00      	nop
    return;
 80067ee:	e1bd      	b.n	8006b6c <HAL_UART_IRQHandler+0x634>
 80067f0:	10000001 	.word	0x10000001
 80067f4:	04000120 	.word	0x04000120
 80067f8:	08007995 	.word	0x08007995

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006800:	2b01      	cmp	r3, #1
 8006802:	f040 8153 	bne.w	8006aac <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800680a:	f003 0310 	and.w	r3, r3, #16
 800680e:	2b00      	cmp	r3, #0
 8006810:	f000 814c 	beq.w	8006aac <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006818:	f003 0310 	and.w	r3, r3, #16
 800681c:	2b00      	cmp	r3, #0
 800681e:	f000 8145 	beq.w	8006aac <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2210      	movs	r2, #16
 8006828:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006834:	2b40      	cmp	r3, #64	; 0x40
 8006836:	f040 80bb 	bne.w	80069b0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006848:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800684c:	2b00      	cmp	r3, #0
 800684e:	f000 818f 	beq.w	8006b70 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006858:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800685c:	429a      	cmp	r2, r3
 800685e:	f080 8187 	bcs.w	8006b70 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006868:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 0320 	and.w	r3, r3, #32
 800687a:	2b00      	cmp	r3, #0
 800687c:	f040 8087 	bne.w	800698e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006888:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800688c:	e853 3f00 	ldrex	r3, [r3]
 8006890:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006894:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006898:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800689c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	461a      	mov	r2, r3
 80068a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80068aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80068ae:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80068b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80068ba:	e841 2300 	strex	r3, r2, [r1]
 80068be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80068c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1da      	bne.n	8006880 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	3308      	adds	r3, #8
 80068d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068d4:	e853 3f00 	ldrex	r3, [r3]
 80068d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80068da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068dc:	f023 0301 	bic.w	r3, r3, #1
 80068e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	3308      	adds	r3, #8
 80068ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80068ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80068f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80068f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80068fa:	e841 2300 	strex	r3, r2, [r1]
 80068fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006900:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1e1      	bne.n	80068ca <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	3308      	adds	r3, #8
 800690c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006910:	e853 3f00 	ldrex	r3, [r3]
 8006914:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006916:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006918:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800691c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	3308      	adds	r3, #8
 8006926:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800692a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800692c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006930:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006932:	e841 2300 	strex	r3, r2, [r1]
 8006936:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006938:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1e3      	bne.n	8006906 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2220      	movs	r2, #32
 8006942:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006954:	e853 3f00 	ldrex	r3, [r3]
 8006958:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800695a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800695c:	f023 0310 	bic.w	r3, r3, #16
 8006960:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	461a      	mov	r2, r3
 800696a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800696e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006970:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006972:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006974:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006976:	e841 2300 	strex	r3, r2, [r1]
 800697a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800697c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1e4      	bne.n	800694c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006988:	4618      	mov	r0, r3
 800698a:	f7fd fb58 	bl	800403e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2202      	movs	r2, #2
 8006992:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	4619      	mov	r1, r3
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 f8fd 	bl	8006ba8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80069ae:	e0df      	b.n	8006b70 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069bc:	b29b      	uxth	r3, r3
 80069be:	1ad3      	subs	r3, r2, r3
 80069c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	f000 80d1 	beq.w	8006b74 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80069d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	f000 80cc 	beq.w	8006b74 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e4:	e853 3f00 	ldrex	r3, [r3]
 80069e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	461a      	mov	r2, r3
 80069fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80069fe:	647b      	str	r3, [r7, #68]	; 0x44
 8006a00:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a06:	e841 2300 	strex	r3, r2, [r1]
 8006a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1e4      	bne.n	80069dc <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	3308      	adds	r3, #8
 8006a18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1c:	e853 3f00 	ldrex	r3, [r3]
 8006a20:	623b      	str	r3, [r7, #32]
   return(result);
 8006a22:	6a3b      	ldr	r3, [r7, #32]
 8006a24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a28:	f023 0301 	bic.w	r3, r3, #1
 8006a2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	3308      	adds	r3, #8
 8006a36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006a3a:	633a      	str	r2, [r7, #48]	; 0x30
 8006a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a42:	e841 2300 	strex	r3, r2, [r1]
 8006a46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d1e1      	bne.n	8006a12 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2220      	movs	r2, #32
 8006a52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	e853 3f00 	ldrex	r3, [r3]
 8006a6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f023 0310 	bic.w	r3, r3, #16
 8006a76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	461a      	mov	r2, r3
 8006a80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006a84:	61fb      	str	r3, [r7, #28]
 8006a86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a88:	69b9      	ldr	r1, [r7, #24]
 8006a8a:	69fa      	ldr	r2, [r7, #28]
 8006a8c:	e841 2300 	strex	r3, r2, [r1]
 8006a90:	617b      	str	r3, [r7, #20]
   return(result);
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d1e4      	bne.n	8006a62 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2202      	movs	r2, #2
 8006a9c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 f87f 	bl	8006ba8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006aaa:	e063      	b.n	8006b74 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ab0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00e      	beq.n	8006ad6 <HAL_UART_IRQHandler+0x59e>
 8006ab8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006abc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d008      	beq.n	8006ad6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006acc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f001 fe60 	bl	8008794 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ad4:	e051      	b.n	8006b7a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d014      	beq.n	8006b0c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006ae2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d105      	bne.n	8006afa <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006aee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006af2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d008      	beq.n	8006b0c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d03a      	beq.n	8006b78 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	4798      	blx	r3
    }
    return;
 8006b0a:	e035      	b.n	8006b78 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d009      	beq.n	8006b2c <HAL_UART_IRQHandler+0x5f4>
 8006b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d003      	beq.n	8006b2c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f001 f8ed 	bl	8007d04 <UART_EndTransmit_IT>
    return;
 8006b2a:	e026      	b.n	8006b7a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d009      	beq.n	8006b4c <HAL_UART_IRQHandler+0x614>
 8006b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b3c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d003      	beq.n	8006b4c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f001 fe39 	bl	80087bc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b4a:	e016      	b.n	8006b7a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d010      	beq.n	8006b7a <HAL_UART_IRQHandler+0x642>
 8006b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	da0c      	bge.n	8006b7a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f001 fe21 	bl	80087a8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b66:	e008      	b.n	8006b7a <HAL_UART_IRQHandler+0x642>
      return;
 8006b68:	bf00      	nop
 8006b6a:	e006      	b.n	8006b7a <HAL_UART_IRQHandler+0x642>
    return;
 8006b6c:	bf00      	nop
 8006b6e:	e004      	b.n	8006b7a <HAL_UART_IRQHandler+0x642>
      return;
 8006b70:	bf00      	nop
 8006b72:	e002      	b.n	8006b7a <HAL_UART_IRQHandler+0x642>
      return;
 8006b74:	bf00      	nop
 8006b76:	e000      	b.n	8006b7a <HAL_UART_IRQHandler+0x642>
    return;
 8006b78:	bf00      	nop
  }
}
 8006b7a:	37e8      	adds	r7, #232	; 0xe8
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006b88:	bf00      	nop
 8006b8a:	370c      	adds	r7, #12
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006b9c:	bf00      	nop
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006bb4:	bf00      	nop
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bc4:	b08c      	sub	sp, #48	; 0x30
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	689a      	ldr	r2, [r3, #8]
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	431a      	orrs	r2, r3
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	695b      	ldr	r3, [r3, #20]
 8006bde:	431a      	orrs	r2, r3
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	69db      	ldr	r3, [r3, #28]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	4bab      	ldr	r3, [pc, #684]	; (8006e9c <UART_SetConfig+0x2dc>)
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	697a      	ldr	r2, [r7, #20]
 8006bf4:	6812      	ldr	r2, [r2, #0]
 8006bf6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bf8:	430b      	orrs	r3, r1
 8006bfa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	68da      	ldr	r2, [r3, #12]
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	430a      	orrs	r2, r1
 8006c10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	699b      	ldr	r3, [r3, #24]
 8006c16:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4aa0      	ldr	r2, [pc, #640]	; (8006ea0 <UART_SetConfig+0x2e0>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d004      	beq.n	8006c2c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	6a1b      	ldr	r3, [r3, #32]
 8006c26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006c36:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006c3a:	697a      	ldr	r2, [r7, #20]
 8006c3c:	6812      	ldr	r2, [r2, #0]
 8006c3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c40:	430b      	orrs	r3, r1
 8006c42:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c4a:	f023 010f 	bic.w	r1, r3, #15
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	430a      	orrs	r2, r1
 8006c58:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a91      	ldr	r2, [pc, #580]	; (8006ea4 <UART_SetConfig+0x2e4>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d125      	bne.n	8006cb0 <UART_SetConfig+0xf0>
 8006c64:	4b90      	ldr	r3, [pc, #576]	; (8006ea8 <UART_SetConfig+0x2e8>)
 8006c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c6a:	f003 0303 	and.w	r3, r3, #3
 8006c6e:	2b03      	cmp	r3, #3
 8006c70:	d81a      	bhi.n	8006ca8 <UART_SetConfig+0xe8>
 8006c72:	a201      	add	r2, pc, #4	; (adr r2, 8006c78 <UART_SetConfig+0xb8>)
 8006c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c78:	08006c89 	.word	0x08006c89
 8006c7c:	08006c99 	.word	0x08006c99
 8006c80:	08006c91 	.word	0x08006c91
 8006c84:	08006ca1 	.word	0x08006ca1
 8006c88:	2301      	movs	r3, #1
 8006c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c8e:	e0d6      	b.n	8006e3e <UART_SetConfig+0x27e>
 8006c90:	2302      	movs	r3, #2
 8006c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c96:	e0d2      	b.n	8006e3e <UART_SetConfig+0x27e>
 8006c98:	2304      	movs	r3, #4
 8006c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c9e:	e0ce      	b.n	8006e3e <UART_SetConfig+0x27e>
 8006ca0:	2308      	movs	r3, #8
 8006ca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ca6:	e0ca      	b.n	8006e3e <UART_SetConfig+0x27e>
 8006ca8:	2310      	movs	r3, #16
 8006caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cae:	e0c6      	b.n	8006e3e <UART_SetConfig+0x27e>
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a7d      	ldr	r2, [pc, #500]	; (8006eac <UART_SetConfig+0x2ec>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d138      	bne.n	8006d2c <UART_SetConfig+0x16c>
 8006cba:	4b7b      	ldr	r3, [pc, #492]	; (8006ea8 <UART_SetConfig+0x2e8>)
 8006cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cc0:	f003 030c 	and.w	r3, r3, #12
 8006cc4:	2b0c      	cmp	r3, #12
 8006cc6:	d82d      	bhi.n	8006d24 <UART_SetConfig+0x164>
 8006cc8:	a201      	add	r2, pc, #4	; (adr r2, 8006cd0 <UART_SetConfig+0x110>)
 8006cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cce:	bf00      	nop
 8006cd0:	08006d05 	.word	0x08006d05
 8006cd4:	08006d25 	.word	0x08006d25
 8006cd8:	08006d25 	.word	0x08006d25
 8006cdc:	08006d25 	.word	0x08006d25
 8006ce0:	08006d15 	.word	0x08006d15
 8006ce4:	08006d25 	.word	0x08006d25
 8006ce8:	08006d25 	.word	0x08006d25
 8006cec:	08006d25 	.word	0x08006d25
 8006cf0:	08006d0d 	.word	0x08006d0d
 8006cf4:	08006d25 	.word	0x08006d25
 8006cf8:	08006d25 	.word	0x08006d25
 8006cfc:	08006d25 	.word	0x08006d25
 8006d00:	08006d1d 	.word	0x08006d1d
 8006d04:	2300      	movs	r3, #0
 8006d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d0a:	e098      	b.n	8006e3e <UART_SetConfig+0x27e>
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d12:	e094      	b.n	8006e3e <UART_SetConfig+0x27e>
 8006d14:	2304      	movs	r3, #4
 8006d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d1a:	e090      	b.n	8006e3e <UART_SetConfig+0x27e>
 8006d1c:	2308      	movs	r3, #8
 8006d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d22:	e08c      	b.n	8006e3e <UART_SetConfig+0x27e>
 8006d24:	2310      	movs	r3, #16
 8006d26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d2a:	e088      	b.n	8006e3e <UART_SetConfig+0x27e>
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a5f      	ldr	r2, [pc, #380]	; (8006eb0 <UART_SetConfig+0x2f0>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d125      	bne.n	8006d82 <UART_SetConfig+0x1c2>
 8006d36:	4b5c      	ldr	r3, [pc, #368]	; (8006ea8 <UART_SetConfig+0x2e8>)
 8006d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d3c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d40:	2b30      	cmp	r3, #48	; 0x30
 8006d42:	d016      	beq.n	8006d72 <UART_SetConfig+0x1b2>
 8006d44:	2b30      	cmp	r3, #48	; 0x30
 8006d46:	d818      	bhi.n	8006d7a <UART_SetConfig+0x1ba>
 8006d48:	2b20      	cmp	r3, #32
 8006d4a:	d00a      	beq.n	8006d62 <UART_SetConfig+0x1a2>
 8006d4c:	2b20      	cmp	r3, #32
 8006d4e:	d814      	bhi.n	8006d7a <UART_SetConfig+0x1ba>
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d002      	beq.n	8006d5a <UART_SetConfig+0x19a>
 8006d54:	2b10      	cmp	r3, #16
 8006d56:	d008      	beq.n	8006d6a <UART_SetConfig+0x1aa>
 8006d58:	e00f      	b.n	8006d7a <UART_SetConfig+0x1ba>
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d60:	e06d      	b.n	8006e3e <UART_SetConfig+0x27e>
 8006d62:	2302      	movs	r3, #2
 8006d64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d68:	e069      	b.n	8006e3e <UART_SetConfig+0x27e>
 8006d6a:	2304      	movs	r3, #4
 8006d6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d70:	e065      	b.n	8006e3e <UART_SetConfig+0x27e>
 8006d72:	2308      	movs	r3, #8
 8006d74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d78:	e061      	b.n	8006e3e <UART_SetConfig+0x27e>
 8006d7a:	2310      	movs	r3, #16
 8006d7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d80:	e05d      	b.n	8006e3e <UART_SetConfig+0x27e>
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a4b      	ldr	r2, [pc, #300]	; (8006eb4 <UART_SetConfig+0x2f4>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d125      	bne.n	8006dd8 <UART_SetConfig+0x218>
 8006d8c:	4b46      	ldr	r3, [pc, #280]	; (8006ea8 <UART_SetConfig+0x2e8>)
 8006d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d92:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006d96:	2bc0      	cmp	r3, #192	; 0xc0
 8006d98:	d016      	beq.n	8006dc8 <UART_SetConfig+0x208>
 8006d9a:	2bc0      	cmp	r3, #192	; 0xc0
 8006d9c:	d818      	bhi.n	8006dd0 <UART_SetConfig+0x210>
 8006d9e:	2b80      	cmp	r3, #128	; 0x80
 8006da0:	d00a      	beq.n	8006db8 <UART_SetConfig+0x1f8>
 8006da2:	2b80      	cmp	r3, #128	; 0x80
 8006da4:	d814      	bhi.n	8006dd0 <UART_SetConfig+0x210>
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d002      	beq.n	8006db0 <UART_SetConfig+0x1f0>
 8006daa:	2b40      	cmp	r3, #64	; 0x40
 8006dac:	d008      	beq.n	8006dc0 <UART_SetConfig+0x200>
 8006dae:	e00f      	b.n	8006dd0 <UART_SetConfig+0x210>
 8006db0:	2300      	movs	r3, #0
 8006db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006db6:	e042      	b.n	8006e3e <UART_SetConfig+0x27e>
 8006db8:	2302      	movs	r3, #2
 8006dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dbe:	e03e      	b.n	8006e3e <UART_SetConfig+0x27e>
 8006dc0:	2304      	movs	r3, #4
 8006dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dc6:	e03a      	b.n	8006e3e <UART_SetConfig+0x27e>
 8006dc8:	2308      	movs	r3, #8
 8006dca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dce:	e036      	b.n	8006e3e <UART_SetConfig+0x27e>
 8006dd0:	2310      	movs	r3, #16
 8006dd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dd6:	e032      	b.n	8006e3e <UART_SetConfig+0x27e>
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a30      	ldr	r2, [pc, #192]	; (8006ea0 <UART_SetConfig+0x2e0>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d12a      	bne.n	8006e38 <UART_SetConfig+0x278>
 8006de2:	4b31      	ldr	r3, [pc, #196]	; (8006ea8 <UART_SetConfig+0x2e8>)
 8006de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006de8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006dec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006df0:	d01a      	beq.n	8006e28 <UART_SetConfig+0x268>
 8006df2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006df6:	d81b      	bhi.n	8006e30 <UART_SetConfig+0x270>
 8006df8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dfc:	d00c      	beq.n	8006e18 <UART_SetConfig+0x258>
 8006dfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e02:	d815      	bhi.n	8006e30 <UART_SetConfig+0x270>
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d003      	beq.n	8006e10 <UART_SetConfig+0x250>
 8006e08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e0c:	d008      	beq.n	8006e20 <UART_SetConfig+0x260>
 8006e0e:	e00f      	b.n	8006e30 <UART_SetConfig+0x270>
 8006e10:	2300      	movs	r3, #0
 8006e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e16:	e012      	b.n	8006e3e <UART_SetConfig+0x27e>
 8006e18:	2302      	movs	r3, #2
 8006e1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e1e:	e00e      	b.n	8006e3e <UART_SetConfig+0x27e>
 8006e20:	2304      	movs	r3, #4
 8006e22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e26:	e00a      	b.n	8006e3e <UART_SetConfig+0x27e>
 8006e28:	2308      	movs	r3, #8
 8006e2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e2e:	e006      	b.n	8006e3e <UART_SetConfig+0x27e>
 8006e30:	2310      	movs	r3, #16
 8006e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e36:	e002      	b.n	8006e3e <UART_SetConfig+0x27e>
 8006e38:	2310      	movs	r3, #16
 8006e3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a17      	ldr	r2, [pc, #92]	; (8006ea0 <UART_SetConfig+0x2e0>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	f040 80a8 	bne.w	8006f9a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006e4e:	2b08      	cmp	r3, #8
 8006e50:	d834      	bhi.n	8006ebc <UART_SetConfig+0x2fc>
 8006e52:	a201      	add	r2, pc, #4	; (adr r2, 8006e58 <UART_SetConfig+0x298>)
 8006e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e58:	08006e7d 	.word	0x08006e7d
 8006e5c:	08006ebd 	.word	0x08006ebd
 8006e60:	08006e85 	.word	0x08006e85
 8006e64:	08006ebd 	.word	0x08006ebd
 8006e68:	08006e8b 	.word	0x08006e8b
 8006e6c:	08006ebd 	.word	0x08006ebd
 8006e70:	08006ebd 	.word	0x08006ebd
 8006e74:	08006ebd 	.word	0x08006ebd
 8006e78:	08006e93 	.word	0x08006e93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e7c:	f7fe fa00 	bl	8005280 <HAL_RCC_GetPCLK1Freq>
 8006e80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e82:	e021      	b.n	8006ec8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e84:	4b0c      	ldr	r3, [pc, #48]	; (8006eb8 <UART_SetConfig+0x2f8>)
 8006e86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e88:	e01e      	b.n	8006ec8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e8a:	f7fe f98b 	bl	80051a4 <HAL_RCC_GetSysClockFreq>
 8006e8e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e90:	e01a      	b.n	8006ec8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e98:	e016      	b.n	8006ec8 <UART_SetConfig+0x308>
 8006e9a:	bf00      	nop
 8006e9c:	cfff69f3 	.word	0xcfff69f3
 8006ea0:	40008000 	.word	0x40008000
 8006ea4:	40013800 	.word	0x40013800
 8006ea8:	40021000 	.word	0x40021000
 8006eac:	40004400 	.word	0x40004400
 8006eb0:	40004800 	.word	0x40004800
 8006eb4:	40004c00 	.word	0x40004c00
 8006eb8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006ec6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	f000 812a 	beq.w	8007124 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed4:	4a9e      	ldr	r2, [pc, #632]	; (8007150 <UART_SetConfig+0x590>)
 8006ed6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006eda:	461a      	mov	r2, r3
 8006edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ede:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ee2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	685a      	ldr	r2, [r3, #4]
 8006ee8:	4613      	mov	r3, r2
 8006eea:	005b      	lsls	r3, r3, #1
 8006eec:	4413      	add	r3, r2
 8006eee:	69ba      	ldr	r2, [r7, #24]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d305      	bcc.n	8006f00 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006efa:	69ba      	ldr	r2, [r7, #24]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d903      	bls.n	8006f08 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006f06:	e10d      	b.n	8007124 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	60bb      	str	r3, [r7, #8]
 8006f0e:	60fa      	str	r2, [r7, #12]
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f14:	4a8e      	ldr	r2, [pc, #568]	; (8007150 <UART_SetConfig+0x590>)
 8006f16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	603b      	str	r3, [r7, #0]
 8006f20:	607a      	str	r2, [r7, #4]
 8006f22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006f2a:	f7f9 f975 	bl	8000218 <__aeabi_uldivmod>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	460b      	mov	r3, r1
 8006f32:	4610      	mov	r0, r2
 8006f34:	4619      	mov	r1, r3
 8006f36:	f04f 0200 	mov.w	r2, #0
 8006f3a:	f04f 0300 	mov.w	r3, #0
 8006f3e:	020b      	lsls	r3, r1, #8
 8006f40:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006f44:	0202      	lsls	r2, r0, #8
 8006f46:	6979      	ldr	r1, [r7, #20]
 8006f48:	6849      	ldr	r1, [r1, #4]
 8006f4a:	0849      	lsrs	r1, r1, #1
 8006f4c:	2000      	movs	r0, #0
 8006f4e:	460c      	mov	r4, r1
 8006f50:	4605      	mov	r5, r0
 8006f52:	eb12 0804 	adds.w	r8, r2, r4
 8006f56:	eb43 0905 	adc.w	r9, r3, r5
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	469a      	mov	sl, r3
 8006f62:	4693      	mov	fp, r2
 8006f64:	4652      	mov	r2, sl
 8006f66:	465b      	mov	r3, fp
 8006f68:	4640      	mov	r0, r8
 8006f6a:	4649      	mov	r1, r9
 8006f6c:	f7f9 f954 	bl	8000218 <__aeabi_uldivmod>
 8006f70:	4602      	mov	r2, r0
 8006f72:	460b      	mov	r3, r1
 8006f74:	4613      	mov	r3, r2
 8006f76:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f78:	6a3b      	ldr	r3, [r7, #32]
 8006f7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f7e:	d308      	bcc.n	8006f92 <UART_SetConfig+0x3d2>
 8006f80:	6a3b      	ldr	r3, [r7, #32]
 8006f82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f86:	d204      	bcs.n	8006f92 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	6a3a      	ldr	r2, [r7, #32]
 8006f8e:	60da      	str	r2, [r3, #12]
 8006f90:	e0c8      	b.n	8007124 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006f98:	e0c4      	b.n	8007124 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	69db      	ldr	r3, [r3, #28]
 8006f9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fa2:	d167      	bne.n	8007074 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006fa4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006fa8:	2b08      	cmp	r3, #8
 8006faa:	d828      	bhi.n	8006ffe <UART_SetConfig+0x43e>
 8006fac:	a201      	add	r2, pc, #4	; (adr r2, 8006fb4 <UART_SetConfig+0x3f4>)
 8006fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb2:	bf00      	nop
 8006fb4:	08006fd9 	.word	0x08006fd9
 8006fb8:	08006fe1 	.word	0x08006fe1
 8006fbc:	08006fe9 	.word	0x08006fe9
 8006fc0:	08006fff 	.word	0x08006fff
 8006fc4:	08006fef 	.word	0x08006fef
 8006fc8:	08006fff 	.word	0x08006fff
 8006fcc:	08006fff 	.word	0x08006fff
 8006fd0:	08006fff 	.word	0x08006fff
 8006fd4:	08006ff7 	.word	0x08006ff7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fd8:	f7fe f952 	bl	8005280 <HAL_RCC_GetPCLK1Freq>
 8006fdc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006fde:	e014      	b.n	800700a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fe0:	f7fe f964 	bl	80052ac <HAL_RCC_GetPCLK2Freq>
 8006fe4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006fe6:	e010      	b.n	800700a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fe8:	4b5a      	ldr	r3, [pc, #360]	; (8007154 <UART_SetConfig+0x594>)
 8006fea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006fec:	e00d      	b.n	800700a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fee:	f7fe f8d9 	bl	80051a4 <HAL_RCC_GetSysClockFreq>
 8006ff2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ff4:	e009      	b.n	800700a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ffa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ffc:	e005      	b.n	800700a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006ffe:	2300      	movs	r3, #0
 8007000:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007008:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800700a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700c:	2b00      	cmp	r3, #0
 800700e:	f000 8089 	beq.w	8007124 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007016:	4a4e      	ldr	r2, [pc, #312]	; (8007150 <UART_SetConfig+0x590>)
 8007018:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800701c:	461a      	mov	r2, r3
 800701e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007020:	fbb3 f3f2 	udiv	r3, r3, r2
 8007024:	005a      	lsls	r2, r3, #1
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	085b      	lsrs	r3, r3, #1
 800702c:	441a      	add	r2, r3
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	fbb2 f3f3 	udiv	r3, r2, r3
 8007036:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007038:	6a3b      	ldr	r3, [r7, #32]
 800703a:	2b0f      	cmp	r3, #15
 800703c:	d916      	bls.n	800706c <UART_SetConfig+0x4ac>
 800703e:	6a3b      	ldr	r3, [r7, #32]
 8007040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007044:	d212      	bcs.n	800706c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007046:	6a3b      	ldr	r3, [r7, #32]
 8007048:	b29b      	uxth	r3, r3
 800704a:	f023 030f 	bic.w	r3, r3, #15
 800704e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007050:	6a3b      	ldr	r3, [r7, #32]
 8007052:	085b      	lsrs	r3, r3, #1
 8007054:	b29b      	uxth	r3, r3
 8007056:	f003 0307 	and.w	r3, r3, #7
 800705a:	b29a      	uxth	r2, r3
 800705c:	8bfb      	ldrh	r3, [r7, #30]
 800705e:	4313      	orrs	r3, r2
 8007060:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	8bfa      	ldrh	r2, [r7, #30]
 8007068:	60da      	str	r2, [r3, #12]
 800706a:	e05b      	b.n	8007124 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007072:	e057      	b.n	8007124 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007074:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007078:	2b08      	cmp	r3, #8
 800707a:	d828      	bhi.n	80070ce <UART_SetConfig+0x50e>
 800707c:	a201      	add	r2, pc, #4	; (adr r2, 8007084 <UART_SetConfig+0x4c4>)
 800707e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007082:	bf00      	nop
 8007084:	080070a9 	.word	0x080070a9
 8007088:	080070b1 	.word	0x080070b1
 800708c:	080070b9 	.word	0x080070b9
 8007090:	080070cf 	.word	0x080070cf
 8007094:	080070bf 	.word	0x080070bf
 8007098:	080070cf 	.word	0x080070cf
 800709c:	080070cf 	.word	0x080070cf
 80070a0:	080070cf 	.word	0x080070cf
 80070a4:	080070c7 	.word	0x080070c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070a8:	f7fe f8ea 	bl	8005280 <HAL_RCC_GetPCLK1Freq>
 80070ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80070ae:	e014      	b.n	80070da <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070b0:	f7fe f8fc 	bl	80052ac <HAL_RCC_GetPCLK2Freq>
 80070b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80070b6:	e010      	b.n	80070da <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070b8:	4b26      	ldr	r3, [pc, #152]	; (8007154 <UART_SetConfig+0x594>)
 80070ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80070bc:	e00d      	b.n	80070da <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070be:	f7fe f871 	bl	80051a4 <HAL_RCC_GetSysClockFreq>
 80070c2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80070c4:	e009      	b.n	80070da <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80070cc:	e005      	b.n	80070da <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80070ce:	2300      	movs	r3, #0
 80070d0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80070d8:	bf00      	nop
    }

    if (pclk != 0U)
 80070da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d021      	beq.n	8007124 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e4:	4a1a      	ldr	r2, [pc, #104]	; (8007150 <UART_SetConfig+0x590>)
 80070e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070ea:	461a      	mov	r2, r3
 80070ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	085b      	lsrs	r3, r3, #1
 80070f8:	441a      	add	r2, r3
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007102:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007104:	6a3b      	ldr	r3, [r7, #32]
 8007106:	2b0f      	cmp	r3, #15
 8007108:	d909      	bls.n	800711e <UART_SetConfig+0x55e>
 800710a:	6a3b      	ldr	r3, [r7, #32]
 800710c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007110:	d205      	bcs.n	800711e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007112:	6a3b      	ldr	r3, [r7, #32]
 8007114:	b29a      	uxth	r2, r3
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	60da      	str	r2, [r3, #12]
 800711c:	e002      	b.n	8007124 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	2201      	movs	r2, #1
 8007128:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	2201      	movs	r2, #1
 8007130:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	2200      	movs	r2, #0
 8007138:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	2200      	movs	r2, #0
 800713e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007140:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007144:	4618      	mov	r0, r3
 8007146:	3730      	adds	r7, #48	; 0x30
 8007148:	46bd      	mov	sp, r7
 800714a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800714e:	bf00      	nop
 8007150:	08008a60 	.word	0x08008a60
 8007154:	00f42400 	.word	0x00f42400

08007158 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007164:	f003 0308 	and.w	r3, r3, #8
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00a      	beq.n	8007182 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	430a      	orrs	r2, r1
 8007180:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007186:	f003 0301 	and.w	r3, r3, #1
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00a      	beq.n	80071a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	430a      	orrs	r2, r1
 80071a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a8:	f003 0302 	and.w	r3, r3, #2
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00a      	beq.n	80071c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	430a      	orrs	r2, r1
 80071c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ca:	f003 0304 	and.w	r3, r3, #4
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d00a      	beq.n	80071e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	430a      	orrs	r2, r1
 80071e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ec:	f003 0310 	and.w	r3, r3, #16
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d00a      	beq.n	800720a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	430a      	orrs	r2, r1
 8007208:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800720e:	f003 0320 	and.w	r3, r3, #32
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00a      	beq.n	800722c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	430a      	orrs	r2, r1
 800722a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007234:	2b00      	cmp	r3, #0
 8007236:	d01a      	beq.n	800726e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	430a      	orrs	r2, r1
 800724c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007252:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007256:	d10a      	bne.n	800726e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	430a      	orrs	r2, r1
 800726c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00a      	beq.n	8007290 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	430a      	orrs	r2, r1
 800728e:	605a      	str	r2, [r3, #4]
  }
}
 8007290:	bf00      	nop
 8007292:	370c      	adds	r7, #12
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b098      	sub	sp, #96	; 0x60
 80072a0:	af02      	add	r7, sp, #8
 80072a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80072ac:	f7fa fde8 	bl	8001e80 <HAL_GetTick>
 80072b0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 0308 	and.w	r3, r3, #8
 80072bc:	2b08      	cmp	r3, #8
 80072be:	d12f      	bne.n	8007320 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072c4:	9300      	str	r3, [sp, #0]
 80072c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072c8:	2200      	movs	r2, #0
 80072ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 f88e 	bl	80073f0 <UART_WaitOnFlagUntilTimeout>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d022      	beq.n	8007320 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e2:	e853 3f00 	ldrex	r3, [r3]
 80072e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80072e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072ee:	653b      	str	r3, [r7, #80]	; 0x50
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	461a      	mov	r2, r3
 80072f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072f8:	647b      	str	r3, [r7, #68]	; 0x44
 80072fa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80072fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007300:	e841 2300 	strex	r3, r2, [r1]
 8007304:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007308:	2b00      	cmp	r3, #0
 800730a:	d1e6      	bne.n	80072da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2220      	movs	r2, #32
 8007310:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800731c:	2303      	movs	r3, #3
 800731e:	e063      	b.n	80073e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f003 0304 	and.w	r3, r3, #4
 800732a:	2b04      	cmp	r3, #4
 800732c:	d149      	bne.n	80073c2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800732e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007332:	9300      	str	r3, [sp, #0]
 8007334:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007336:	2200      	movs	r2, #0
 8007338:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 f857 	bl	80073f0 <UART_WaitOnFlagUntilTimeout>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d03c      	beq.n	80073c2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007350:	e853 3f00 	ldrex	r3, [r3]
 8007354:	623b      	str	r3, [r7, #32]
   return(result);
 8007356:	6a3b      	ldr	r3, [r7, #32]
 8007358:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800735c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	461a      	mov	r2, r3
 8007364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007366:	633b      	str	r3, [r7, #48]	; 0x30
 8007368:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800736c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800736e:	e841 2300 	strex	r3, r2, [r1]
 8007372:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007376:	2b00      	cmp	r3, #0
 8007378:	d1e6      	bne.n	8007348 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	3308      	adds	r3, #8
 8007380:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	e853 3f00 	ldrex	r3, [r3]
 8007388:	60fb      	str	r3, [r7, #12]
   return(result);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f023 0301 	bic.w	r3, r3, #1
 8007390:	64bb      	str	r3, [r7, #72]	; 0x48
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	3308      	adds	r3, #8
 8007398:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800739a:	61fa      	str	r2, [r7, #28]
 800739c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739e:	69b9      	ldr	r1, [r7, #24]
 80073a0:	69fa      	ldr	r2, [r7, #28]
 80073a2:	e841 2300 	strex	r3, r2, [r1]
 80073a6:	617b      	str	r3, [r7, #20]
   return(result);
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d1e5      	bne.n	800737a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2220      	movs	r2, #32
 80073b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073be:	2303      	movs	r3, #3
 80073c0:	e012      	b.n	80073e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2220      	movs	r2, #32
 80073c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2220      	movs	r2, #32
 80073ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3758      	adds	r7, #88	; 0x58
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	603b      	str	r3, [r7, #0]
 80073fc:	4613      	mov	r3, r2
 80073fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007400:	e04f      	b.n	80074a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007408:	d04b      	beq.n	80074a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800740a:	f7fa fd39 	bl	8001e80 <HAL_GetTick>
 800740e:	4602      	mov	r2, r0
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	1ad3      	subs	r3, r2, r3
 8007414:	69ba      	ldr	r2, [r7, #24]
 8007416:	429a      	cmp	r2, r3
 8007418:	d302      	bcc.n	8007420 <UART_WaitOnFlagUntilTimeout+0x30>
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d101      	bne.n	8007424 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007420:	2303      	movs	r3, #3
 8007422:	e04e      	b.n	80074c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 0304 	and.w	r3, r3, #4
 800742e:	2b00      	cmp	r3, #0
 8007430:	d037      	beq.n	80074a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	2b80      	cmp	r3, #128	; 0x80
 8007436:	d034      	beq.n	80074a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	2b40      	cmp	r3, #64	; 0x40
 800743c:	d031      	beq.n	80074a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	69db      	ldr	r3, [r3, #28]
 8007444:	f003 0308 	and.w	r3, r3, #8
 8007448:	2b08      	cmp	r3, #8
 800744a:	d110      	bne.n	800746e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	2208      	movs	r2, #8
 8007452:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f000 f99c 	bl	8007792 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2208      	movs	r2, #8
 800745e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	e029      	b.n	80074c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	69db      	ldr	r3, [r3, #28]
 8007474:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007478:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800747c:	d111      	bne.n	80074a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007486:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f000 f982 	bl	8007792 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2220      	movs	r2, #32
 8007492:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2200      	movs	r2, #0
 800749a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800749e:	2303      	movs	r3, #3
 80074a0:	e00f      	b.n	80074c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	69da      	ldr	r2, [r3, #28]
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	4013      	ands	r3, r2
 80074ac:	68ba      	ldr	r2, [r7, #8]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	bf0c      	ite	eq
 80074b2:	2301      	moveq	r3, #1
 80074b4:	2300      	movne	r3, #0
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	461a      	mov	r2, r3
 80074ba:	79fb      	ldrb	r3, [r7, #7]
 80074bc:	429a      	cmp	r2, r3
 80074be:	d0a0      	beq.n	8007402 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3710      	adds	r7, #16
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
	...

080074cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b0a3      	sub	sp, #140	; 0x8c
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	60b9      	str	r1, [r7, #8]
 80074d6:	4613      	mov	r3, r2
 80074d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	68ba      	ldr	r2, [r7, #8]
 80074de:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	88fa      	ldrh	r2, [r7, #6]
 80074e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	88fa      	ldrh	r2, [r7, #6]
 80074ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2200      	movs	r2, #0
 80074f4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074fe:	d10e      	bne.n	800751e <UART_Start_Receive_IT+0x52>
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	691b      	ldr	r3, [r3, #16]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d105      	bne.n	8007514 <UART_Start_Receive_IT+0x48>
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800750e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007512:	e02d      	b.n	8007570 <UART_Start_Receive_IT+0xa4>
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	22ff      	movs	r2, #255	; 0xff
 8007518:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800751c:	e028      	b.n	8007570 <UART_Start_Receive_IT+0xa4>
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d10d      	bne.n	8007542 <UART_Start_Receive_IT+0x76>
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d104      	bne.n	8007538 <UART_Start_Receive_IT+0x6c>
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	22ff      	movs	r2, #255	; 0xff
 8007532:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007536:	e01b      	b.n	8007570 <UART_Start_Receive_IT+0xa4>
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	227f      	movs	r2, #127	; 0x7f
 800753c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007540:	e016      	b.n	8007570 <UART_Start_Receive_IT+0xa4>
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800754a:	d10d      	bne.n	8007568 <UART_Start_Receive_IT+0x9c>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	691b      	ldr	r3, [r3, #16]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d104      	bne.n	800755e <UART_Start_Receive_IT+0x92>
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	227f      	movs	r2, #127	; 0x7f
 8007558:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800755c:	e008      	b.n	8007570 <UART_Start_Receive_IT+0xa4>
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	223f      	movs	r2, #63	; 0x3f
 8007562:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007566:	e003      	b.n	8007570 <UART_Start_Receive_IT+0xa4>
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2200      	movs	r2, #0
 800756c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2200      	movs	r2, #0
 8007574:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2222      	movs	r2, #34	; 0x22
 800757c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	3308      	adds	r3, #8
 8007586:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007588:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800758a:	e853 3f00 	ldrex	r3, [r3]
 800758e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007590:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007592:	f043 0301 	orr.w	r3, r3, #1
 8007596:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	3308      	adds	r3, #8
 80075a0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80075a4:	673a      	str	r2, [r7, #112]	; 0x70
 80075a6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80075aa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80075ac:	e841 2300 	strex	r3, r2, [r1]
 80075b0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80075b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d1e3      	bne.n	8007580 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075c0:	d14f      	bne.n	8007662 <UART_Start_Receive_IT+0x196>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80075c8:	88fa      	ldrh	r2, [r7, #6]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d349      	bcc.n	8007662 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075d6:	d107      	bne.n	80075e8 <UART_Start_Receive_IT+0x11c>
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d103      	bne.n	80075e8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	4a47      	ldr	r2, [pc, #284]	; (8007700 <UART_Start_Receive_IT+0x234>)
 80075e4:	675a      	str	r2, [r3, #116]	; 0x74
 80075e6:	e002      	b.n	80075ee <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	4a46      	ldr	r2, [pc, #280]	; (8007704 <UART_Start_Receive_IT+0x238>)
 80075ec:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	691b      	ldr	r3, [r3, #16]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d01a      	beq.n	800762c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075fe:	e853 3f00 	ldrex	r3, [r3]
 8007602:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800760a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	461a      	mov	r2, r3
 8007614:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007618:	65fb      	str	r3, [r7, #92]	; 0x5c
 800761a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800761e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007620:	e841 2300 	strex	r3, r2, [r1]
 8007624:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007626:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1e4      	bne.n	80075f6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	3308      	adds	r3, #8
 8007632:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007636:	e853 3f00 	ldrex	r3, [r3]
 800763a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800763c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800763e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007642:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	3308      	adds	r3, #8
 800764a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800764c:	64ba      	str	r2, [r7, #72]	; 0x48
 800764e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007650:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007652:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007654:	e841 2300 	strex	r3, r2, [r1]
 8007658:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800765a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1e5      	bne.n	800762c <UART_Start_Receive_IT+0x160>
 8007660:	e046      	b.n	80076f0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800766a:	d107      	bne.n	800767c <UART_Start_Receive_IT+0x1b0>
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	691b      	ldr	r3, [r3, #16]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d103      	bne.n	800767c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	4a24      	ldr	r2, [pc, #144]	; (8007708 <UART_Start_Receive_IT+0x23c>)
 8007678:	675a      	str	r2, [r3, #116]	; 0x74
 800767a:	e002      	b.n	8007682 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	4a23      	ldr	r2, [pc, #140]	; (800770c <UART_Start_Receive_IT+0x240>)
 8007680:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d019      	beq.n	80076be <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007692:	e853 3f00 	ldrex	r3, [r3]
 8007696:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800769e:	677b      	str	r3, [r7, #116]	; 0x74
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	461a      	mov	r2, r3
 80076a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076a8:	637b      	str	r3, [r7, #52]	; 0x34
 80076aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80076ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076b0:	e841 2300 	strex	r3, r2, [r1]
 80076b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80076b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d1e6      	bne.n	800768a <UART_Start_Receive_IT+0x1be>
 80076bc:	e018      	b.n	80076f0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	e853 3f00 	ldrex	r3, [r3]
 80076ca:	613b      	str	r3, [r7, #16]
   return(result);
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	f043 0320 	orr.w	r3, r3, #32
 80076d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	461a      	mov	r2, r3
 80076da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076dc:	623b      	str	r3, [r7, #32]
 80076de:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e0:	69f9      	ldr	r1, [r7, #28]
 80076e2:	6a3a      	ldr	r2, [r7, #32]
 80076e4:	e841 2300 	strex	r3, r2, [r1]
 80076e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d1e6      	bne.n	80076be <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80076f0:	2300      	movs	r3, #0
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	378c      	adds	r7, #140	; 0x8c
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr
 80076fe:	bf00      	nop
 8007700:	0800842d 	.word	0x0800842d
 8007704:	080080cd 	.word	0x080080cd
 8007708:	08007f15 	.word	0x08007f15
 800770c:	08007d5d 	.word	0x08007d5d

08007710 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007710:	b480      	push	{r7}
 8007712:	b08f      	sub	sp, #60	; 0x3c
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800771e:	6a3b      	ldr	r3, [r7, #32]
 8007720:	e853 3f00 	ldrex	r3, [r3]
 8007724:	61fb      	str	r3, [r7, #28]
   return(result);
 8007726:	69fb      	ldr	r3, [r7, #28]
 8007728:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800772c:	637b      	str	r3, [r7, #52]	; 0x34
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	461a      	mov	r2, r3
 8007734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007736:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007738:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800773a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800773c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800773e:	e841 2300 	strex	r3, r2, [r1]
 8007742:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007746:	2b00      	cmp	r3, #0
 8007748:	d1e6      	bne.n	8007718 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	3308      	adds	r3, #8
 8007750:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	e853 3f00 	ldrex	r3, [r3]
 8007758:	60bb      	str	r3, [r7, #8]
   return(result);
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007760:	633b      	str	r3, [r7, #48]	; 0x30
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	3308      	adds	r3, #8
 8007768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800776a:	61ba      	str	r2, [r7, #24]
 800776c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800776e:	6979      	ldr	r1, [r7, #20]
 8007770:	69ba      	ldr	r2, [r7, #24]
 8007772:	e841 2300 	strex	r3, r2, [r1]
 8007776:	613b      	str	r3, [r7, #16]
   return(result);
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d1e5      	bne.n	800774a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2220      	movs	r2, #32
 8007782:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8007786:	bf00      	nop
 8007788:	373c      	adds	r7, #60	; 0x3c
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr

08007792 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007792:	b480      	push	{r7}
 8007794:	b095      	sub	sp, #84	; 0x54
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077a2:	e853 3f00 	ldrex	r3, [r3]
 80077a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80077a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	461a      	mov	r2, r3
 80077b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077b8:	643b      	str	r3, [r7, #64]	; 0x40
 80077ba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80077be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077c0:	e841 2300 	strex	r3, r2, [r1]
 80077c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d1e6      	bne.n	800779a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	3308      	adds	r3, #8
 80077d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d4:	6a3b      	ldr	r3, [r7, #32]
 80077d6:	e853 3f00 	ldrex	r3, [r3]
 80077da:	61fb      	str	r3, [r7, #28]
   return(result);
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077e2:	f023 0301 	bic.w	r3, r3, #1
 80077e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	3308      	adds	r3, #8
 80077ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077f8:	e841 2300 	strex	r3, r2, [r1]
 80077fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007800:	2b00      	cmp	r3, #0
 8007802:	d1e3      	bne.n	80077cc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007808:	2b01      	cmp	r3, #1
 800780a:	d118      	bne.n	800783e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	e853 3f00 	ldrex	r3, [r3]
 8007818:	60bb      	str	r3, [r7, #8]
   return(result);
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	f023 0310 	bic.w	r3, r3, #16
 8007820:	647b      	str	r3, [r7, #68]	; 0x44
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	461a      	mov	r2, r3
 8007828:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800782a:	61bb      	str	r3, [r7, #24]
 800782c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782e:	6979      	ldr	r1, [r7, #20]
 8007830:	69ba      	ldr	r2, [r7, #24]
 8007832:	e841 2300 	strex	r3, r2, [r1]
 8007836:	613b      	str	r3, [r7, #16]
   return(result);
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1e6      	bne.n	800780c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2220      	movs	r2, #32
 8007842:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007852:	bf00      	nop
 8007854:	3754      	adds	r7, #84	; 0x54
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr

0800785e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b090      	sub	sp, #64	; 0x40
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800786a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f003 0320 	and.w	r3, r3, #32
 8007876:	2b00      	cmp	r3, #0
 8007878:	d137      	bne.n	80078ea <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800787a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800787c:	2200      	movs	r2, #0
 800787e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	3308      	adds	r3, #8
 8007888:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788c:	e853 3f00 	ldrex	r3, [r3]
 8007890:	623b      	str	r3, [r7, #32]
   return(result);
 8007892:	6a3b      	ldr	r3, [r7, #32]
 8007894:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007898:	63bb      	str	r3, [r7, #56]	; 0x38
 800789a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	3308      	adds	r3, #8
 80078a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078a2:	633a      	str	r2, [r7, #48]	; 0x30
 80078a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078aa:	e841 2300 	strex	r3, r2, [r1]
 80078ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d1e5      	bne.n	8007882 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80078b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	e853 3f00 	ldrex	r3, [r3]
 80078c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078ca:	637b      	str	r3, [r7, #52]	; 0x34
 80078cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	461a      	mov	r2, r3
 80078d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078d4:	61fb      	str	r3, [r7, #28]
 80078d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d8:	69b9      	ldr	r1, [r7, #24]
 80078da:	69fa      	ldr	r2, [r7, #28]
 80078dc:	e841 2300 	strex	r3, r2, [r1]
 80078e0:	617b      	str	r3, [r7, #20]
   return(result);
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d1e6      	bne.n	80078b6 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80078e8:	e002      	b.n	80078f0 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80078ea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80078ec:	f7f9 f8e6 	bl	8000abc <HAL_UART_TxCpltCallback>
}
 80078f0:	bf00      	nop
 80078f2:	3740      	adds	r7, #64	; 0x40
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b084      	sub	sp, #16
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007904:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007906:	68f8      	ldr	r0, [r7, #12]
 8007908:	f7ff f93a 	bl	8006b80 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800790c:	bf00      	nop
 800790e:	3710      	adds	r7, #16
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b086      	sub	sp, #24
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007920:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007928:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007930:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800793c:	2b80      	cmp	r3, #128	; 0x80
 800793e:	d109      	bne.n	8007954 <UART_DMAError+0x40>
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	2b21      	cmp	r3, #33	; 0x21
 8007944:	d106      	bne.n	8007954 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	2200      	movs	r2, #0
 800794a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800794e:	6978      	ldr	r0, [r7, #20]
 8007950:	f7ff fede 	bl	8007710 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800795e:	2b40      	cmp	r3, #64	; 0x40
 8007960:	d109      	bne.n	8007976 <UART_DMAError+0x62>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2b22      	cmp	r3, #34	; 0x22
 8007966:	d106      	bne.n	8007976 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	2200      	movs	r2, #0
 800796c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8007970:	6978      	ldr	r0, [r7, #20]
 8007972:	f7ff ff0e 	bl	8007792 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800797c:	f043 0210 	orr.w	r2, r3, #16
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007986:	6978      	ldr	r0, [r7, #20]
 8007988:	f7ff f904 	bl	8006b94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800798c:	bf00      	nop
 800798e:	3718      	adds	r7, #24
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2200      	movs	r2, #0
 80079a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80079b2:	68f8      	ldr	r0, [r7, #12]
 80079b4:	f7ff f8ee 	bl	8006b94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079b8:	bf00      	nop
 80079ba:	3710      	adds	r7, #16
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b08f      	sub	sp, #60	; 0x3c
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079ce:	2b21      	cmp	r3, #33	; 0x21
 80079d0:	d14c      	bne.n	8007a6c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80079d8:	b29b      	uxth	r3, r3
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d132      	bne.n	8007a44 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e4:	6a3b      	ldr	r3, [r7, #32]
 80079e6:	e853 3f00 	ldrex	r3, [r3]
 80079ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079f2:	637b      	str	r3, [r7, #52]	; 0x34
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	461a      	mov	r2, r3
 80079fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079fe:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a04:	e841 2300 	strex	r3, r2, [r1]
 8007a08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d1e6      	bne.n	80079de <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	e853 3f00 	ldrex	r3, [r3]
 8007a1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a24:	633b      	str	r3, [r7, #48]	; 0x30
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2e:	61bb      	str	r3, [r7, #24]
 8007a30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a32:	6979      	ldr	r1, [r7, #20]
 8007a34:	69ba      	ldr	r2, [r7, #24]
 8007a36:	e841 2300 	strex	r3, r2, [r1]
 8007a3a:	613b      	str	r3, [r7, #16]
   return(result);
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d1e6      	bne.n	8007a10 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007a42:	e013      	b.n	8007a6c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a48:	781a      	ldrb	r2, [r3, #0]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a54:	1c5a      	adds	r2, r3, #1
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	3b01      	subs	r3, #1
 8007a64:	b29a      	uxth	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8007a6c:	bf00      	nop
 8007a6e:	373c      	adds	r7, #60	; 0x3c
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b091      	sub	sp, #68	; 0x44
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a86:	2b21      	cmp	r3, #33	; 0x21
 8007a88:	d151      	bne.n	8007b2e <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d132      	bne.n	8007afc <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9e:	e853 3f00 	ldrex	r3, [r3]
 8007aa2:	623b      	str	r3, [r7, #32]
   return(result);
 8007aa4:	6a3b      	ldr	r3, [r7, #32]
 8007aa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007aaa:	63bb      	str	r3, [r7, #56]	; 0x38
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab4:	633b      	str	r3, [r7, #48]	; 0x30
 8007ab6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007aba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007abc:	e841 2300 	strex	r3, r2, [r1]
 8007ac0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d1e6      	bne.n	8007a96 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	e853 3f00 	ldrex	r3, [r3]
 8007ad4:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007adc:	637b      	str	r3, [r7, #52]	; 0x34
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ae6:	61fb      	str	r3, [r7, #28]
 8007ae8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aea:	69b9      	ldr	r1, [r7, #24]
 8007aec:	69fa      	ldr	r2, [r7, #28]
 8007aee:	e841 2300 	strex	r3, r2, [r1]
 8007af2:	617b      	str	r3, [r7, #20]
   return(result);
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d1e6      	bne.n	8007ac8 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007afa:	e018      	b.n	8007b2e <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b00:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b04:	881b      	ldrh	r3, [r3, #0]
 8007b06:	461a      	mov	r2, r3
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b10:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b16:	1c9a      	adds	r2, r3, #2
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	3b01      	subs	r3, #1
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8007b2e:	bf00      	nop
 8007b30:	3744      	adds	r7, #68	; 0x44
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr

08007b3a <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007b3a:	b480      	push	{r7}
 8007b3c:	b091      	sub	sp, #68	; 0x44
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b48:	2b21      	cmp	r3, #33	; 0x21
 8007b4a:	d160      	bne.n	8007c0e <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007b52:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007b54:	e057      	b.n	8007c06 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d133      	bne.n	8007bca <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	3308      	adds	r3, #8
 8007b68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6c:	e853 3f00 	ldrex	r3, [r3]
 8007b70:	623b      	str	r3, [r7, #32]
   return(result);
 8007b72:	6a3b      	ldr	r3, [r7, #32]
 8007b74:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007b78:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	3308      	adds	r3, #8
 8007b80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b82:	633a      	str	r2, [r7, #48]	; 0x30
 8007b84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b8a:	e841 2300 	strex	r3, r2, [r1]
 8007b8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d1e5      	bne.n	8007b62 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	e853 3f00 	ldrex	r3, [r3]
 8007ba2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007baa:	637b      	str	r3, [r7, #52]	; 0x34
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bb4:	61fb      	str	r3, [r7, #28]
 8007bb6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb8:	69b9      	ldr	r1, [r7, #24]
 8007bba:	69fa      	ldr	r2, [r7, #28]
 8007bbc:	e841 2300 	strex	r3, r2, [r1]
 8007bc0:	617b      	str	r3, [r7, #20]
   return(result);
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d1e6      	bne.n	8007b96 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8007bc8:	e021      	b.n	8007c0e <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	69db      	ldr	r3, [r3, #28]
 8007bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d013      	beq.n	8007c00 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bdc:	781a      	ldrb	r2, [r3, #0]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007be8:	1c5a      	adds	r2, r3, #1
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	3b01      	subs	r3, #1
 8007bf8:	b29a      	uxth	r2, r3
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007c00:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007c02:	3b01      	subs	r3, #1
 8007c04:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007c06:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d1a4      	bne.n	8007b56 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8007c0c:	e7ff      	b.n	8007c0e <UART_TxISR_8BIT_FIFOEN+0xd4>
 8007c0e:	bf00      	nop
 8007c10:	3744      	adds	r7, #68	; 0x44
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr

08007c1a <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007c1a:	b480      	push	{r7}
 8007c1c:	b091      	sub	sp, #68	; 0x44
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c28:	2b21      	cmp	r3, #33	; 0x21
 8007c2a:	d165      	bne.n	8007cf8 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007c32:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007c34:	e05c      	b.n	8007cf0 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d133      	bne.n	8007caa <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	3308      	adds	r3, #8
 8007c48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c4a:	6a3b      	ldr	r3, [r7, #32]
 8007c4c:	e853 3f00 	ldrex	r3, [r3]
 8007c50:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007c58:	637b      	str	r3, [r7, #52]	; 0x34
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	3308      	adds	r3, #8
 8007c60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c6a:	e841 2300 	strex	r3, r2, [r1]
 8007c6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d1e5      	bne.n	8007c42 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	e853 3f00 	ldrex	r3, [r3]
 8007c82:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c8a:	633b      	str	r3, [r7, #48]	; 0x30
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	461a      	mov	r2, r3
 8007c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c94:	61bb      	str	r3, [r7, #24]
 8007c96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c98:	6979      	ldr	r1, [r7, #20]
 8007c9a:	69ba      	ldr	r2, [r7, #24]
 8007c9c:	e841 2300 	strex	r3, r2, [r1]
 8007ca0:	613b      	str	r3, [r7, #16]
   return(result);
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d1e6      	bne.n	8007c76 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8007ca8:	e026      	b.n	8007cf8 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	69db      	ldr	r3, [r3, #28]
 8007cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d018      	beq.n	8007cea <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cbc:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc0:	881b      	ldrh	r3, [r3, #0]
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ccc:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cd2:	1c9a      	adds	r2, r3, #2
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	3b01      	subs	r3, #1
 8007ce2:	b29a      	uxth	r2, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007cea:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007cec:	3b01      	subs	r3, #1
 8007cee:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007cf0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d19f      	bne.n	8007c36 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8007cf6:	e7ff      	b.n	8007cf8 <UART_TxISR_16BIT_FIFOEN+0xde>
 8007cf8:	bf00      	nop
 8007cfa:	3744      	adds	r7, #68	; 0x44
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b088      	sub	sp, #32
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	e853 3f00 	ldrex	r3, [r3]
 8007d18:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d20:	61fb      	str	r3, [r7, #28]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	461a      	mov	r2, r3
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	61bb      	str	r3, [r7, #24]
 8007d2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2e:	6979      	ldr	r1, [r7, #20]
 8007d30:	69ba      	ldr	r2, [r7, #24]
 8007d32:	e841 2300 	strex	r3, r2, [r1]
 8007d36:	613b      	str	r3, [r7, #16]
   return(result);
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d1e6      	bne.n	8007d0c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2220      	movs	r2, #32
 8007d42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f7f8 feb5 	bl	8000abc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d52:	bf00      	nop
 8007d54:	3720      	adds	r7, #32
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
	...

08007d5c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b09c      	sub	sp, #112	; 0x70
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007d6a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d74:	2b22      	cmp	r3, #34	; 0x22
 8007d76:	f040 80be 	bne.w	8007ef6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d80:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007d84:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007d88:	b2d9      	uxtb	r1, r3
 8007d8a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007d8e:	b2da      	uxtb	r2, r3
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d94:	400a      	ands	r2, r1
 8007d96:	b2d2      	uxtb	r2, r2
 8007d98:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d9e:	1c5a      	adds	r2, r3, #1
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	3b01      	subs	r3, #1
 8007dae:	b29a      	uxth	r2, r3
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	f040 80a1 	bne.w	8007f06 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dcc:	e853 3f00 	ldrex	r3, [r3]
 8007dd0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007dd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dd8:	66bb      	str	r3, [r7, #104]	; 0x68
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	461a      	mov	r2, r3
 8007de0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007de2:	65bb      	str	r3, [r7, #88]	; 0x58
 8007de4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007de8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007dea:	e841 2300 	strex	r3, r2, [r1]
 8007dee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007df0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1e6      	bne.n	8007dc4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	3308      	adds	r3, #8
 8007dfc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e00:	e853 3f00 	ldrex	r3, [r3]
 8007e04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e08:	f023 0301 	bic.w	r3, r3, #1
 8007e0c:	667b      	str	r3, [r7, #100]	; 0x64
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	3308      	adds	r3, #8
 8007e14:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007e16:	647a      	str	r2, [r7, #68]	; 0x44
 8007e18:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e1e:	e841 2300 	strex	r3, r2, [r1]
 8007e22:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d1e5      	bne.n	8007df6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2220      	movs	r2, #32
 8007e2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a33      	ldr	r2, [pc, #204]	; (8007f10 <UART_RxISR_8BIT+0x1b4>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d01f      	beq.n	8007e88 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d018      	beq.n	8007e88 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5e:	e853 3f00 	ldrex	r3, [r3]
 8007e62:	623b      	str	r3, [r7, #32]
   return(result);
 8007e64:	6a3b      	ldr	r3, [r7, #32]
 8007e66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007e6a:	663b      	str	r3, [r7, #96]	; 0x60
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	461a      	mov	r2, r3
 8007e72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e74:	633b      	str	r3, [r7, #48]	; 0x30
 8007e76:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e7c:	e841 2300 	strex	r3, r2, [r1]
 8007e80:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d1e6      	bne.n	8007e56 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d12e      	bne.n	8007eee <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	e853 3f00 	ldrex	r3, [r3]
 8007ea2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f023 0310 	bic.w	r3, r3, #16
 8007eaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007eb4:	61fb      	str	r3, [r7, #28]
 8007eb6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb8:	69b9      	ldr	r1, [r7, #24]
 8007eba:	69fa      	ldr	r2, [r7, #28]
 8007ebc:	e841 2300 	strex	r3, r2, [r1]
 8007ec0:	617b      	str	r3, [r7, #20]
   return(result);
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d1e6      	bne.n	8007e96 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	69db      	ldr	r3, [r3, #28]
 8007ece:	f003 0310 	and.w	r3, r3, #16
 8007ed2:	2b10      	cmp	r3, #16
 8007ed4:	d103      	bne.n	8007ede <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	2210      	movs	r2, #16
 8007edc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f7fe fe5e 	bl	8006ba8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007eec:	e00b      	b.n	8007f06 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f7f8 fb68 	bl	80005c4 <HAL_UART_RxCpltCallback>
}
 8007ef4:	e007      	b.n	8007f06 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	699a      	ldr	r2, [r3, #24]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f042 0208 	orr.w	r2, r2, #8
 8007f04:	619a      	str	r2, [r3, #24]
}
 8007f06:	bf00      	nop
 8007f08:	3770      	adds	r7, #112	; 0x70
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	40008000 	.word	0x40008000

08007f14 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b09c      	sub	sp, #112	; 0x70
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007f22:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f2c:	2b22      	cmp	r3, #34	; 0x22
 8007f2e:	f040 80be 	bne.w	80080ae <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f38:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f40:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007f42:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007f46:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	b29a      	uxth	r2, r3
 8007f4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f50:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f56:	1c9a      	adds	r2, r3, #2
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	3b01      	subs	r3, #1
 8007f66:	b29a      	uxth	r2, r3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	f040 80a1 	bne.w	80080be <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f84:	e853 3f00 	ldrex	r3, [r3]
 8007f88:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007f8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f90:	667b      	str	r3, [r7, #100]	; 0x64
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	461a      	mov	r2, r3
 8007f98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f9a:	657b      	str	r3, [r7, #84]	; 0x54
 8007f9c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007fa0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007fa2:	e841 2300 	strex	r3, r2, [r1]
 8007fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d1e6      	bne.n	8007f7c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	3308      	adds	r3, #8
 8007fb4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fb8:	e853 3f00 	ldrex	r3, [r3]
 8007fbc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc0:	f023 0301 	bic.w	r3, r3, #1
 8007fc4:	663b      	str	r3, [r7, #96]	; 0x60
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	3308      	adds	r3, #8
 8007fcc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007fce:	643a      	str	r2, [r7, #64]	; 0x40
 8007fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007fd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007fd6:	e841 2300 	strex	r3, r2, [r1]
 8007fda:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d1e5      	bne.n	8007fae <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2220      	movs	r2, #32
 8007fe6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a33      	ldr	r2, [pc, #204]	; (80080c8 <UART_RxISR_16BIT+0x1b4>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d01f      	beq.n	8008040 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800800a:	2b00      	cmp	r3, #0
 800800c:	d018      	beq.n	8008040 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008014:	6a3b      	ldr	r3, [r7, #32]
 8008016:	e853 3f00 	ldrex	r3, [r3]
 800801a:	61fb      	str	r3, [r7, #28]
   return(result);
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008022:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	461a      	mov	r2, r3
 800802a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800802c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800802e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008030:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008032:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008034:	e841 2300 	strex	r3, r2, [r1]
 8008038:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800803a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803c:	2b00      	cmp	r3, #0
 800803e:	d1e6      	bne.n	800800e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008044:	2b01      	cmp	r3, #1
 8008046:	d12e      	bne.n	80080a6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2200      	movs	r2, #0
 800804c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	e853 3f00 	ldrex	r3, [r3]
 800805a:	60bb      	str	r3, [r7, #8]
   return(result);
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	f023 0310 	bic.w	r3, r3, #16
 8008062:	65bb      	str	r3, [r7, #88]	; 0x58
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	461a      	mov	r2, r3
 800806a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800806c:	61bb      	str	r3, [r7, #24]
 800806e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008070:	6979      	ldr	r1, [r7, #20]
 8008072:	69ba      	ldr	r2, [r7, #24]
 8008074:	e841 2300 	strex	r3, r2, [r1]
 8008078:	613b      	str	r3, [r7, #16]
   return(result);
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d1e6      	bne.n	800804e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	69db      	ldr	r3, [r3, #28]
 8008086:	f003 0310 	and.w	r3, r3, #16
 800808a:	2b10      	cmp	r3, #16
 800808c:	d103      	bne.n	8008096 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2210      	movs	r2, #16
 8008094:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800809c:	4619      	mov	r1, r3
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f7fe fd82 	bl	8006ba8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80080a4:	e00b      	b.n	80080be <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f7f8 fa8c 	bl	80005c4 <HAL_UART_RxCpltCallback>
}
 80080ac:	e007      	b.n	80080be <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	699a      	ldr	r2, [r3, #24]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f042 0208 	orr.w	r2, r2, #8
 80080bc:	619a      	str	r2, [r3, #24]
}
 80080be:	bf00      	nop
 80080c0:	3770      	adds	r7, #112	; 0x70
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	bf00      	nop
 80080c8:	40008000 	.word	0x40008000

080080cc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b0ac      	sub	sp, #176	; 0xb0
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80080da:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	69db      	ldr	r3, [r3, #28]
 80080e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008102:	2b22      	cmp	r3, #34	; 0x22
 8008104:	f040 8182 	bne.w	800840c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800810e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008112:	e125      	b.n	8008360 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800811e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8008122:	b2d9      	uxtb	r1, r3
 8008124:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008128:	b2da      	uxtb	r2, r3
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800812e:	400a      	ands	r2, r1
 8008130:	b2d2      	uxtb	r2, r2
 8008132:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008138:	1c5a      	adds	r2, r3, #1
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008144:	b29b      	uxth	r3, r3
 8008146:	3b01      	subs	r3, #1
 8008148:	b29a      	uxth	r2, r3
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	69db      	ldr	r3, [r3, #28]
 8008156:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800815a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800815e:	f003 0307 	and.w	r3, r3, #7
 8008162:	2b00      	cmp	r3, #0
 8008164:	d053      	beq.n	800820e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008166:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800816a:	f003 0301 	and.w	r3, r3, #1
 800816e:	2b00      	cmp	r3, #0
 8008170:	d011      	beq.n	8008196 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008172:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00b      	beq.n	8008196 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2201      	movs	r2, #1
 8008184:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800818c:	f043 0201 	orr.w	r2, r3, #1
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008196:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800819a:	f003 0302 	and.w	r3, r3, #2
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d011      	beq.n	80081c6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80081a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80081a6:	f003 0301 	and.w	r3, r3, #1
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d00b      	beq.n	80081c6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2202      	movs	r2, #2
 80081b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081bc:	f043 0204 	orr.w	r2, r3, #4
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80081ca:	f003 0304 	and.w	r3, r3, #4
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d011      	beq.n	80081f6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80081d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80081d6:	f003 0301 	and.w	r3, r3, #1
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00b      	beq.n	80081f6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	2204      	movs	r2, #4
 80081e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081ec:	f043 0202 	orr.w	r2, r3, #2
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d006      	beq.n	800820e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f7fe fcc7 	bl	8006b94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008214:	b29b      	uxth	r3, r3
 8008216:	2b00      	cmp	r3, #0
 8008218:	f040 80a2 	bne.w	8008360 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008222:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008224:	e853 3f00 	ldrex	r3, [r3]
 8008228:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800822a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800822c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008230:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	461a      	mov	r2, r3
 800823a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800823e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008240:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008242:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008244:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008246:	e841 2300 	strex	r3, r2, [r1]
 800824a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800824c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800824e:	2b00      	cmp	r3, #0
 8008250:	d1e4      	bne.n	800821c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	3308      	adds	r3, #8
 8008258:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800825a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800825c:	e853 3f00 	ldrex	r3, [r3]
 8008260:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008262:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008264:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008268:	f023 0301 	bic.w	r3, r3, #1
 800826c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	3308      	adds	r3, #8
 8008276:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800827a:	66ba      	str	r2, [r7, #104]	; 0x68
 800827c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800827e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008280:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008282:	e841 2300 	strex	r3, r2, [r1]
 8008286:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008288:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800828a:	2b00      	cmp	r3, #0
 800828c:	d1e1      	bne.n	8008252 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2220      	movs	r2, #32
 8008292:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2200      	movs	r2, #0
 800829a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a5f      	ldr	r2, [pc, #380]	; (8008424 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d021      	beq.n	80082f0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d01a      	beq.n	80082f0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082c2:	e853 3f00 	ldrex	r3, [r3]
 80082c6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80082c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80082ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	461a      	mov	r2, r3
 80082d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80082dc:	657b      	str	r3, [r7, #84]	; 0x54
 80082de:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80082e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80082e4:	e841 2300 	strex	r3, r2, [r1]
 80082e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80082ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d1e4      	bne.n	80082ba <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d130      	bne.n	800835a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2200      	movs	r2, #0
 80082fc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008306:	e853 3f00 	ldrex	r3, [r3]
 800830a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800830c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830e:	f023 0310 	bic.w	r3, r3, #16
 8008312:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	461a      	mov	r2, r3
 800831c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008320:	643b      	str	r3, [r7, #64]	; 0x40
 8008322:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008324:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008326:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008328:	e841 2300 	strex	r3, r2, [r1]
 800832c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800832e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008330:	2b00      	cmp	r3, #0
 8008332:	d1e4      	bne.n	80082fe <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	69db      	ldr	r3, [r3, #28]
 800833a:	f003 0310 	and.w	r3, r3, #16
 800833e:	2b10      	cmp	r3, #16
 8008340:	d103      	bne.n	800834a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	2210      	movs	r2, #16
 8008348:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008350:	4619      	mov	r1, r3
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f7fe fc28 	bl	8006ba8 <HAL_UARTEx_RxEventCallback>
 8008358:	e002      	b.n	8008360 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f7f8 f932 	bl	80005c4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008360:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8008364:	2b00      	cmp	r3, #0
 8008366:	d006      	beq.n	8008376 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8008368:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800836c:	f003 0320 	and.w	r3, r3, #32
 8008370:	2b00      	cmp	r3, #0
 8008372:	f47f aecf 	bne.w	8008114 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800837c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008380:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008384:	2b00      	cmp	r3, #0
 8008386:	d049      	beq.n	800841c <UART_RxISR_8BIT_FIFOEN+0x350>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800838e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8008392:	429a      	cmp	r2, r3
 8008394:	d242      	bcs.n	800841c <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	3308      	adds	r3, #8
 800839c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800839e:	6a3b      	ldr	r3, [r7, #32]
 80083a0:	e853 3f00 	ldrex	r3, [r3]
 80083a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	3308      	adds	r3, #8
 80083b6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80083ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80083bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083c2:	e841 2300 	strex	r3, r2, [r1]
 80083c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d1e3      	bne.n	8008396 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4a15      	ldr	r2, [pc, #84]	; (8008428 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80083d2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	e853 3f00 	ldrex	r3, [r3]
 80083e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	f043 0320 	orr.w	r3, r3, #32
 80083e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	461a      	mov	r2, r3
 80083f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80083f6:	61bb      	str	r3, [r7, #24]
 80083f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083fa:	6979      	ldr	r1, [r7, #20]
 80083fc:	69ba      	ldr	r2, [r7, #24]
 80083fe:	e841 2300 	strex	r3, r2, [r1]
 8008402:	613b      	str	r3, [r7, #16]
   return(result);
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d1e4      	bne.n	80083d4 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800840a:	e007      	b.n	800841c <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	699a      	ldr	r2, [r3, #24]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f042 0208 	orr.w	r2, r2, #8
 800841a:	619a      	str	r2, [r3, #24]
}
 800841c:	bf00      	nop
 800841e:	37b0      	adds	r7, #176	; 0xb0
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}
 8008424:	40008000 	.word	0x40008000
 8008428:	08007d5d 	.word	0x08007d5d

0800842c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b0ae      	sub	sp, #184	; 0xb8
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800843a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	69db      	ldr	r3, [r3, #28]
 8008444:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008462:	2b22      	cmp	r3, #34	; 0x22
 8008464:	f040 8186 	bne.w	8008774 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800846e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008472:	e129      	b.n	80086c8 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008482:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008486:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800848a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800848e:	4013      	ands	r3, r2
 8008490:	b29a      	uxth	r2, r3
 8008492:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008496:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800849c:	1c9a      	adds	r2, r3, #2
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	3b01      	subs	r3, #1
 80084ac:	b29a      	uxth	r2, r3
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	69db      	ldr	r3, [r3, #28]
 80084ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80084be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80084c2:	f003 0307 	and.w	r3, r3, #7
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d053      	beq.n	8008572 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80084ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80084ce:	f003 0301 	and.w	r3, r3, #1
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d011      	beq.n	80084fa <UART_RxISR_16BIT_FIFOEN+0xce>
 80084d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80084da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d00b      	beq.n	80084fa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2201      	movs	r2, #1
 80084e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084f0:	f043 0201 	orr.w	r2, r3, #1
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80084fe:	f003 0302 	and.w	r3, r3, #2
 8008502:	2b00      	cmp	r3, #0
 8008504:	d011      	beq.n	800852a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008506:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800850a:	f003 0301 	and.w	r3, r3, #1
 800850e:	2b00      	cmp	r3, #0
 8008510:	d00b      	beq.n	800852a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	2202      	movs	r2, #2
 8008518:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008520:	f043 0204 	orr.w	r2, r3, #4
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800852a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800852e:	f003 0304 	and.w	r3, r3, #4
 8008532:	2b00      	cmp	r3, #0
 8008534:	d011      	beq.n	800855a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008536:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800853a:	f003 0301 	and.w	r3, r3, #1
 800853e:	2b00      	cmp	r3, #0
 8008540:	d00b      	beq.n	800855a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	2204      	movs	r2, #4
 8008548:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008550:	f043 0202 	orr.w	r2, r3, #2
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008560:	2b00      	cmp	r3, #0
 8008562:	d006      	beq.n	8008572 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f7fe fb15 	bl	8006b94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008578:	b29b      	uxth	r3, r3
 800857a:	2b00      	cmp	r3, #0
 800857c:	f040 80a4 	bne.w	80086c8 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008586:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008588:	e853 3f00 	ldrex	r3, [r3]
 800858c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800858e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008590:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008594:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	461a      	mov	r2, r3
 800859e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80085a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80085a6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80085aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80085ae:	e841 2300 	strex	r3, r2, [r1]
 80085b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80085b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d1e2      	bne.n	8008580 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	3308      	adds	r3, #8
 80085c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085c4:	e853 3f00 	ldrex	r3, [r3]
 80085c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80085ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085d0:	f023 0301 	bic.w	r3, r3, #1
 80085d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	3308      	adds	r3, #8
 80085de:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80085e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80085e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80085e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80085ea:	e841 2300 	strex	r3, r2, [r1]
 80085ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80085f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d1e1      	bne.n	80085ba <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2220      	movs	r2, #32
 80085fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2200      	movs	r2, #0
 8008608:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a5f      	ldr	r2, [pc, #380]	; (800878c <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d021      	beq.n	8008658 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800861e:	2b00      	cmp	r3, #0
 8008620:	d01a      	beq.n	8008658 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800862a:	e853 3f00 	ldrex	r3, [r3]
 800862e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008630:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008632:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008636:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	461a      	mov	r2, r3
 8008640:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008644:	65bb      	str	r3, [r7, #88]	; 0x58
 8008646:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008648:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800864a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800864c:	e841 2300 	strex	r3, r2, [r1]
 8008650:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008654:	2b00      	cmp	r3, #0
 8008656:	d1e4      	bne.n	8008622 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800865c:	2b01      	cmp	r3, #1
 800865e:	d130      	bne.n	80086c2 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800866c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800866e:	e853 3f00 	ldrex	r3, [r3]
 8008672:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008676:	f023 0310 	bic.w	r3, r3, #16
 800867a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	461a      	mov	r2, r3
 8008684:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008688:	647b      	str	r3, [r7, #68]	; 0x44
 800868a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800868c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800868e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008690:	e841 2300 	strex	r3, r2, [r1]
 8008694:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008698:	2b00      	cmp	r3, #0
 800869a:	d1e4      	bne.n	8008666 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	69db      	ldr	r3, [r3, #28]
 80086a2:	f003 0310 	and.w	r3, r3, #16
 80086a6:	2b10      	cmp	r3, #16
 80086a8:	d103      	bne.n	80086b2 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	2210      	movs	r2, #16
 80086b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80086b8:	4619      	mov	r1, r3
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f7fe fa74 	bl	8006ba8 <HAL_UARTEx_RxEventCallback>
 80086c0:	e002      	b.n	80086c8 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f7f7 ff7e 	bl	80005c4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80086c8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d006      	beq.n	80086de <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80086d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80086d4:	f003 0320 	and.w	r3, r3, #32
 80086d8:	2b00      	cmp	r3, #0
 80086da:	f47f aecb 	bne.w	8008474 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80086e4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80086e8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d049      	beq.n	8008784 <UART_RxISR_16BIT_FIFOEN+0x358>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80086f6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d242      	bcs.n	8008784 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	3308      	adds	r3, #8
 8008704:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008708:	e853 3f00 	ldrex	r3, [r3]
 800870c:	623b      	str	r3, [r7, #32]
   return(result);
 800870e:	6a3b      	ldr	r3, [r7, #32]
 8008710:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008714:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	3308      	adds	r3, #8
 800871e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008722:	633a      	str	r2, [r7, #48]	; 0x30
 8008724:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008726:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008728:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800872a:	e841 2300 	strex	r3, r2, [r1]
 800872e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008732:	2b00      	cmp	r3, #0
 8008734:	d1e3      	bne.n	80086fe <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	4a15      	ldr	r2, [pc, #84]	; (8008790 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800873a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	e853 3f00 	ldrex	r3, [r3]
 8008748:	60fb      	str	r3, [r7, #12]
   return(result);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f043 0320 	orr.w	r3, r3, #32
 8008750:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	461a      	mov	r2, r3
 800875a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800875e:	61fb      	str	r3, [r7, #28]
 8008760:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008762:	69b9      	ldr	r1, [r7, #24]
 8008764:	69fa      	ldr	r2, [r7, #28]
 8008766:	e841 2300 	strex	r3, r2, [r1]
 800876a:	617b      	str	r3, [r7, #20]
   return(result);
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d1e4      	bne.n	800873c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008772:	e007      	b.n	8008784 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	699a      	ldr	r2, [r3, #24]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f042 0208 	orr.w	r2, r2, #8
 8008782:	619a      	str	r2, [r3, #24]
}
 8008784:	bf00      	nop
 8008786:	37b8      	adds	r7, #184	; 0xb8
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}
 800878c:	40008000 	.word	0x40008000
 8008790:	08007f15 	.word	0x08007f15

08008794 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008794:	b480      	push	{r7}
 8008796:	b083      	sub	sp, #12
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800879c:	bf00      	nop
 800879e:	370c      	adds	r7, #12
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b083      	sub	sp, #12
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80087b0:	bf00      	nop
 80087b2:	370c      	adds	r7, #12
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80087c4:	bf00      	nop
 80087c6:	370c      	adds	r7, #12
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b085      	sub	sp, #20
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d101      	bne.n	80087e6 <HAL_UARTEx_DisableFifoMode+0x16>
 80087e2:	2302      	movs	r3, #2
 80087e4:	e027      	b.n	8008836 <HAL_UARTEx_DisableFifoMode+0x66>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2201      	movs	r2, #1
 80087ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2224      	movs	r2, #36	; 0x24
 80087f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f022 0201 	bic.w	r2, r2, #1
 800880c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008814:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	68fa      	ldr	r2, [r7, #12]
 8008822:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2220      	movs	r2, #32
 8008828:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2200      	movs	r2, #0
 8008830:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008834:	2300      	movs	r3, #0
}
 8008836:	4618      	mov	r0, r3
 8008838:	3714      	adds	r7, #20
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr

08008842 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008842:	b580      	push	{r7, lr}
 8008844:	b084      	sub	sp, #16
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
 800884a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008852:	2b01      	cmp	r3, #1
 8008854:	d101      	bne.n	800885a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008856:	2302      	movs	r3, #2
 8008858:	e02d      	b.n	80088b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2201      	movs	r2, #1
 800885e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2224      	movs	r2, #36	; 0x24
 8008866:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f022 0201 	bic.w	r2, r2, #1
 8008880:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	689b      	ldr	r3, [r3, #8]
 8008888:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	683a      	ldr	r2, [r7, #0]
 8008892:	430a      	orrs	r2, r1
 8008894:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 f850 	bl	800893c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	68fa      	ldr	r2, [r7, #12]
 80088a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2220      	movs	r2, #32
 80088a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80088b4:	2300      	movs	r3, #0
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3710      	adds	r7, #16
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}

080088be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80088be:	b580      	push	{r7, lr}
 80088c0:	b084      	sub	sp, #16
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
 80088c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	d101      	bne.n	80088d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80088d2:	2302      	movs	r3, #2
 80088d4:	e02d      	b.n	8008932 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2201      	movs	r2, #1
 80088da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2224      	movs	r2, #36	; 0x24
 80088e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	681a      	ldr	r2, [r3, #0]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f022 0201 	bic.w	r2, r2, #1
 80088fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	683a      	ldr	r2, [r7, #0]
 800890e:	430a      	orrs	r2, r1
 8008910:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 f812 	bl	800893c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	68fa      	ldr	r2, [r7, #12]
 800891e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2220      	movs	r2, #32
 8008924:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2200      	movs	r2, #0
 800892c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008930:	2300      	movs	r3, #0
}
 8008932:	4618      	mov	r0, r3
 8008934:	3710      	adds	r7, #16
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
	...

0800893c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800893c:	b480      	push	{r7}
 800893e:	b085      	sub	sp, #20
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008948:	2b00      	cmp	r3, #0
 800894a:	d108      	bne.n	800895e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2201      	movs	r2, #1
 8008958:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800895c:	e031      	b.n	80089c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800895e:	2308      	movs	r3, #8
 8008960:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008962:	2308      	movs	r3, #8
 8008964:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	0e5b      	lsrs	r3, r3, #25
 800896e:	b2db      	uxtb	r3, r3
 8008970:	f003 0307 	and.w	r3, r3, #7
 8008974:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	0f5b      	lsrs	r3, r3, #29
 800897e:	b2db      	uxtb	r3, r3
 8008980:	f003 0307 	and.w	r3, r3, #7
 8008984:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008986:	7bbb      	ldrb	r3, [r7, #14]
 8008988:	7b3a      	ldrb	r2, [r7, #12]
 800898a:	4911      	ldr	r1, [pc, #68]	; (80089d0 <UARTEx_SetNbDataToProcess+0x94>)
 800898c:	5c8a      	ldrb	r2, [r1, r2]
 800898e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008992:	7b3a      	ldrb	r2, [r7, #12]
 8008994:	490f      	ldr	r1, [pc, #60]	; (80089d4 <UARTEx_SetNbDataToProcess+0x98>)
 8008996:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008998:	fb93 f3f2 	sdiv	r3, r3, r2
 800899c:	b29a      	uxth	r2, r3
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80089a4:	7bfb      	ldrb	r3, [r7, #15]
 80089a6:	7b7a      	ldrb	r2, [r7, #13]
 80089a8:	4909      	ldr	r1, [pc, #36]	; (80089d0 <UARTEx_SetNbDataToProcess+0x94>)
 80089aa:	5c8a      	ldrb	r2, [r1, r2]
 80089ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80089b0:	7b7a      	ldrb	r2, [r7, #13]
 80089b2:	4908      	ldr	r1, [pc, #32]	; (80089d4 <UARTEx_SetNbDataToProcess+0x98>)
 80089b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80089b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80089ba:	b29a      	uxth	r2, r3
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80089c2:	bf00      	nop
 80089c4:	3714      	adds	r7, #20
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr
 80089ce:	bf00      	nop
 80089d0:	08008a78 	.word	0x08008a78
 80089d4:	08008a80 	.word	0x08008a80

080089d8 <__libc_init_array>:
 80089d8:	b570      	push	{r4, r5, r6, lr}
 80089da:	4d0d      	ldr	r5, [pc, #52]	; (8008a10 <__libc_init_array+0x38>)
 80089dc:	4c0d      	ldr	r4, [pc, #52]	; (8008a14 <__libc_init_array+0x3c>)
 80089de:	1b64      	subs	r4, r4, r5
 80089e0:	10a4      	asrs	r4, r4, #2
 80089e2:	2600      	movs	r6, #0
 80089e4:	42a6      	cmp	r6, r4
 80089e6:	d109      	bne.n	80089fc <__libc_init_array+0x24>
 80089e8:	4d0b      	ldr	r5, [pc, #44]	; (8008a18 <__libc_init_array+0x40>)
 80089ea:	4c0c      	ldr	r4, [pc, #48]	; (8008a1c <__libc_init_array+0x44>)
 80089ec:	f000 f820 	bl	8008a30 <_init>
 80089f0:	1b64      	subs	r4, r4, r5
 80089f2:	10a4      	asrs	r4, r4, #2
 80089f4:	2600      	movs	r6, #0
 80089f6:	42a6      	cmp	r6, r4
 80089f8:	d105      	bne.n	8008a06 <__libc_init_array+0x2e>
 80089fa:	bd70      	pop	{r4, r5, r6, pc}
 80089fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a00:	4798      	blx	r3
 8008a02:	3601      	adds	r6, #1
 8008a04:	e7ee      	b.n	80089e4 <__libc_init_array+0xc>
 8008a06:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a0a:	4798      	blx	r3
 8008a0c:	3601      	adds	r6, #1
 8008a0e:	e7f2      	b.n	80089f6 <__libc_init_array+0x1e>
 8008a10:	08008a90 	.word	0x08008a90
 8008a14:	08008a90 	.word	0x08008a90
 8008a18:	08008a90 	.word	0x08008a90
 8008a1c:	08008a94 	.word	0x08008a94

08008a20 <memset>:
 8008a20:	4402      	add	r2, r0
 8008a22:	4603      	mov	r3, r0
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d100      	bne.n	8008a2a <memset+0xa>
 8008a28:	4770      	bx	lr
 8008a2a:	f803 1b01 	strb.w	r1, [r3], #1
 8008a2e:	e7f9      	b.n	8008a24 <memset+0x4>

08008a30 <_init>:
 8008a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a32:	bf00      	nop
 8008a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a36:	bc08      	pop	{r3}
 8008a38:	469e      	mov	lr, r3
 8008a3a:	4770      	bx	lr

08008a3c <_fini>:
 8008a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a3e:	bf00      	nop
 8008a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a42:	bc08      	pop	{r3}
 8008a44:	469e      	mov	lr, r3
 8008a46:	4770      	bx	lr
